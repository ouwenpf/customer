/*
 Navicat Premium Data Transfer

 Source Server         : test
 Source Server Type    : MySQL
 Source Server Version : 50718 (5.7.18)
 Source Host           : test-sorting.lhdrr.com:3306
 Source Schema         : test_lvhuan

 Target Server Type    : MySQL
 Target Server Version : 50718 (5.7.18)
 File Encoding         : 65001

 Date: 25/09/2023 09:58:01
*/

SET NAMES utf8mb4;
-- SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for 202203160705
-- ----------------------------
DROP TABLE IF EXISTS `202203160705`;
CREATE TABLE `202203160705` (
  `审批编号` varchar(255) DEFAULT NULL,
  `标题` varchar(255) DEFAULT NULL,
  `发起时间` varchar(255) DEFAULT NULL,
  `完成时间` varchar(255) DEFAULT NULL,
  `耗时(时:分:秒)` varchar(255) DEFAULT NULL,
  `发起人姓名` varchar(255) DEFAULT NULL,
  `发起人部门` varchar(255) DEFAULT NULL,
  `历史审批人姓名` varchar(255) DEFAULT NULL,
  `当前处理人姓名` varchar(255) DEFAULT NULL,
  `批次号` varchar(255) DEFAULT NULL,
  `申请人` varchar(255) DEFAULT NULL,
  `是否包含临时计划` varchar(255) DEFAULT NULL,
  `销售计划明细` varchar(255) DEFAULT NULL,
  `销售计划编号` varchar(255) DEFAULT NULL,
  `销售客户` varchar(255) DEFAULT NULL,
  `重点关注客户` varchar(255) DEFAULT NULL,
  `销售货品` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for 无标题
-- ----------------------------
DROP TABLE IF EXISTS `无标题`;
CREATE TABLE `无标题` (
  `FinterID` varchar(255) DEFAULT NULL,
  `FTranType` varchar(255) DEFAULT NULL,
  `FEntryID` varchar(255) DEFAULT NULL,
  `FItemID` varchar(255) DEFAULT NULL,
  `FUnitID` varchar(255) DEFAULT NULL,
  `FQty` varchar(255) DEFAULT NULL,
  `FPrice` varchar(255) DEFAULT NULL,
  `FAmount` varchar(255) DEFAULT NULL,
  `disposal_way` varchar(255) DEFAULT NULL,
  `value_type` varchar(255) DEFAULT NULL,
  `FbasePrice` varchar(255) DEFAULT NULL,
  `FbaseAmount` varchar(255) DEFAULT NULL,
  `Ftaxrate` varchar(255) DEFAULT NULL,
  `Fbasetax` varchar(255) DEFAULT NULL,
  `Fbasetaxamount` varchar(255) DEFAULT NULL,
  `FPriceRef` varchar(255) DEFAULT NULL,
  `FDCTime` varchar(255) DEFAULT NULL,
  `FSourceInterId` varchar(255) DEFAULT NULL,
  `FSourceTranType` varchar(255) DEFAULT NULL,
  `red_ink_time` varchar(255) DEFAULT NULL,
  `is_hedge` varchar(255) DEFAULT NULL,
  `revise_state` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for Accoding_fee_list
-- ----------------------------
DROP TABLE IF EXISTS `Accoding_fee_list`;
CREATE TABLE `Accoding_fee_list` (
  `FBillNo` varchar(50) DEFAULT NULL,
  `FFeeID` varchar(50) DEFAULT NULL,
  `FFeeType` varchar(3) DEFAULT NULL,
  `FFeePerson` varchar(50) DEFAULT NULL,
  `FFeeAmount` float(10,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Accoding_stock_history
-- ----------------------------
DROP TABLE IF EXISTS `Accoding_stock_history`;
CREATE TABLE `Accoding_stock_history` (
  `FRelateBrID` int(11) NOT NULL COMMENT '分部id',
  `FStockID` varchar(20) NOT NULL COMMENT '仓库id',
  `FItemID` int(11) NOT NULL COMMENT '废料id',
  `FDCQty` decimal(10,1) NOT NULL,
  `FSCQty` decimal(10,1) NOT NULL,
  `FdifQty` int(11) NOT NULL,
  `FDCTime` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Accoding_stock_iod_table
-- ----------------------------
DROP TABLE IF EXISTS `Accoding_stock_iod_table`;
CREATE TABLE `Accoding_stock_iod_table` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL COMMENT '分部ID',
  `FStockID` varchar(13) DEFAULT NULL,
  `FItemID` int(11) unsigned DEFAULT NULL COMMENT '物料ID',
  `FDCQty` double DEFAULT NULL COMMENT '入库重量',
  `FSCQty` double DEFAULT NULL COMMENT '出库重量',
  `FdifQty` double DEFAULT NULL COMMENT '调账重量',
  `FDCTime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Accoding_stock_snapshot
-- ----------------------------
DROP TABLE IF EXISTS `Accoding_stock_snapshot`;
CREATE TABLE `Accoding_stock_snapshot` (
  `time_dims` varchar(20) NOT NULL COMMENT '时间维度',
  `time_val` varchar(20) NOT NULL COMMENT '时间数值',
  `begin_time` datetime NOT NULL COMMENT '开始时间',
  `end_time` datetime NOT NULL COMMENT '结束时间',
  `FRelateBrID` int(10) NOT NULL COMMENT '分部id',
  `FStockID` varchar(50) NOT NULL COMMENT '仓库id',
  `FItemID` int(10) NOT NULL COMMENT '品类id',
  `FDCQty` decimal(10,1) NOT NULL DEFAULT '0.0' COMMENT '入库重量',
  `FSCQty` decimal(10,1) NOT NULL DEFAULT '0.0' COMMENT '出库重量',
  `FinventoryQty` decimal(10,1) NOT NULL DEFAULT '0.0' COMMENT '库存重量',
  `FdifQty` decimal(10,1) NOT NULL DEFAULT '0.0' COMMENT '调账重量',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  KEY `idx_id` (`FRelateBrID`,`FStockID`,`FItemID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='仓库的出入库的结存数据（月、星期、年、季度）';

-- ----------------------------
-- Table structure for Acconding_cargo_list
-- ----------------------------
DROP TABLE IF EXISTS `Acconding_cargo_list`;
CREATE TABLE `Acconding_cargo_list` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FBillNo` varchar(50) DEFAULT NULL,
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `FItemID` int(11) unsigned DEFAULT NULL,
  `PUR_log` text,
  `PUR_FQty` double(18,1) DEFAULT NULL,
  `PUR_FAmount` double(19,2) DEFAULT NULL,
  `SOR_log` text,
  `SOR_FQty` double(18,1) DEFAULT NULL,
  `SOR_FAmount` double(19,2) DEFAULT NULL,
  `weight_loss` double(18,1) DEFAULT NULL,
  `purchase_time` varchar(10) DEFAULT NULL,
  `sort_time` varchar(10) DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `FEmpID` int(11) unsigned DEFAULT NULL,
  `FSaleStyle` varchar(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Acconding_total
-- ----------------------------
DROP TABLE IF EXISTS `Acconding_total`;
CREATE TABLE `Acconding_total` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FBillNo` varchar(50) DEFAULT NULL,
  `FSupplyID` varchar(11) DEFAULT NULL,
  `FDate` varchar(24) DEFAULT NULL,
  `FNowState` varchar(28) DEFAULT NULL,
  `PUR_TalFQty` double DEFAULT NULL,
  `PUR_TalFAmount` double DEFAULT NULL,
  `SOR_TalFQty` double DEFAULT NULL,
  `SOR_TalFAmount` double DEFAULT NULL,
  `weight_loss` double(18,1) DEFAULT NULL,
  `Total_profit` double(20,3) DEFAULT NULL,
  `purchase_expense` double(20,3) DEFAULT NULL,
  `car_fee` double(20,3) DEFAULT NULL,
  `man_fee` double(20,3) DEFAULT NULL,
  `sort_fee` double(20,3) DEFAULT NULL,
  `materiel_fee` double(20,3) DEFAULT NULL,
  `other_return_fee` double(20,3) DEFAULT NULL,
  `other_sort_fee` double(20,3) DEFAULT NULL,
  `materiel_price` double(20,3) DEFAULT NULL,
  `other_price` double(20,3) DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `FDeptID` int(11) DEFAULT NULL,
  `FEmpID` int(11) unsigned DEFAULT NULL,
  `FSaleStyle` varchar(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Datawall_PSS
-- ----------------------------
DROP TABLE IF EXISTS `Datawall_PSS`;
CREATE TABLE `Datawall_PSS` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `PUR_tal` double(18,1) DEFAULT NULL,
  `SOR_tal` double(18,1) DEFAULT NULL,
  `SEL_tal` double(18,1) DEFAULT NULL,
  `FDate` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Datawall_conItem
-- ----------------------------
DROP TABLE IF EXISTS `Datawall_conItem`;
CREATE TABLE `Datawall_conItem` (
  `FRelateBrID` int(10) unsigned DEFAULT NULL,
  `parent_id` int(10) unsigned DEFAULT NULL,
  `conTalFQty` double(18,1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Datawall_conTrash
-- ----------------------------
DROP TABLE IF EXISTS `Datawall_conTrash`;
CREATE TABLE `Datawall_conTrash` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `TalFQty` double(18,1) DEFAULT NULL,
  `TraFQty` double DEFAULT NULL,
  `FDate` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for PDMAN_DB_VERSION
-- ----------------------------
DROP TABLE IF EXISTS `PDMAN_DB_VERSION`;
CREATE TABLE `PDMAN_DB_VERSION` (
  `DB_VERSION` varchar(256) DEFAULT NULL,
  `VERSION_DESC` varchar(1024) DEFAULT NULL,
  `CREATED_TIME` varchar(32) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Tool_distribute_detail
-- ----------------------------
DROP TABLE IF EXISTS `Tool_distribute_detail`;
CREATE TABLE `Tool_distribute_detail` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `distribute_id` int(10) NOT NULL COMMENT '分发记录ID',
  `task_id` varchar(20) NOT NULL COMMENT '企业微信任务ID',
  `receivePersonID` varchar(50) NOT NULL COMMENT '接收人ERP_ID',
  `receivePerson` varchar(10) NOT NULL COMMENT '接收人姓名',
  `receivePersonWechat` varchar(50) NOT NULL COMMENT '接收人企业微信ID',
  `receiveFile_url` varchar(512) NOT NULL COMMENT '分发文件的路径',
  `dataRows` int(10) NOT NULL COMMENT '分发文件的记录行数',
  `sendActStatus` tinyint(3) NOT NULL DEFAULT '0' COMMENT '发送状态',
  `feedbackStatus` tinyint(3) NOT NULL DEFAULT '0' COMMENT '回复状态',
  `feedbackTime` datetime DEFAULT NULL COMMENT '回复时间',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=296 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for Tool_distribute_main
-- ----------------------------
DROP TABLE IF EXISTS `Tool_distribute_main`;
CREATE TABLE `Tool_distribute_main` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sendPersonID` varchar(50) NOT NULL COMMENT '发送人ID',
  `sendPerson` varchar(10) NOT NULL COMMENT '发送人姓名',
  `file_name` varchar(50) NOT NULL COMMENT '文件名',
  `file_url` varchar(512) NOT NULL COMMENT '文件路径',
  `dataRows` int(10) NOT NULL COMMENT '记录行数',
  `receiveTotal` int(10) NOT NULL COMMENT '接收人数',
  `sendActTotal` int(10) NOT NULL DEFAULT '0' COMMENT '发送数',
  `feedbackTotal` int(10) NOT NULL DEFAULT '0' COMMENT '回复数',
  `distributeTime` datetime DEFAULT NULL COMMENT '分发时间',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '记录创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '记录更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=92 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for Trans_assist_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_assist_table`;
CREATE TABLE `Trans_assist_table` (
  `FinterID` int(11) unsigned NOT NULL DEFAULT '0',
  `FTranType` varchar(3) DEFAULT '',
  `FEntryID` int(11) unsigned DEFAULT '0',
  `FItemID` int(11) unsigned DEFAULT NULL,
  `FUnitID` varchar(1) DEFAULT '',
  `FQty` float DEFAULT NULL,
  `FPrice` float DEFAULT NULL,
  `FAmount` double(19,2) DEFAULT NULL,
  `disposal_way` varchar(20) DEFAULT 'sorting' COMMENT '分拣属性： weighing -- 称重  sorting -- 分拣  correction -- 调账',
  `value_type` varchar(20) DEFAULT 'valuable' COMMENT '价值类型',
  `FbasePrice` char(1) DEFAULT '',
  `FbaseAmount` char(1) DEFAULT '',
  `Ftaxrate` char(1) DEFAULT '',
  `Fbasetax` char(1) DEFAULT '',
  `Fbasetaxamount` char(1) DEFAULT '',
  `FPriceRef` char(1) DEFAULT '',
  `FDCTime` varchar(24) DEFAULT NULL,
  `FSourceInterId` varchar(11) DEFAULT NULL,
  `FSourceTranType` varchar(3) DEFAULT '',
  `red_ink_time` timestamp NULL DEFAULT NULL,
  `is_hedge` tinyint(4) DEFAULT '0' COMMENT '是否为对冲数据：0-否 1-是',
  `revise_state` tinyint(4) DEFAULT '0' COMMENT '0:常规状态  1:被修改状态  2:新增状态 ',
  `bill_state` tinyint(4) DEFAULT '0' COMMENT '结算状态 0待结算 1已结算',
  KEY `FinterID` (`FinterID`) USING BTREE,
  KEY `FTranType` (`FTranType`) USING BTREE,
  KEY `FinterID_2` (`FinterID`,`FTranType`,`FItemID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_assist_table_bak
-- ----------------------------
DROP TABLE IF EXISTS `Trans_assist_table_bak`;
CREATE TABLE `Trans_assist_table_bak` (
  `FinterID` varchar(255) DEFAULT NULL,
  `FTranType` varchar(255) DEFAULT NULL,
  `FEntryID` varchar(255) DEFAULT NULL,
  `FItemID` varchar(255) DEFAULT NULL,
  `FUnitID` varchar(255) DEFAULT NULL,
  `FQty` varchar(255) DEFAULT NULL,
  `FPrice` varchar(255) DEFAULT NULL,
  `FAmount` varchar(255) DEFAULT NULL,
  `disposal_way` varchar(255) DEFAULT NULL,
  `value_type` varchar(255) DEFAULT NULL,
  `FbasePrice` varchar(255) DEFAULT NULL,
  `FbaseAmount` varchar(255) DEFAULT NULL,
  `Ftaxrate` varchar(255) DEFAULT NULL,
  `Fbasetax` varchar(255) DEFAULT NULL,
  `Fbasetaxamount` varchar(255) DEFAULT NULL,
  `FPriceRef` varchar(255) DEFAULT NULL,
  `FDCTime` varchar(255) DEFAULT NULL,
  `FSourceInterId` varchar(255) DEFAULT NULL,
  `FSourceTranType` varchar(255) DEFAULT NULL,
  `red_ink_time` varchar(255) DEFAULT NULL,
  `is_hedge` varchar(255) DEFAULT NULL,
  `revise_state` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for Trans_constitute_forCustomer
-- ----------------------------
DROP TABLE IF EXISTS `Trans_constitute_forCustomer`;
CREATE TABLE `Trans_constitute_forCustomer` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `parent_id` int(10) unsigned DEFAULT NULL,
  `FQty` double(19,2) DEFAULT NULL,
  `carbon_parm` float DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_constitute_forCustomer_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_constitute_forCustomer_table`;
CREATE TABLE `Trans_constitute_forCustomer_table` (
  `FRelateBrID` int(11) NOT NULL DEFAULT '0' COMMENT '分部ID',
  `FSupplyD` int(11) DEFAULT NULL COMMENT '客户ID',
  `Fbusiness` varchar(11) DEFAULT NULL COMMENT '业务归属人',
  `parent_id` int(10) NOT NULL DEFAULT '0' COMMENT '二级分类ID',
  `FQty` double(19,2) DEFAULT NULL COMMENT '重量',
  `FCarbon` float NOT NULL COMMENT '碳减排参数'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_INVforDep
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_INVforDep`;
CREATE TABLE `Trans_daily_INVforDep` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FDeptID` varchar(11) DEFAULT NULL,
  `trash_is` varchar(1) DEFAULT NULL,
  `input` double(18,1) DEFAULT NULL,
  `output` double(18,1) DEFAULT NULL,
  `FDCTime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_INVforDep_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_INVforDep_table`;
CREATE TABLE `Trans_daily_INVforDep_table` (
  `FRelateBrID` int(11) NOT NULL,
  `FDeptID` varchar(11) DEFAULT NULL,
  `trash_is` varchar(1) NOT NULL,
  `input` double(18,1) DEFAULT NULL,
  `output` double(18,1) DEFAULT NULL,
  `FDCTime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_SEL
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_SEL`;
CREATE TABLE `Trans_daily_SEL` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FItemID` text,
  `total_weight` double(18,1) DEFAULT NULL,
  `total_price` double(19,2) DEFAULT NULL,
  `count_order` bigint(21) DEFAULT NULL,
  `FDate` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_SEL_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_SEL_table`;
CREATE TABLE `Trans_daily_SEL_table` (
  `FRelateBrID` int(11) NOT NULL DEFAULT '0',
  `FItemID` text,
  `total_weight` double(18,1) DEFAULT NULL,
  `total_price` double(19,2) DEFAULT NULL,
  `count_order` bigint(21) NOT NULL DEFAULT '0',
  `FDate` varchar(24) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_SOR
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_SOR`;
CREATE TABLE `Trans_daily_SOR` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FInterID` int(11) unsigned DEFAULT NULL,
  `FDate` varchar(24) DEFAULT NULL,
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `FDeptID` varchar(11) DEFAULT NULL,
  `FEmpID` int(11) unsigned DEFAULT NULL,
  `FPOStyle` varchar(11) DEFAULT NULL,
  `FPOPrecent` varchar(11) DEFAULT NULL,
  `profit` double(19,2) DEFAULT NULL,
  `weight` double(18,1) DEFAULT NULL,
  `transport_pay` double(19,2) DEFAULT NULL,
  `classify_pay` double(19,2) DEFAULT NULL,
  `material_pay` double(19,2) DEFAULT NULL,
  `total_pay` double(19,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_SOR_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_SOR_table`;
CREATE TABLE `Trans_daily_SOR_table` (
  `FRelateBrID` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '分部ID',
  `FInterID` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '订单内码',
  `FDate` varchar(24) DEFAULT NULL COMMENT '订单日期',
  `FSupplyID` int(11) unsigned DEFAULT NULL COMMENT '客户内码',
  `Fbusiness` varchar(11) DEFAULT NULL COMMENT '业务归属人',
  `FDeptID` varchar(11) DEFAULT NULL COMMENT '部门内码',
  `FEmpID` int(11) unsigned DEFAULT NULL COMMENT '采购负责人',
  `FPOStyle` varchar(11) DEFAULT NULL COMMENT '结算方式',
  `FPOPrecent` varchar(11) DEFAULT NULL COMMENT '结算比例',
  `profit` double(19,2) DEFAULT NULL COMMENT '毛利润',
  `weight` double(18,1) DEFAULT NULL COMMENT '总净重',
  `transport_pay` double(19,2) DEFAULT NULL COMMENT '运输支出',
  `classify_pay` double(19,2) DEFAULT NULL COMMENT '分拣支出',
  `material_pay` double(19,2) DEFAULT NULL COMMENT '耗材支出',
  `total_pay` double(19,2) DEFAULT NULL COMMENT '合计支出'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_WH_profit
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_WH_profit`;
CREATE TABLE `Trans_daily_WH_profit` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FFeeID` varchar(50) DEFAULT NULL,
  `FFeeType` varchar(3) DEFAULT NULL,
  `FFeePerson` varchar(50) DEFAULT NULL,
  `FFeeAmount` double(19,2) DEFAULT NULL,
  `FFeebaseAmount` char(0) DEFAULT NULL,
  `Ftaxrate` char(0) DEFAULT NULL,
  `Fbasetax` char(0) DEFAULT NULL,
  `Fbasetaxamount` char(0) DEFAULT NULL,
  `FPriceRef` char(0) DEFAULT NULL,
  `FFeetime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_daily_WH_profit_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_daily_WH_profit_table`;
CREATE TABLE `Trans_daily_WH_profit_table` (
  `FRelateBrID` int(11) unsigned NOT NULL DEFAULT '0',
  `FFeeID` varchar(50) NOT NULL,
  `FFeeType` varchar(3) DEFAULT NULL,
  `FFeePerson` varchar(50) NOT NULL,
  `FFeeAmount` double(19,2) DEFAULT NULL,
  `FFeebaseAmount` char(0) NOT NULL,
  `Ftaxrate` char(0) NOT NULL,
  `Fbasetax` char(0) NOT NULL,
  `Fbasetaxamount` char(0) NOT NULL,
  `FPriceRef` char(0) NOT NULL,
  `FFeetime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_fee_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_fee_table`;
CREATE TABLE `Trans_fee_table` (
  `FInterID` int(11) unsigned NOT NULL DEFAULT '0',
  `FTranType` varchar(3) DEFAULT '',
  `Ffeesence` varchar(2) DEFAULT '',
  `FEntryID` int(11) unsigned DEFAULT '0',
  `FFeeID` varchar(50) DEFAULT '',
  `FFeeType` varchar(8) DEFAULT NULL,
  `FFeePerson` varchar(50) DEFAULT '',
  `FFeeExplain` varchar(255) DEFAULT '',
  `FFeeAmount` float(10,2) DEFAULT '0.00',
  `FFeebaseAmount` char(1) DEFAULT '',
  `Ftaxrate` char(1) DEFAULT '',
  `Fbasetax` char(1) DEFAULT '',
  `Fbasetaxamount` char(1) DEFAULT '',
  `FPriceRef` char(1) DEFAULT '',
  `FFeetime` varchar(24) DEFAULT NULL,
  `red_ink_time` timestamp NULL DEFAULT NULL,
  `is_hedge` tinyint(4) DEFAULT '0' COMMENT '是否为对冲数据 0否 1是',
  `revise_state` tinyint(4) DEFAULT '0' COMMENT '0:常规状态  1:被修改状态  2:新增状态',
  `bill_state` tinyint(4) DEFAULT '0' COMMENT '结算状态 0待结算 1已结算',
  KEY `FInterID` (`FInterID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_forCustomer
-- ----------------------------
DROP TABLE IF EXISTS `Trans_forCustomer`;
CREATE TABLE `Trans_forCustomer` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `total_weight` double(18,1) DEFAULT NULL,
  `total_profit` double(19,2) DEFAULT NULL,
  `FDate` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_forCustomer_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_forCustomer_table`;
CREATE TABLE `Trans_forCustomer_table` (
  `FRelateBrID` int(11) unsigned NOT NULL DEFAULT '0',
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `total_weight` double(18,1) DEFAULT NULL,
  `total_profit` double(19,2) DEFAULT NULL,
  `FDate` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_forOrder
-- ----------------------------
DROP TABLE IF EXISTS `Trans_forOrder`;
CREATE TABLE `Trans_forOrder` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FDeptID` varchar(11) DEFAULT NULL,
  `order_count` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_log_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_log_table`;
CREATE TABLE `Trans_log_table` (
  `FInterID` int(11) unsigned NOT NULL DEFAULT '0',
  `FTranType` varchar(3) NOT NULL DEFAULT '',
  `TCreate` int(20) unsigned DEFAULT NULL,
  `TCreatePerson` int(20) unsigned DEFAULT NULL,
  `TallotOver` varchar(10) DEFAULT NULL,
  `TallotPerson` varchar(20) DEFAULT NULL,
  `Tallot` varchar(20) DEFAULT NULL,
  `TgetorderOver` varchar(10) DEFAULT NULL,
  `TgetorderPerson` varchar(20) DEFAULT NULL,
  `Tgetorder` varchar(20) DEFAULT NULL,
  `TmaterialOver` varchar(10) DEFAULT NULL,
  `TmaterialPerson` varchar(20) DEFAULT NULL,
  `Tmaterial` varchar(20) DEFAULT NULL,
  `TpurchaseOver` varchar(10) DEFAULT NULL,
  `TpurchasePerson` varchar(10) DEFAULT NULL,
  `Tpurchase` varchar(10) DEFAULT NULL,
  `TpayOver` varchar(10) DEFAULT NULL,
  `TpayPerson` varchar(10) DEFAULT NULL,
  `Tpay` varchar(10) DEFAULT NULL,
  `TchangeOver` varchar(10) DEFAULT NULL,
  `TchangePerson` varchar(20) DEFAULT NULL,
  `Tchange` varchar(20) DEFAULT NULL,
  `TexpenseOver` varchar(10) DEFAULT NULL,
  `TexpensePerson` varchar(10) DEFAULT NULL,
  `Texpense` varchar(10) DEFAULT NULL,
  `TsortOver` varchar(10) DEFAULT NULL,
  `TsortPerson` varchar(10) DEFAULT NULL,
  `Tsort` varchar(10) DEFAULT NULL,
  `TallowOver` varchar(10) DEFAULT NULL,
  `TallowPerson` varchar(20) DEFAULT NULL,
  `Tallow` varchar(20) DEFAULT NULL,
  `TcheckOver` varchar(10) DEFAULT NULL,
  `TcheckPerson` varchar(10) DEFAULT NULL,
  `Tcheck` varchar(10) DEFAULT NULL,
  `state` varchar(28) NOT NULL DEFAULT '',
  KEY `FInterID_FTranType` (`FInterID`,`FTranType`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_main_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_main_table`;
CREATE TABLE `Trans_main_table` (
  `FRelateBrID` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '分部ID',
  `FInterID` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '订单内码ID',
  `FTranType` varchar(3) NOT NULL DEFAULT '' COMMENT '订单类型',
  `FDate` varchar(24) DEFAULT NULL COMMENT '订单生成日期',
  `createtime` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `Date` date DEFAULT NULL COMMENT '年月日',
  `FTrainNum` varchar(10) DEFAULT NULL COMMENT '车次',
  `FBillNo` varchar(50) NOT NULL DEFAULT '' COMMENT '订单号',
  `FSupplyID` int(11) unsigned DEFAULT NULL COMMENT '客户ID',
  `Fbusiness` varchar(11) DEFAULT NULL COMMENT '业务归属ID',
  `FDCStockID` varchar(12) DEFAULT NULL COMMENT '出库库房',
  `FSCStockID` varchar(12) DEFAULT NULL COMMENT '入库库房',
  `FCancellation` varchar(3) NOT NULL DEFAULT '' COMMENT '取消状态 0取消 1正常',
  `FROB` char(1) NOT NULL DEFAULT '' COMMENT '红蓝单',
  `FCorrent` varchar(1) NOT NULL DEFAULT '' COMMENT '可修改状态  0订单未完成 1订单完成',
  `FStatus` int(11) NOT NULL COMMENT '审核状态',
  `FUpStockWhenSave` varchar(1) DEFAULT NULL COMMENT '更新库存',
  `FExplanation` varchar(100) NOT NULL DEFAULT '' COMMENT '备注',
  `FDeptID` int(11) NOT NULL COMMENT '部门ID',
  `FEmpID` int(11) unsigned DEFAULT NULL COMMENT '订单负责人ID',
  `FCheckerID` varchar(10) DEFAULT NULL COMMENT '单据审核人ID',
  `FCheckDate` varchar(24) NOT NULL DEFAULT '' COMMENT '审核时间',
  `FFManagerID` int(11) unsigned DEFAULT NULL,
  `FSManagerID` int(11) unsigned DEFAULT NULL,
  `FBillerID` int(11) unsigned DEFAULT NULL,
  `FCurrencyID` varchar(1) NOT NULL DEFAULT '',
  `FNowState` varchar(28) NOT NULL DEFAULT '' COMMENT '当前订单状态',
  `FSaleStyle` varchar(1) DEFAULT NULL COMMENT '销售方式',
  `FPOStyle` varchar(11) DEFAULT NULL COMMENT '结算方式',
  `FPOPrecent` varchar(11) DEFAULT NULL COMMENT '结算比例',
  `TalFQty` double(18,1) unsigned DEFAULT NULL COMMENT '合计净重',
  `TalFAmount` double(19,2) DEFAULT NULL COMMENT '合计金额',
  `TalFrist` double DEFAULT NULL COMMENT '费用统计类别一',
  `TalSecond` double DEFAULT NULL COMMENT '费用统计类别二',
  `TalThird` double DEFAULT NULL COMMENT '费用统计类别三',
  `TalForth` double DEFAULT NULL COMMENT '费用统计类别四',
  `TalFeeFifth` decimal(10,3) DEFAULT '0.000' COMMENT '费用统计类别五',
  `account_year` smallint(6) NOT NULL DEFAULT '0' COMMENT '结账年份',
  `account_month` tinyint(4) NOT NULL DEFAULT '0' COMMENT '结账月份',
  `account_state` tinyint(4) NOT NULL DEFAULT '0' COMMENT '调账状态 0未结账 1结账完成',
  `is_hedge` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否包含红冲',
  `red_ink_time` timestamp NULL DEFAULT NULL COMMENT '红冲时间',
  KEY `FBillNo_FTranType` (`FBillNo`(11),`FTranType`) USING BTREE,
  KEY `FInterID` (`FInterID`) USING BTREE,
  KEY `Date_FTranType_FSaleStyle_FCancellation_FCorrent` (`Date`,`FTranType`,`FSaleStyle`,`FCancellation`,`FCorrent`) USING BTREE,
  KEY `FRelateBrID_FTranType_FDCStockID` (`FRelateBrID`,`FTranType`,`FDCStockID`) USING BTREE,
  KEY `FEmpID_Date` (`FEmpID`,`Date`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_main_table1
-- ----------------------------
DROP TABLE IF EXISTS `Trans_main_table1`;
CREATE TABLE `Trans_main_table1` (
  `FRelateBrID` varchar(255) DEFAULT NULL,
  `FInterID` varchar(255) DEFAULT NULL,
  `FTranType` varchar(255) DEFAULT NULL,
  `FDate` varchar(255) DEFAULT NULL,
  `Date` varchar(255) DEFAULT NULL,
  `FTrainNum` varchar(255) DEFAULT NULL,
  `FBillNo` varchar(255) DEFAULT NULL,
  `FSupplyID` varchar(255) DEFAULT NULL,
  `Fbusiness` varchar(255) DEFAULT NULL,
  `FDCStockID` varchar(255) DEFAULT NULL,
  `FSCStockID` varchar(255) DEFAULT NULL,
  `FCancellation` varchar(255) DEFAULT NULL,
  `FROB` varchar(255) DEFAULT NULL,
  `FCorrent` varchar(255) DEFAULT NULL,
  `FStatus` varchar(255) DEFAULT NULL,
  `FUpStockWhenSave` varchar(255) DEFAULT NULL,
  `FExplanation` varchar(255) DEFAULT NULL,
  `FDeptID` varchar(255) DEFAULT NULL,
  `FEmpID` varchar(255) DEFAULT NULL,
  `FCheckerID` varchar(255) DEFAULT NULL,
  `FCheckDate` varchar(255) DEFAULT NULL,
  `FFManagerID` varchar(255) DEFAULT NULL,
  `FSManagerID` varchar(255) DEFAULT NULL,
  `FBillerID` varchar(255) DEFAULT NULL,
  `FCurrencyID` varchar(255) DEFAULT NULL,
  `FNowState` varchar(255) DEFAULT NULL,
  `FSaleStyle` varchar(255) DEFAULT NULL,
  `FPOStyle` varchar(255) DEFAULT NULL,
  `FPOPrecent` varchar(255) DEFAULT NULL,
  `TalFQty` varchar(255) DEFAULT NULL,
  `TalFAmount` varchar(255) DEFAULT NULL,
  `TalFrist` varchar(255) DEFAULT NULL,
  `TalSecond` varchar(255) DEFAULT NULL,
  `TalThird` varchar(255) DEFAULT NULL,
  `TalForth` varchar(255) DEFAULT NULL,
  `TalFeeFifth` varchar(255) DEFAULT NULL,
  `account_year` varchar(255) DEFAULT NULL,
  `account_month` varchar(255) DEFAULT NULL,
  `account_state` varchar(255) DEFAULT NULL,
  `is_hedge` varchar(255) DEFAULT NULL,
  `red_ink_time` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for Trans_main_table_bak1
-- ----------------------------
DROP TABLE IF EXISTS `Trans_main_table_bak1`;
CREATE TABLE `Trans_main_table_bak1` (
  `FRelateBrID` varchar(255) DEFAULT NULL COMMENT '分部ID',
  `FInterID` varchar(255) DEFAULT NULL COMMENT '订单内码ID',
  `FTranType` varchar(255) DEFAULT NULL COMMENT '订单类型',
  `FDate` varchar(255) DEFAULT NULL COMMENT '订单生成日期',
  `Date` varchar(255) DEFAULT NULL COMMENT '年月日',
  `FTrainNum` varchar(255) DEFAULT NULL COMMENT '车次',
  `FBillNo` varchar(255) DEFAULT NULL COMMENT '订单号',
  `FSupplyID` varchar(255) DEFAULT NULL COMMENT '客户ID',
  `Fbusiness` varchar(255) DEFAULT NULL COMMENT '业务归属ID',
  `FDCStockID` varchar(255) DEFAULT NULL COMMENT '出库库房',
  `FSCStockID` varchar(255) DEFAULT NULL COMMENT '入库库房',
  `FCancellation` varchar(255) DEFAULT NULL COMMENT '取消状态 0取消 1正常',
  `FROB` varchar(255) DEFAULT NULL COMMENT '红蓝单',
  `FCorrent` varchar(255) DEFAULT NULL COMMENT '可修改状态  0订单未完成 1订单完成',
  `FStatus` varchar(255) DEFAULT NULL COMMENT '审核状态',
  `FUpStockWhenSave` varchar(255) DEFAULT NULL COMMENT '更新库存',
  `FExplanation` varchar(255) DEFAULT NULL COMMENT '备注',
  `FDeptID` varchar(255) DEFAULT NULL COMMENT '部门ID',
  `FEmpID` varchar(255) DEFAULT NULL COMMENT '订单负责人ID',
  `FCheckerID` varchar(255) DEFAULT NULL COMMENT '单据审核人ID',
  `FCheckDate` varchar(255) DEFAULT NULL COMMENT '审核时间',
  `FFManagerID` varchar(255) DEFAULT NULL,
  `FSManagerID` varchar(255) DEFAULT NULL,
  `FBillerID` varchar(255) DEFAULT NULL,
  `FCurrencyID` varchar(255) DEFAULT NULL,
  `FNowState` varchar(255) DEFAULT NULL COMMENT '当前订单状态',
  `FSaleStyle` varchar(255) DEFAULT NULL COMMENT '销售方式',
  `FPOStyle` varchar(255) DEFAULT NULL COMMENT '结算方式',
  `FPOPrecent` varchar(255) DEFAULT NULL COMMENT '结算比例',
  `TalFQty` varchar(255) DEFAULT NULL COMMENT '合计净重',
  `TalFAmount` varchar(255) DEFAULT NULL COMMENT '合计金额',
  `TalFrist` varchar(255) DEFAULT NULL COMMENT '费用统计类别一',
  `TalSecond` varchar(255) DEFAULT NULL COMMENT '费用统计类别二',
  `TalThird` varchar(255) DEFAULT NULL COMMENT '费用统计类别三',
  `TalForth` varchar(255) DEFAULT NULL COMMENT '费用统计类别四',
  `TalFeeFifth` varchar(255) DEFAULT NULL COMMENT '费用统计类别五',
  `account_year` varchar(255) DEFAULT NULL COMMENT '结账年份',
  `account_month` varchar(255) DEFAULT NULL COMMENT '结账月份',
  `account_state` varchar(255) DEFAULT NULL COMMENT '调账状态 0未结账 1结账完成',
  `is_hedge` varchar(255) DEFAULT NULL COMMENT '是否包含红冲',
  `red_ink_time` varchar(255) DEFAULT NULL COMMENT '红冲时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for Trans_materiel_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_materiel_table`;
CREATE TABLE `Trans_materiel_table` (
  `FInterID` int(11) unsigned NOT NULL DEFAULT '0',
  `FTranType` varchar(3) DEFAULT '',
  `FEntryID` int(11) unsigned DEFAULT '0',
  `FMaterielID` int(11) unsigned DEFAULT NULL,
  `FUseCount` bigint(20) DEFAULT NULL,
  `FPrice` double(19,2) DEFAULT NULL,
  `FMeterielAmount` double(19,2) DEFAULT NULL,
  `FMeterieltime` int(11) unsigned DEFAULT NULL,
  `red_ink_time` timestamp NULL DEFAULT NULL,
  `is_hedge` tinyint(4) unsigned DEFAULT '0' COMMENT '是否为对冲数据 0否 1是',
  `revise_state` tinyint(3) unsigned DEFAULT '0' COMMENT '0:常规状态  1:被修改状态  2:新增状态',
  `bill_state` tinyint(3) unsigned DEFAULT '0' COMMENT '结算状态 0待结算 1已结算',
  KEY `FInterID` (`FInterID`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_INVforCargo
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_INVforCargo`;
CREATE TABLE `Trans_month_INVforCargo` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FItemID` int(11) unsigned DEFAULT NULL,
  `trash_is` varchar(1) DEFAULT NULL,
  `input` double DEFAULT NULL,
  `output` double DEFAULT NULL,
  `FDCTime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_INVforDep
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_INVforDep`;
CREATE TABLE `Trans_month_INVforDep` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FDeptID` varchar(11) DEFAULT NULL,
  `trash_is` varchar(1) DEFAULT NULL,
  `input` double(18,1) DEFAULT NULL,
  `output` double(18,1) DEFAULT NULL,
  `FDCTime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_INVforDep_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_INVforDep_table`;
CREATE TABLE `Trans_month_INVforDep_table` (
  `FRelateBrID` int(11) NOT NULL DEFAULT '0' COMMENT '分部ID',
  `FDeptID` varchar(11) DEFAULT NULL COMMENT '部门ID（1=客服，2=企服，4=销售）',
  `trash_is` varchar(1) NOT NULL COMMENT '垃圾判断（1=是，0=不是）',
  `input` double(18,1) DEFAULT NULL COMMENT '入库量',
  `output` double(18,1) DEFAULT NULL COMMENT '出库量',
  `FDCTime` varchar(10) DEFAULT NULL COMMENT '出入库时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_SEL
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_SEL`;
CREATE TABLE `Trans_month_SEL` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FItemID` text,
  `total_weight` double(18,1) DEFAULT NULL,
  `total_price` double(19,2) DEFAULT NULL,
  `count_order` bigint(21) DEFAULT NULL,
  `FDate` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_SEL_rank_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_SEL_rank_table`;
CREATE TABLE `Trans_month_SEL_rank_table` (
  `FRalateBrID` int(11) unsigned NOT NULL DEFAULT '0',
  `FItemID` int(11) unsigned DEFAULT NULL,
  `total_weight` double(18,1) DEFAULT NULL,
  `total_price` double(19,2) DEFAULT NULL,
  `FDate` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_SEL_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_SEL_table`;
CREATE TABLE `Trans_month_SEL_table` (
  `FRelateBrID` int(11) NOT NULL DEFAULT '0' COMMENT '分部ID',
  `FItemID` text COMMENT '货品ID',
  `total_weight` double(18,1) DEFAULT NULL COMMENT '销售总净重',
  `total_price` double(19,2) DEFAULT NULL COMMENT '销售总金额',
  `count_order` bigint(21) NOT NULL DEFAULT '0' COMMENT '累计订单数',
  `FDate` varchar(10) DEFAULT NULL COMMENT '统计日期'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_SOR
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_SOR`;
CREATE TABLE `Trans_month_SOR` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FInterID` int(11) unsigned DEFAULT NULL,
  `FDate` varchar(24) DEFAULT NULL,
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `FDeptID` varchar(11) DEFAULT NULL,
  `FEmpID` int(11) unsigned DEFAULT NULL,
  `FPOStyle` varchar(11) DEFAULT NULL,
  `FPOPrecent` varchar(11) DEFAULT NULL,
  `profit` double(19,2) DEFAULT NULL,
  `weight` double(18,1) DEFAULT NULL,
  `transport_pay` double(19,2) DEFAULT NULL,
  `classify_pay` double(19,2) DEFAULT NULL,
  `material_pay` double(19,2) DEFAULT NULL,
  `total_pay` double(19,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_SOR_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_SOR_table`;
CREATE TABLE `Trans_month_SOR_table` (
  `FRelateBrID` int(11) unsigned NOT NULL DEFAULT '0',
  `FInterID` int(11) unsigned NOT NULL DEFAULT '0',
  `FDate` varchar(24) DEFAULT NULL,
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `FDeptID` varchar(11) DEFAULT NULL,
  `FEmpID` int(11) unsigned DEFAULT NULL,
  `FPOStyle` varchar(11) DEFAULT NULL,
  `FPOPrecent` varchar(11) DEFAULT NULL,
  `profit` double(19,2) DEFAULT NULL,
  `weight` double(18,1) DEFAULT NULL,
  `transport_pay` double(19,2) DEFAULT NULL,
  `classify_pay` double(19,2) DEFAULT NULL,
  `material_pay` double(19,2) DEFAULT NULL,
  `total_pay` double(19,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_WH_profit
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_WH_profit`;
CREATE TABLE `Trans_month_WH_profit` (
  `FRelateBrID` int(11) unsigned DEFAULT NULL,
  `FFeeID` varchar(50) DEFAULT NULL,
  `FFeeType` varchar(3) DEFAULT NULL,
  `FFeePerson` varchar(50) DEFAULT NULL,
  `FFeeAmount` double(19,2) DEFAULT NULL,
  `FFeebaseAmount` char(0) DEFAULT NULL,
  `Ftaxrate` char(0) DEFAULT NULL,
  `Fbasetax` char(0) DEFAULT NULL,
  `Fbasetaxamount` char(0) DEFAULT NULL,
  `FPriceRef` char(0) DEFAULT NULL,
  `FFeetime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_month_WH_profit_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_month_WH_profit_table`;
CREATE TABLE `Trans_month_WH_profit_table` (
  `FRelateBrID` int(11) unsigned NOT NULL DEFAULT '0',
  `FFeeID` varchar(50) NOT NULL,
  `FFeeType` varchar(3) DEFAULT NULL,
  `FFeePerson` varchar(50) NOT NULL,
  `FFeeAmount` double(19,2) DEFAULT NULL,
  `FFeebaseAmount` char(0) NOT NULL,
  `Ftaxrate` char(0) NOT NULL,
  `Fbasetax` char(0) NOT NULL,
  `Fbasetaxamount` char(0) NOT NULL,
  `FPriceRef` char(0) NOT NULL,
  `FFeetime` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for Trans_valid_purchase_table
-- ----------------------------
DROP TABLE IF EXISTS `Trans_valid_purchase_table`;
CREATE TABLE `Trans_valid_purchase_table` (
  `FRelateBrID` int(11) unsigned NOT NULL DEFAULT '0',
  `FInterID` int(11) unsigned NOT NULL DEFAULT '0',
  `FDate` varchar(10) DEFAULT NULL,
  `FBillNo` varchar(50) NOT NULL DEFAULT '',
  `FSupplyID` int(11) unsigned DEFAULT NULL,
  `Fbusiness` varchar(11) DEFAULT NULL,
  `FEmpID` int(11) unsigned DEFAULT NULL,
  `FSaleStyle` varchar(1) DEFAULT NULL,
  `FCancellation` varchar(3) NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for cs_aaa
-- ----------------------------
DROP TABLE IF EXISTS `cs_aaa`;
CREATE TABLE `cs_aaa` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `month` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for cus_null_createtime
-- ----------------------------
DROP TABLE IF EXISTS `cus_null_createtime`;
CREATE TABLE `cus_null_createtime` (
  `cus_id` int(11) NOT NULL,
  `createtime` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for demo_using
-- ----------------------------
DROP TABLE IF EXISTS `demo_using`;
CREATE TABLE `demo_using` (
  `id` int(11) NOT NULL,
  `psw` varchar(50) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `age` tinyint(4) DEFAULT NULL,
  `sex` tinyint(4) DEFAULT NULL,
  `create_time` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for dingtalk_application_info
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_application_info`;
CREATE TABLE `dingtalk_application_info` (
  `agentid` varchar(20) NOT NULL COMMENT '钉钉应用id',
  `corpid` varchar(50) NOT NULL COMMENT '企业群组关联id',
  `appkey` varchar(50) NOT NULL COMMENT '钉钉应用主键',
  `appsecret` varchar(100) NOT NULL COMMENT '钉钉应用密钥',
  `token` varchar(10) NOT NULL COMMENT '钉钉回调凭证',
  `aeskey` varchar(50) NOT NULL COMMENT '钉钉回调密钥',
  `url` varchar(128) NOT NULL COMMENT '应用回调地址',
  `call_back_tap` varchar(100) NOT NULL COMMENT '应用回调事件',
  `status` enum('enabled','disabled') NOT NULL,
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`agentid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for dingtalk_book_dep_info
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_book_dep_info`;
CREATE TABLE `dingtalk_book_dep_info` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `dep_id` int(11) DEFAULT NULL COMMENT '部门id',
  `parent_id` int(11) DEFAULT NULL COMMENT '父id',
  `name` varchar(30) DEFAULT NULL COMMENT '部门名称',
  `state` int(5) DEFAULT '0' COMMENT '状态：0--中间结点  1--叶子结点  2--删除结点',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `dep_id` (`dep_id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8mb4 COMMENT='通讯录的部门表';

-- ----------------------------
-- Table structure for dingtalk_book_user_info
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_book_user_info`;
CREATE TABLE `dingtalk_book_user_info` (
  `userid` bigint(50) NOT NULL COMMENT '员工的userid',
  `unionid` varchar(50) DEFAULT NULL COMMENT '员工在当前开发者企业账号范围内的唯一标识。',
  `wechat_id` varchar(50) DEFAULT NULL COMMENT '员工的企业微信id',
  `admin_id_group` varchar(50) DEFAULT '0' COMMENT '员工的admin_id组',
  `dept_id` int(11) DEFAULT NULL COMMENT '部门id',
  `parent_id` int(11) DEFAULT NULL COMMENT '父部门id',
  `top_dept` int(11) DEFAULT NULL COMMENT '顶级部门id',
  `name` varchar(20) DEFAULT NULL COMMENT '员工的姓名',
  `mobile` bigint(20) NOT NULL COMMENT '员工的手机号',
  `user_data` varchar(4096) DEFAULT NULL COMMENT '员工的json数据',
  `state` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态: 1--正常使用  0--离职',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`userid`) USING BTREE,
  UNIQUE KEY `unionid` (`unionid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='钉钉的通讯录用户的信息';

-- ----------------------------
-- Table structure for dingtalk_exterpayment
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_exterpayment`;
CREATE TABLE `dingtalk_exterpayment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `process_id` varchar(25) NOT NULL COMMENT '审批单号',
  `apply_branch` varchar(50) DEFAULT NULL COMMENT '申请部门',
  `apply_type` varchar(50) DEFAULT NULL COMMENT '付款方式',
  `payment_type` varchar(50) DEFAULT NULL COMMENT '付款事项',
  `pay_amount` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '付款金额',
  `reason` text COMMENT '付款理由',
  `recipient` varchar(20) DEFAULT NULL COMMENT '支付对象',
  `process_state` varchar(20) DEFAULT NULL COMMENT '审批状态',
  `process_result` varchar(20) DEFAULT NULL COMMENT '审批结果',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `process_id` (`process_id`)
) ENGINE=InnoDB AUTO_INCREMENT=107 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for dingtalk_failed_to_push_list
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_failed_to_push_list`;
CREATE TABLE `dingtalk_failed_to_push_list` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `call_back_tag` varchar(100) NOT NULL COMMENT '失败回调事件tag',
  `corpid` varchar(50) NOT NULL COMMENT '回调失败数据所属corpid',
  `agentid` int(10) NOT NULL DEFAULT '0' COMMENT 'agent_id',
  `event_time` bigint(13) NOT NULL COMMENT '事件的时间戳',
  `state` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态: 0--失败的回调   1--成功的回调    2-再次回调失败',
  `event_json` varchar(8192) NOT NULL COMMENT '推送失败事件的json',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建的时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改的时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=154 DEFAULT CHARSET=utf8mb4 COMMENT='推送失败的事件列表';

-- ----------------------------
-- Table structure for dingtalk_process_info
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_process_info`;
CREATE TABLE `dingtalk_process_info` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `agentid` varchar(20) NOT NULL COMMENT '应用关联ID',
  `processtype` varchar(32) NOT NULL COMMENT '审批实例类型',
  `processcode` varchar(100) NOT NULL COMMENT '审批实例模版ID',
  `status` enum('enabled','disabled') NOT NULL,
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for dingtalk_process_log
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_process_log`;
CREATE TABLE `dingtalk_process_log` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `process_id` varchar(25) NOT NULL COMMENT '审批单号',
  `process_type` varchar(20) NOT NULL COMMENT '审批类型',
  `applicant_dingtalk_id` varchar(20) NOT NULL COMMENT '申请人钉钉ID',
  `applicant` varchar(20) NOT NULL COMMENT '申请人姓名',
  `data` text COMMENT '关键信息',
  `precess_result` varchar(10) NOT NULL COMMENT '审批结果',
  `process_createTime` varchar(24) NOT NULL COMMENT '审批生成时间',
  `process_finishTime` varchar(24) NOT NULL COMMENT '审批完成时间',
  `remark` varchar(100) NOT NULL COMMENT '审批原因说明',
  `createAt` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '记录创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=563 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for dingtalk_resource_info
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_resource_info`;
CREATE TABLE `dingtalk_resource_info` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `agentid` varchar(20) NOT NULL COMMENT '应用关联ID',
  `resourcetype` varchar(20) NOT NULL COMMENT '钉钉资源类型',
  `resourcecode` varchar(100) NOT NULL COMMENT '钉钉资源编码',
  `status` enum('enabled','disabled') NOT NULL COMMENT '状态',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for dingtalk_visual_dept_num
-- ----------------------------
DROP TABLE IF EXISTS `dingtalk_visual_dept_num`;
CREATE TABLE `dingtalk_visual_dept_num` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `branch_id` int(11) DEFAULT NULL COMMENT '分部ID',
  `dept_id` int(11) DEFAULT NULL COMMENT '部门的钉钉id',
  `dept_child_id` varchar(100) DEFAULT NULL COMMENT '子部门的钉钉id',
  `dept_name` varchar(100) DEFAULT NULL COMMENT '部门的名称',
  `user_num` int(11) DEFAULT NULL COMMENT '部门员工的数量',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COMMENT='绿环固废信息化管理平台---可视化大数据---钉钉部门成员数量表';

-- ----------------------------
-- Table structure for ec_admin
-- ----------------------------
DROP TABLE IF EXISTS `ec_admin`;
CREATE TABLE `ec_admin` (
  `userId` varchar(25) DEFAULT NULL,
  `deptId` varchar(25) DEFAULT NULL,
  `userName` varchar(12) DEFAULT NULL,
  `account` varchar(15) DEFAULT NULL,
  `title` varchar(15) DEFAULT NULL,
  `discard` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for ec_down_customer
-- ----------------------------
DROP TABLE IF EXISTS `ec_down_customer`;
CREATE TABLE `ec_down_customer` (
  `crmId` bigint(20) NOT NULL DEFAULT '0' COMMENT '客户crmid',
  `name` varchar(20) DEFAULT NULL COMMENT '客户姓名',
  `mobile` varchar(20) DEFAULT NULL COMMENT '手机号码',
  `company` varchar(255) DEFAULT NULL COMMENT '客户公司名称',
  `follow_crmid` varchar(255) DEFAULT NULL COMMENT 'crmid',
  `follow_id` int(11) DEFAULT NULL COMMENT '业务归属人id',
  `follow_nickname` varchar(255) DEFAULT NULL COMMENT '业务归属人昵称'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for ec_up_customer
-- ----------------------------
DROP TABLE IF EXISTS `ec_up_customer`;
CREATE TABLE `ec_up_customer` (
  `crmId` bigint(20) NOT NULL DEFAULT '0' COMMENT '客户crmid',
  `name` varchar(20) DEFAULT NULL COMMENT '客户姓名',
  `mobile` varchar(20) DEFAULT NULL COMMENT '手机号码',
  `company` varchar(255) DEFAULT NULL COMMENT '客户公司名称',
  `follow_crmid` varchar(255) DEFAULT NULL COMMENT 'crmid',
  `follow_id` int(11) DEFAULT NULL COMMENT '业务归属人id',
  `branch_name` varchar(255) DEFAULT NULL COMMENT '分部名称',
  `service_department` varchar(255) DEFAULT NULL COMMENT '部门',
  `follow_nickname` varchar(255) DEFAULT NULL COMMENT '业务归属人昵称'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for performance_result_admin
-- ----------------------------
DROP TABLE IF EXISTS `performance_result_admin`;
CREATE TABLE `performance_result_admin` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `branch_id` int(11) NOT NULL COMMENT '分部归属',
  `userid` varchar(50) DEFAULT NULL COMMENT '钉钉userid',
  `period` varchar(20) DEFAULT NULL COMMENT '考核周期',
  `level` varchar(20) DEFAULT NULL COMMENT '绩效层级',
  `performance_id` int(11) DEFAULT NULL COMMENT '指标ID',
  `weight` tinyint(4) DEFAULT NULL COMMENT '权重',
  `baseline` decimal(10,3) DEFAULT NULL COMMENT '基准值',
  `varDaily` text COMMENT '日变动',
  `reference` decimal(10,3) DEFAULT NULL COMMENT '参考值',
  `actualize` decimal(10,3) DEFAULT NULL COMMENT '实际值',
  `score` tinyint(4) DEFAULT NULL COMMENT '分值',
  `status` enum('running','finish') DEFAULT 'running' COMMENT '考核状态',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for performance_template
-- ----------------------------
DROP TABLE IF EXISTS `performance_template`;
CREATE TABLE `performance_template` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `class` varchar(20) NOT NULL COMMENT '模板类型',
  `name` varchar(20) NOT NULL COMMENT '指标名称',
  `unit` varchar(20) NOT NULL COMMENT '单位',
  `create time` datetime NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for table_replace
-- ----------------------------
DROP TABLE IF EXISTS `table_replace`;
CREATE TABLE `table_replace` (
  `FInterID` int(11) NOT NULL DEFAULT '0',
  `FTranType` varchar(3) NOT NULL,
  `FFeeAmount` float(10,2) DEFAULT '0.00'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for test_table
-- ----------------------------
DROP TABLE IF EXISTS `test_table`;
CREATE TABLE `test_table` (
  `FRelateBrID` varchar(20) NOT NULL,
  `FBillNo` varchar(20) NOT NULL,
  `FItemID` int(11) NOT NULL,
  `FQty` float(10,1) NOT NULL,
  `FPrice` float(10,2) NOT NULL,
  `FAmount` float(10,3) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_accumulate_wall_report
-- ----------------------------
DROP TABLE IF EXISTS `uct_accumulate_wall_report`;
CREATE TABLE `uct_accumulate_wall_report` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `adcode` int(11) NOT NULL DEFAULT '0' COMMENT '行政区域编码 1省 2市 3区',
  `weight` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '采购重量',
  `availability` decimal(5,2) NOT NULL DEFAULT '0.00' COMMENT '可利用率',
  `rubbish` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '低值废弃物产生量',
  `rdf` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT 'rdf排放量',
  `carbon` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '碳排放量',
  `box` int(11) NOT NULL DEFAULT '0' COMMENT '分类箱',
  `customer_num` int(11) NOT NULL DEFAULT '0' COMMENT '服务客户数量',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `adcode` (`adcode`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9312 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_actual_add_order
-- ----------------------------
DROP TABLE IF EXISTS `uct_actual_add_order`;
CREATE TABLE `uct_actual_add_order` (
  `actual_log_id` int(11) NOT NULL COMMENT '审核id',
  `order_id` varchar(50) NOT NULL COMMENT '订单id',
  `admin_id` int(11) NOT NULL COMMENT '负责人id',
  `customer_id` int(11) NOT NULL COMMENT '客户id',
  `order_num` varchar(50) NOT NULL COMMENT '订单号',
  `selldate` date NOT NULL COMMENT '销售时间',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`actual_log_id`,`order_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_actual_tag
-- ----------------------------
DROP TABLE IF EXISTS `uct_actual_tag`;
CREATE TABLE `uct_actual_tag` (
  `tag_name` varchar(50) NOT NULL COMMENT '标签名',
  `tag_text` varchar(50) NOT NULL COMMENT '标签文本',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`tag_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='实际销售订单标签表';

-- ----------------------------
-- Table structure for uct_adcode
-- ----------------------------
DROP TABLE IF EXISTS `uct_adcode`;
CREATE TABLE `uct_adcode` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `name` varchar(100) NOT NULL DEFAULT '0' COMMENT '区域名称',
  `adcode` int(11) NOT NULL DEFAULT '0' COMMENT '行政区域码',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `name_adcode` (`name`,`adcode`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3538 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_adcode_main
-- ----------------------------
DROP TABLE IF EXISTS `uct_adcode_main`;
CREATE TABLE `uct_adcode_main` (
  `code` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `level` varchar(255) DEFAULT NULL,
  `rank` varchar(255) DEFAULT NULL,
  `adcode` varchar(255) DEFAULT NULL,
  `post_code` varchar(255) DEFAULT NULL,
  `area_code` varchar(255) DEFAULT NULL,
  `ur_code` varchar(255) DEFAULT NULL,
  `municipality` varchar(255) DEFAULT NULL,
  `virtual` varchar(255) DEFAULT NULL,
  `dummy` varchar(255) DEFAULT NULL,
  `longitude` varchar(255) DEFAULT NULL,
  `latitude` varchar(255) DEFAULT NULL,
  `center` varchar(255) DEFAULT NULL,
  `province` varchar(255) DEFAULT NULL,
  `city` varchar(255) DEFAULT NULL,
  `county` varchar(255) DEFAULT NULL,
  `town` varchar(255) DEFAULT NULL,
  `village` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_admin
-- ----------------------------
DROP TABLE IF EXISTS `uct_admin`;
CREATE TABLE `uct_admin` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `branch_id` int(10) unsigned DEFAULT NULL COMMENT '分部ID',
  `ec_userid` bigint(20) unsigned DEFAULT '0' COMMENT 'ec员工id',
  `crmid` bigint(20) unsigned DEFAULT '0' COMMENT 'ec系统id',
  `ec_linkid` varchar(100) DEFAULT '0' COMMENT 'ec系统联系人id',
  `staff_accid` varchar(100) DEFAULT '0' COMMENT '互客系统员工id',
  `cus_accid` varchar(100) DEFAULT '0' COMMENT '互客系统客户id',
  `link_accid` varchar(100) DEFAULT '0' COMMENT '互客系统客户联系人id',
  `userid` varchar(25) DEFAULT NULL COMMENT '钉钉id',
  `wechat_id` varchar(50) DEFAULT NULL COMMENT '企业微信id',
  `username` varchar(20) NOT NULL DEFAULT '' COMMENT '用户名',
  `nickname` varchar(50) NOT NULL DEFAULT '' COMMENT '昵称',
  `password` varchar(32) NOT NULL DEFAULT '' COMMENT '密码',
  `salt` varchar(30) NOT NULL DEFAULT '' COMMENT '密码盐',
  `avatar` varchar(100) NOT NULL DEFAULT '' COMMENT '头像',
  `mobile` varchar(30) DEFAULT NULL COMMENT '手机号',
  `email` varchar(100) NOT NULL DEFAULT '' COMMENT '电子邮箱',
  `loginfailure` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '失败次数',
  `logintime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '登录时间',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `token` varchar(59) NOT NULL DEFAULT '' COMMENT 'Session标识',
  `last_appletid` varchar(50) DEFAULT NULL COMMENT '最近操作的应用标识',
  `status` varchar(30) NOT NULL DEFAULT 'normal' COMMENT '状态 normal正常  hidden隐藏',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `username` (`username`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9581 DEFAULT CHARSET=utf8 COMMENT='管理员表';

-- ----------------------------
-- Table structure for uct_admin_customer_mapping
-- ----------------------------
DROP TABLE IF EXISTS `uct_admin_customer_mapping`;
CREATE TABLE `uct_admin_customer_mapping` (
  `admin_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `up_customer_ids` varchar(500) NOT NULL DEFAULT '' COMMENT '上游客户列表',
  `down_customer_ids` varchar(500) NOT NULL DEFAULT '' COMMENT '下游客户列表',
  PRIMARY KEY (`admin_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6566 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_admin_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_admin_log`;
CREATE TABLE `uct_admin_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '管理员ID',
  `username` varchar(30) NOT NULL DEFAULT '' COMMENT '管理员名字',
  `url` varchar(100) NOT NULL DEFAULT '' COMMENT '操作页面',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '日志标题',
  `content` text NOT NULL COMMENT '内容',
  `ip` varchar(50) NOT NULL DEFAULT '' COMMENT 'IP',
  `useragent` varchar(255) NOT NULL DEFAULT '' COMMENT 'User-Agent',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '操作时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `name` (`username`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9227 DEFAULT CHARSET=utf8 COMMENT='管理员日志表';

-- ----------------------------
-- Table structure for uct_agent_audit
-- ----------------------------
DROP TABLE IF EXISTS `uct_agent_audit`;
CREATE TABLE `uct_agent_audit` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL DEFAULT '' COMMENT '姓名',
  `mobile` varchar(12) NOT NULL DEFAULT '' COMMENT '手机',
  `email` varchar(50) NOT NULL DEFAULT '' COMMENT '邮箱',
  `branch_id` int(11) DEFAULT NULL COMMENT '分部',
  `role_id` int(11) DEFAULT NULL COMMENT '角色id',
  `customer_id` int(11) DEFAULT NULL COMMENT '客户id',
  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '审核状态',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=360 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_apply_for_material_temp
-- ----------------------------
DROP TABLE IF EXISTS `uct_apply_for_material_temp`;
CREATE TABLE `uct_apply_for_material_temp` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `FInterID` int(11) DEFAULT NULL COMMENT '订单内码ID',
  `order_id` varchar(20) CHARACTER SET utf8 NOT NULL COMMENT '订单号',
  `meta_id` int(10) DEFAULT NULL COMMENT '辅料的id',
  `number` int(10) NOT NULL COMMENT '数量',
  `meta_price` decimal(10,2) DEFAULT NULL COMMENT '单价',
  `meta_amount` decimal(10,2) DEFAULT NULL COMMENT '总值',
  `ware_id` int(11) DEFAULT NULL COMMENT '仓库id',
  `state` tinyint(1) DEFAULT '0' COMMENT '处理状态：0--未处理  1--处理完成   2--等待处理  3--其他情况',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=137 DEFAULT CHARSET=utf16 COMMENT='1--2月补录辅材的临时表';

-- ----------------------------
-- Table structure for uct_apply_for_order_temp
-- ----------------------------
DROP TABLE IF EXISTS `uct_apply_for_order_temp`;
CREATE TABLE `uct_apply_for_order_temp` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FInterID` int(10) DEFAULT NULL COMMENT '订单内码ID',
  `order_id` varchar(20) DEFAULT NULL COMMENT '订单号',
  `FTranName` varchar(20) DEFAULT NULL COMMENT '订单类型名称',
  `FTranType` varchar(20) DEFAULT NULL COMMENT '订单类型',
  `metaName` varchar(30) DEFAULT NULL COMMENT '物料名称',
  `metaID` int(10) DEFAULT NULL COMMENT '物料id',
  `net_weight` decimal(10,2) DEFAULT NULL COMMENT '修改后的净重',
  `price` decimal(10,2) DEFAULT NULL COMMENT '修改后的单价',
  `state` tinyint(2) DEFAULT '0' COMMENT '处理状态：0--未处理  1--处理完成   2--等待处理  3--其他情况',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COMMENT='修改订单（修改红冲数据）的临时表';

-- ----------------------------
-- Table structure for uct_appointments
-- ----------------------------
DROP TABLE IF EXISTS `uct_appointments`;
CREATE TABLE `uct_appointments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_id` int(11) NOT NULL DEFAULT '0' COMMENT '用户id',
  `mobile` varchar(12) NOT NULL DEFAULT '' COMMENT '手机号',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '预约类型 1大数据 2废料评测',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_area
-- ----------------------------
DROP TABLE IF EXISTS `uct_area`;
CREATE TABLE `uct_area` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `pid` int(10) DEFAULT NULL COMMENT '父id',
  `shortname` varchar(100) DEFAULT NULL COMMENT '简称',
  `name` varchar(100) DEFAULT NULL COMMENT '名称',
  `mergename` varchar(255) DEFAULT NULL COMMENT '全称',
  `level` tinyint(4) DEFAULT NULL COMMENT '层级 0 1 2 省市区县',
  `pinyin` varchar(100) DEFAULT NULL COMMENT '拼音',
  `code` varchar(100) DEFAULT NULL COMMENT '长途区号',
  `zip` varchar(100) DEFAULT NULL COMMENT '邮编',
  `first` varchar(50) DEFAULT NULL COMMENT '首字母',
  `lng` varchar(100) DEFAULT NULL COMMENT '经度',
  `lat` varchar(100) DEFAULT NULL COMMENT '纬度',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `pid` (`pid`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3749 DEFAULT CHARSET=utf8 COMMENT='地区表';

-- ----------------------------
-- Table structure for uct_attachment
-- ----------------------------
DROP TABLE IF EXISTS `uct_attachment`;
CREATE TABLE `uct_attachment` (
  `id` int(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `url` varchar(255) NOT NULL DEFAULT '' COMMENT '物理路径',
  `imagewidth` varchar(30) NOT NULL DEFAULT '' COMMENT '宽度',
  `imageheight` varchar(30) NOT NULL DEFAULT '' COMMENT '高度',
  `imagetype` varchar(30) NOT NULL DEFAULT '' COMMENT '图片类型',
  `imageframes` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '图片帧数',
  `filesize` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '文件大小',
  `mimetype` varchar(100) NOT NULL DEFAULT '' COMMENT 'mime类型',
  `extparam` varchar(255) NOT NULL DEFAULT '' COMMENT '透传数据',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建日期',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `uploadtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '上传时间',
  `storage` enum('local','upyun','qiniu') NOT NULL DEFAULT 'local' COMMENT '存储位置',
  `sha1` varchar(40) NOT NULL DEFAULT '' COMMENT '文件 sha1编码',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5510 DEFAULT CHARSET=utf8 COMMENT='附件表';

-- ----------------------------
-- Table structure for uct_auth_group
-- ----------------------------
DROP TABLE IF EXISTS `uct_auth_group`;
CREATE TABLE `uct_auth_group` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `pid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父组别',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '组名',
  `rules` text NOT NULL COMMENT '规则ID',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=utf8 COMMENT='分组表';

-- ----------------------------
-- Table structure for uct_auth_group_access
-- ----------------------------
DROP TABLE IF EXISTS `uct_auth_group_access`;
CREATE TABLE `uct_auth_group_access` (
  `uid` int(10) unsigned NOT NULL COMMENT '会员ID',
  `group_id` int(10) unsigned NOT NULL COMMENT '级别ID',
  KEY `uid_group_id` (`uid`,`group_id`) USING BTREE,
  KEY `group_id` (`group_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='权限分组表';

-- ----------------------------
-- Table structure for uct_auth_group_bak
-- ----------------------------
DROP TABLE IF EXISTS `uct_auth_group_bak`;
CREATE TABLE `uct_auth_group_bak` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `pid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父组别',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '组名',
  `rules` text NOT NULL COMMENT '规则ID',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=57 DEFAULT CHARSET=utf8 COMMENT='分组表';

-- ----------------------------
-- Table structure for uct_auth_rule
-- ----------------------------
DROP TABLE IF EXISTS `uct_auth_rule`;
CREATE TABLE `uct_auth_rule` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` enum('menu','file') NOT NULL DEFAULT 'file' COMMENT 'menu为菜单,file为权限节点',
  `pid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父ID',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '规则名称',
  `title` varchar(50) NOT NULL DEFAULT '' COMMENT '规则名称',
  `icon` varchar(50) NOT NULL DEFAULT '' COMMENT '图标',
  `ant_url` varchar(50) NOT NULL DEFAULT '' COMMENT '蚂蚁路径',
  `ant_icon` varchar(50) NOT NULL DEFAULT '' COMMENT '蚂蚁图标',
  `client_icon` varchar(100) NOT NULL DEFAULT '' COMMENT '客户端图标',
  `condition` varchar(255) NOT NULL DEFAULT '' COMMENT '条件',
  `message` varchar(50) NOT NULL DEFAULT '' COMMENT '消息通知红点',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `ismenu` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '是否为菜单',
  `isclient` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '是否为客户端的菜单',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `pid` (`pid`) USING BTREE,
  KEY `weigh` (`weigh`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=825 DEFAULT CHARSET=utf8 COMMENT='节点表';

-- ----------------------------
-- Table structure for uct_auth_rule_bak
-- ----------------------------
DROP TABLE IF EXISTS `uct_auth_rule_bak`;
CREATE TABLE `uct_auth_rule_bak` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` enum('menu','file') NOT NULL DEFAULT 'file' COMMENT 'menu为菜单,file为权限节点',
  `pid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父ID',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '规则名称',
  `title` varchar(50) NOT NULL DEFAULT '' COMMENT '规则名称',
  `icon` varchar(50) NOT NULL DEFAULT '' COMMENT '图标',
  `ant_url` varchar(50) NOT NULL DEFAULT '' COMMENT '蚂蚁路径',
  `ant_icon` varchar(50) NOT NULL DEFAULT '' COMMENT '蚂蚁图标',
  `client_icon` varchar(100) NOT NULL DEFAULT '' COMMENT '客户端图标',
  `condition` varchar(255) NOT NULL DEFAULT '' COMMENT '条件',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `ismenu` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '是否为菜单',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `name` (`name`) USING BTREE,
  KEY `pid` (`pid`) USING BTREE,
  KEY `weigh` (`weigh`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=729 DEFAULT CHARSET=utf8 COMMENT='节点表';

-- ----------------------------
-- Table structure for uct_auxy_material_warehouse
-- ----------------------------
DROP TABLE IF EXISTS `uct_auxy_material_warehouse`;
CREATE TABLE `uct_auxy_material_warehouse` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ware_id` int(10) DEFAULT NULL COMMENT '仓库id',
  `mate_order_id` varchar(32) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '辅材单号',
  `apply_id` int(10) NOT NULL DEFAULT '0' COMMENT '申请人id',
  `receive_id` int(10) DEFAULT NULL COMMENT '发放人id/接收人id',
  `mate_type` varchar(20) CHARACTER SET utf8 NOT NULL DEFAULT 'out' COMMENT '辅材单类型:''m_out''--出库单    ''m_in''--入库单',
  `mate_state` varchar(30) CHARACTER SET utf8 NOT NULL DEFAULT 'dispose' COMMENT '辅材单状态: ''dispose''--待发放/待接收    ''processed''--已处理/已接收   ''repeal''--已撤销',
  `memo` varchar(255) DEFAULT NULL COMMENT '留言',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8mb4 COMMENT='辅材的出入库表';

-- ----------------------------
-- Table structure for uct_auxy_material_warehouse_detail
-- ----------------------------
DROP TABLE IF EXISTS `uct_auxy_material_warehouse_detail`;
CREATE TABLE `uct_auxy_material_warehouse_detail` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(10) NOT NULL COMMENT '主表id',
  `material_id` int(10) NOT NULL COMMENT '辅材id',
  `material_num` int(10) NOT NULL COMMENT '辅材数量',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8mb4 COMMENT='辅材出入库详情表';

-- ----------------------------
-- Table structure for uct_auxy_material_warehouse_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_auxy_material_warehouse_log`;
CREATE TABLE `uct_auxy_material_warehouse_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ware_id` int(10) DEFAULT NULL COMMENT '仓库id',
  `admin_id` int(10) NOT NULL COMMENT '操作人',
  `mate_order_id` varchar(32) CHARACTER SET utf8 NOT NULL COMMENT '单号',
  `mate_type` varchar(32) DEFAULT NULL COMMENT '辅材单类型:''m_out''--出库单    ''m_in''--入库单',
  `mate_state` varchar(32) DEFAULT NULL COMMENT '辅材单状态: ''dispose''--待发放/待接收    ''processed''--已处理/已接收   ''repeal''--已撤销',
  `content` varchar(500) CHARACTER SET utf8 NOT NULL COMMENT '操作内容',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=86 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_auxy_material_warehouse_query
-- ----------------------------
DROP TABLE IF EXISTS `uct_auxy_material_warehouse_query`;
CREATE TABLE `uct_auxy_material_warehouse_query` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ware_id` int(10) NOT NULL COMMENT '仓库id',
  `mate_order_id` varchar(32) CHARACTER SET utf8 NOT NULL COMMENT '辅材单号',
  `apply_id` int(10) NOT NULL COMMENT '申请人id',
  `receive_id` int(10) DEFAULT NULL COMMENT '发放人id/接收人id',
  `mate_type` varchar(32) NOT NULL COMMENT '辅材单类型',
  `mate_state` varchar(32) NOT NULL COMMENT '辅材单状态',
  `material_id` int(10) NOT NULL COMMENT '辅材id',
  `material_name` varchar(32) CHARACTER SET utf8 DEFAULT NULL COMMENT '辅材的名称',
  `material_num` int(10) NOT NULL COMMENT '辅材数量',
  `dispose_time` int(10) NOT NULL COMMENT '处置时间',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_bas_device
-- ----------------------------
DROP TABLE IF EXISTS `uct_bas_device`;
CREATE TABLE `uct_bas_device` (
  `station_id` varchar(20) NOT NULL COMMENT '工站ID, 表示这个装置所属的工站',
  `item_no` int(11) NOT NULL COMMENT '序号, 表示在工站中的排列顺序, 范围 1~n',
  `device_id` varchar(20) DEFAULT '' COMMENT '装置ID, 一个唯一的编号',
  `device_tty` varchar(255) DEFAULT '' COMMENT '终端号, 表示在工站中系统挂载的标识,例: /dev/ttyUSB0',
  `device_use` varchar(20) DEFAULT 'large-cate' COMMENT '装置用途: [ small-cate 小品类 / large-cate 大品类 / low-value-waster 低值废弃物  | no-sorting-cate 免拣品类]',
  `device_label` varchar(50) DEFAULT '' COMMENT '装置的标签名,例: 1号磅称',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`station_id`,`item_no`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_bas_line
-- ----------------------------
DROP TABLE IF EXISTS `uct_bas_line`;
CREATE TABLE `uct_bas_line` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line_id` varchar(20) NOT NULL DEFAULT '' COMMENT '分拣线ID',
  `branch_id` int(11) DEFAULT '0' COMMENT '分部ID, 表示所属的分部',
  `storage_id` int(11) DEFAULT '0' COMMENT '仓库ID, 表示所属分部的所属仓库',
  `name` varchar(255) DEFAULT '' COMMENT '分拣线名称',
  `leader` int(11) DEFAULT '0' COMMENT '分拣线长',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `auto_confirm_flag` int(11) DEFAULT '0' COMMENT '自动确认通过开关, 0 表示 关闭, 1 启动开启.',
  `auto_priority_flag` tinyint(1) DEFAULT '0' COMMENT '启用优先级开关, 0 表示 关闭, 1 启动开启',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8 COMMENT='分拣线信息表  分拣线ID编码格式:          分部编号[二位缩写]+仓号[1~9 A~F]+线体编号[1~9 A~F]   例: BA11  宝安分部-1号仓-1号分拣线      LH12  龙华分部-1号仓-2号分拣线';

-- ----------------------------
-- Table structure for uct_bas_logistics_equipment
-- ----------------------------
DROP TABLE IF EXISTS `uct_bas_logistics_equipment`;
CREATE TABLE `uct_bas_logistics_equipment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(20) DEFAULT NULL COMMENT '编码',
  `name` varchar(50) DEFAULT NULL COMMENT '容器名称',
  `category` varchar(20) DEFAULT 'container',
  `type` varchar(20) DEFAULT 'transfer-box' COMMENT '容器类型',
  `tare` decimal(6,2) DEFAULT '0.00' COMMENT '皮重',
  `weight_unit` varchar(5) NOT NULL DEFAULT 'kg',
  `volume` decimal(6,2) DEFAULT NULL COMMENT '体积占用空间',
  `volume_unit` varchar(5) NOT NULL DEFAULT 'm3',
  `capacity` decimal(6,2) DEFAULT NULL COMMENT '可装载容量',
  `lenght` decimal(6,2) DEFAULT NULL COMMENT '长度',
  `width` decimal(6,2) DEFAULT NULL COMMENT '宽度',
  `height` decimal(6,2) DEFAULT NULL COMMENT '高度',
  `length_unit` varchar(5) NOT NULL DEFAULT 'm',
  `stackable_qty` int(11) DEFAULT '0' COMMENT '可堆叠层数',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_bas_station
-- ----------------------------
DROP TABLE IF EXISTS `uct_bas_station`;
CREATE TABLE `uct_bas_station` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `station_id` varchar(20) NOT NULL DEFAULT '' COMMENT '工站ID',
  `station_type` varchar(20) DEFAULT 'sorting' COMMENT '工站类型: [ weigh 称重装置 / rfid 读RFID编码 ]',
  `line_id` varchar(20) DEFAULT '' COMMENT '分拣线ID, 表示工站所属的分拣线',
  `max_mount_num` int(11) DEFAULT '0' COMMENT '装置最大可挂载数量',
  `status` varchar(20) DEFAULT 'setup' COMMENT '工站状态:  [ setup 配置 / stand-by 待命 / working 工作 ]',
  `serail_number` varchar(20) DEFAULT '' COMMENT '系列号',
  `model` varchar(255) DEFAULT '' COMMENT '机型',
  `screen_direction` varchar(20) NOT NULL DEFAULT 'normal' COMMENT '屏幕显示方向',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=194 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_branch
-- ----------------------------
DROP TABLE IF EXISTS `uct_branch`;
CREATE TABLE `uct_branch` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ec_id` int(11) DEFAULT NULL COMMENT 'ec对应的id',
  `branch_code` varchar(20) DEFAULT '',
  `adcode` int(11) DEFAULT '0',
  `ec_customer_id` int(11) DEFAULT NULL COMMENT 'ec客户表对应id',
  `setting_key` int(11) DEFAULT NULL COMMENT '对应配置表的值',
  `name` varchar(50) DEFAULT NULL COMMENT '分部名称',
  `print_title` varchar(100) DEFAULT '深圳绿环再生资源' COMMENT '打印抬头',
  `company_name` varchar(100) DEFAULT '深圳绿环再生资源公司' COMMENT '公司名',
  `position` text COMMENT '坐标',
  `branch_detail` text COMMENT '分部介绍',
  `branch_img_url` varchar(255) DEFAULT '' COMMENT '分部介绍图片路径',
  `switch` tinyint(4) NOT NULL DEFAULT '1' COMMENT '开关 1:开 0关',
  `receivable_switch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '小额收款开关',
  `presell_switch` tinyint(4) NOT NULL DEFAULT '1' COMMENT '预提销售单价开关',
  `actual_switch` tinyint(4) NOT NULL DEFAULT '1' COMMENT '实际销售单价开关',
  `sign_switch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '现场签到开关',
  `sorting_switch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '分拣人工开关',
  `centre_switch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '中央开关',
  `centre_warehouse_id` tinyint(4) DEFAULT NULL COMMENT '中央仓储id',
  `centre_branch_id` tinyint(4) DEFAULT NULL COMMENT '中央分部id',
  `sorting_unit_cargo_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '有价分拣提成单价',
  `weigh_unit_cargo_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '有价过磅提成单价',
  `sorting_unit_labor_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '分拣基础人工单价',
  `weigh_unit_labor_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '过磅基础人工单价',
  `standard_price` decimal(5,2) NOT NULL DEFAULT '0.00' COMMENT '基准仓库处置单价/吨',
  `overdue_time` int(10) NOT NULL DEFAULT '0' COMMENT '过期时间',
  `evaluate_value` float NOT NULL DEFAULT '0' COMMENT '评分基准',
  `cargo_commission_list` varchar(200) NOT NULL DEFAULT '0' COMMENT '货品提成列表选项',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8 COMMENT='分部表';

-- ----------------------------
-- Table structure for uct_branch_bak
-- ----------------------------
DROP TABLE IF EXISTS `uct_branch_bak`;
CREATE TABLE `uct_branch_bak` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ec_id` int(11) DEFAULT NULL COMMENT 'ec对应的id',
  `branch_code` varchar(20) DEFAULT '',
  `adcode` int(11) DEFAULT '0',
  `ec_customer_id` int(11) DEFAULT NULL COMMENT 'ec客户表对应id',
  `setting_key` int(11) DEFAULT NULL COMMENT '对应配置表的值',
  `name` varchar(50) DEFAULT NULL COMMENT '分部名称',
  `print_title` varchar(50) DEFAULT '深圳绿环再生资源' COMMENT '客户单据抬头',
  `company_name` varchar(50) DEFAULT '深圳绿环再生资源' COMMENT '公司名称',
  `position` text COMMENT '坐标',
  `switch` tinyint(4) NOT NULL DEFAULT '1' COMMENT '开关 1:开 0关',
  `presell_switch` tinyint(4) NOT NULL DEFAULT '1' COMMENT '预提销售单价开关',
  `actual_switch` tinyint(4) NOT NULL DEFAULT '1' COMMENT '实际销售单价开关',
  `sign_switch` tinyint(4) NOT NULL DEFAULT '1' COMMENT '现场签到开关',
  `sorting_switch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '分拣人工开关',
  `centre_switch` tinyint(4) NOT NULL DEFAULT '0' COMMENT '中央开关',
  `centre_warehouse_id` tinyint(4) DEFAULT NULL COMMENT '中央仓储id',
  `centre_branch_id` tinyint(4) DEFAULT NULL COMMENT '中央分部id',
  `sorting_unit_cargo_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '有价分拣提成单价',
  `weigh_unit_cargo_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '有价过磅提成单价',
  `sorting_unit_labor_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '分拣基础人工单价',
  `weigh_unit_labor_price` float(8,2) NOT NULL DEFAULT '0.00' COMMENT '过磅基础人工单价',
  `standard_price` decimal(5,2) NOT NULL DEFAULT '0.00' COMMENT '基准仓库处置单价/吨',
  `cargo_commission_list` varchar(200) NOT NULL DEFAULT '0.00' COMMENT '货品提成列表选项',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT='分部表';

-- ----------------------------
-- Table structure for uct_branch_related_down
-- ----------------------------
DROP TABLE IF EXISTS `uct_branch_related_down`;
CREATE TABLE `uct_branch_related_down` (
  `id` tinyint(4) NOT NULL AUTO_INCREMENT,
  `branch_id` int(11) NOT NULL DEFAULT '0' COMMENT '分部id',
  `customer_id` int(11) NOT NULL DEFAULT '0' COMMENT '下游客户ids',
  `prod_type` varchar(20) DEFAULT NULL COMMENT '加工类型',
  `prod_name` varchar(50) DEFAULT NULL COMMENT '加工企业名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COMMENT='下游客户加工类型表';

-- ----------------------------
-- Table structure for uct_cate
-- ----------------------------
DROP TABLE IF EXISTS `uct_cate`;
CREATE TABLE `uct_cate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `parent_id` int(10) NOT NULL DEFAULT '0' COMMENT '父级id',
  `pid` int(10) NOT NULL COMMENT '索引id',
  `top_class` varchar(20) DEFAULT NULL COMMENT '编码',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '品名',
  `image` varchar(100) DEFAULT NULL COMMENT '图片地址',
  `updatetime` int(10) DEFAULT NULL COMMENT '时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=51 DEFAULT CHARSET=utf8 COMMENT='品类名称表';

-- ----------------------------
-- Table structure for uct_cate_account
-- ----------------------------
DROP TABLE IF EXISTS `uct_cate_account`;
CREATE TABLE `uct_cate_account` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `account_id` varchar(50) DEFAULT NULL COMMENT '订单id',
  `branch_id` int(11) DEFAULT NULL COMMENT '分部id',
  `warehouse_id` int(11) DEFAULT NULL COMMENT '仓库id',
  `cate_id` int(11) DEFAULT NULL COMMENT '物料id',
  `admin_id` int(11) DEFAULT NULL COMMENT '操作人id',
  `before_account_num` float(20,2) NOT NULL DEFAULT '0.00' COMMENT '调账前库存值',
  `account_num` float(20,2) NOT NULL DEFAULT '0.00' COMMENT '调账数量',
  `today_stock` float(20,2) NOT NULL DEFAULT '0.00' COMMENT '今天出入库合计',
  `account_reason` text NOT NULL COMMENT '调账原因',
  `createtime` int(11) DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_category
-- ----------------------------
DROP TABLE IF EXISTS `uct_category`;
CREATE TABLE `uct_category` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `pid` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父ID',
  `type` varchar(30) NOT NULL DEFAULT '' COMMENT '栏目类型',
  `name` varchar(30) NOT NULL DEFAULT '',
  `nickname` varchar(50) NOT NULL DEFAULT '',
  `flag` set('hot','index','recommend') NOT NULL DEFAULT '',
  `image` varchar(100) NOT NULL DEFAULT '' COMMENT '图片',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT '关键字',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT '描述',
  `diyname` varchar(30) NOT NULL DEFAULT '' COMMENT '自定义名称',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `weigh` (`weigh`,`id`) USING BTREE,
  KEY `pid` (`pid`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COMMENT='分类表';

-- ----------------------------
-- Table structure for uct_centre_storage
-- ----------------------------
DROP TABLE IF EXISTS `uct_centre_storage`;
CREATE TABLE `uct_centre_storage` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `branch_id` int(11) NOT NULL COMMENT '分部id',
  `centre_branch_id` int(11) NOT NULL COMMENT '中央分部',
  `centre_warehouse_id` int(11) NOT NULL COMMENT '中央仓库',
  `warehouse_unit_cost` float NOT NULL COMMENT '仓储成本单价',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_client_banner
-- ----------------------------
DROP TABLE IF EXISTS `uct_client_banner`;
CREATE TABLE `uct_client_banner` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT '名称',
  `describe` text COMMENT '描述',
  `img` varchar(255) DEFAULT '' COMMENT '图片',
  `type` varchar(50) NOT NULL DEFAULT 'home_page' COMMENT 'home_page为首页 profile_page 个人页',
  `skip` int(11) NOT NULL DEFAULT '0' COMMENT '跳转id',
  `priority` int(11) NOT NULL DEFAULT '0' COMMENT '优先度',
  `status` varchar(50) NOT NULL DEFAULT 'normal' COMMENT '状态  normal-正常 hidden-隐藏',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_client_feedback
-- ----------------------------
DROP TABLE IF EXISTS `uct_client_feedback`;
CREATE TABLE `uct_client_feedback` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_id` int(11) NOT NULL DEFAULT '0' COMMENT '用户id',
  `theme` tinyint(4) NOT NULL DEFAULT '1' COMMENT '主题 1质量  2价格  3服务',
  `remove_fast_star` tinyint(4) NOT NULL DEFAULT '0' COMMENT '清运及时度',
  `remove_level_star` tinyint(4) NOT NULL DEFAULT '0' COMMENT '清运效果',
  `service_attitude_star` tinyint(4) NOT NULL DEFAULT '0' COMMENT '服务态度',
  `content` varchar(500) NOT NULL DEFAULT '' COMMENT '留言',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_client_rule
-- ----------------------------
DROP TABLE IF EXISTS `uct_client_rule`;
CREATE TABLE `uct_client_rule` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) NOT NULL DEFAULT '0' COMMENT '父级id',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '名称',
  `path` varchar(200) NOT NULL COMMENT '路径',
  `icon` varchar(255) NOT NULL DEFAULT '' COMMENT '图片路径',
  `weigh` int(11) NOT NULL DEFAULT '0' COMMENT '权重',
  `message` varchar(30) NOT NULL DEFAULT '' COMMENT '消息类型',
  `status` varchar(30) NOT NULL DEFAULT 'normal' COMMENT 'normal 正常 hidden 隐藏',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_common_cate
-- ----------------------------
DROP TABLE IF EXISTS `uct_common_cate`;
CREATE TABLE `uct_common_cate` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `branch_id` int(11) DEFAULT NULL COMMENT '分部id',
  `cate_id` int(11) DEFAULT NULL COMMENT '品名id',
  `cate_name` varchar(50) DEFAULT NULL COMMENT '品名-名称',
  `src_type` tinyint(4) DEFAULT NULL COMMENT '数据源type(0=PUR,1=SOR,2=SEL,3=others)',
  `weight` int(11) DEFAULT NULL COMMENT '重量',
  `frequency` int(11) DEFAULT NULL COMMENT '频率',
  `date_unix` int(11) DEFAULT NULL COMMENT '时间标识',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1253 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_config
-- ----------------------------
DROP TABLE IF EXISTS `uct_config`;
CREATE TABLE `uct_config` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL DEFAULT '' COMMENT '变量名',
  `group` varchar(30) NOT NULL DEFAULT '' COMMENT '分组',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '变量标题',
  `tip` varchar(100) NOT NULL DEFAULT '' COMMENT '变量描述',
  `type` varchar(30) NOT NULL DEFAULT '' COMMENT '类型:string,text,int,bool,array,datetime,date,file',
  `value` text NOT NULL COMMENT '变量值',
  `content` text NOT NULL COMMENT '变量字典数据',
  `rule` varchar(100) NOT NULL DEFAULT '' COMMENT '验证规则',
  `extend` varchar(255) NOT NULL DEFAULT '' COMMENT '扩展属性',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `name` (`name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COMMENT='系统配置';

-- ----------------------------
-- Table structure for uct_crm_erp_map
-- ----------------------------
DROP TABLE IF EXISTS `uct_crm_erp_map`;
CREATE TABLE `uct_crm_erp_map` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `crm` varchar(10) NOT NULL DEFAULT 'ec' COMMENT '系统名称',
  `type` varchar(5) NOT NULL DEFAULT 'up' COMMENT '客户类型',
  `field_map` text NOT NULL,
  `crm_to_erp` text NOT NULL,
  `erp_to_crm` text NOT NULL,
  `field_map_link` text NOT NULL,
  `crm_to_erp_link` text NOT NULL,
  `erp_to_crm_link` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_crontab
-- ----------------------------
DROP TABLE IF EXISTS `uct_crontab`;
CREATE TABLE `uct_crontab` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `type` varchar(10) NOT NULL DEFAULT '' COMMENT '事件类型',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '事件标题',
  `content` text NOT NULL COMMENT '事件内容',
  `schedule` varchar(100) NOT NULL DEFAULT '' COMMENT 'Crontab格式',
  `sleep` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '延迟秒数执行',
  `maximums` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大执行次数 0为不限',
  `executes` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '已经执行的次数',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `begintime` int(10) NOT NULL DEFAULT '0' COMMENT '开始时间',
  `endtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '结束时间',
  `executetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最后执行时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `status` enum('completed','expired','hidden','normal') NOT NULL DEFAULT 'normal' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='定时任务表';

-- ----------------------------
-- Table structure for uct_customer_account
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_account`;
CREATE TABLE `uct_customer_account` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `rela_voucher_id` int(11) NOT NULL DEFAULT '0' COMMENT '凭证id',
  `rela_voucher_no` varchar(50) NOT NULL DEFAULT '' COMMENT '关联审批单号',
  `order_id` int(11) NOT NULL DEFAULT '0' COMMENT '订单id',
  `no` varchar(50) NOT NULL COMMENT '受理单号',
  `audit_id` varchar(50) NOT NULL DEFAULT '' COMMENT '钉钉审核订单号',
  `task_id` varchar(50) NOT NULL DEFAULT '' COMMENT '钉钉任务id',
  `cus_id` int(11) NOT NULL COMMENT '客户id',
  `cus_type` varchar(10) NOT NULL DEFAULT '' COMMENT '客户类型',
  `branch_id` int(11) NOT NULL DEFAULT '0' COMMENT '分部id',
  `branch_text` varchar(50) NOT NULL DEFAULT '' COMMENT '分部名',
  `use` varchar(50) NOT NULL COMMENT '用途  保证金收款pledge_in   保证金退款pledge_out   定金收款deposit_in   定金退款deposit_out   收付款抵扣deposit_ded    现结cash    订单金额order_amount',
  `amount` double NOT NULL DEFAULT '0' COMMENT '金额',
  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '0待审核 1审核通过 2拒绝',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=435 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_customer_allot_history
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_allot_history`;
CREATE TABLE `uct_customer_allot_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `customer_id` int(11) NOT NULL,
  `before_admin_id` int(11) NOT NULL,
  `admin_id` int(11) NOT NULL,
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=161 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_customer_annual_data
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_annual_data`;
CREATE TABLE `uct_customer_annual_data` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `year` int(4) NOT NULL,
  `version` varchar(20) NOT NULL,
  `customer_id` int(11) NOT NULL,
  `data` json NOT NULL,
  `is_checkout` tinyint(4) NOT NULL DEFAULT '0',
  `share_times` tinyint(4) NOT NULL DEFAULT '0',
  `status` enum('enabled','disabled','unfollow') NOT NULL,
  `create time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `customer_id` (`customer_id`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_customer_behave_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_behave_log`;
CREATE TABLE `uct_customer_behave_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `customer_id` int(11) DEFAULT NULL COMMENT '客户ID',
  `admin_id` int(11) DEFAULT NULL COMMENT '用户ID',
  `behave_type` varchar(50) DEFAULT NULL COMMENT '行为类型',
  `detail` varchar(100) DEFAULT NULL COMMENT '行为说明',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=425 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_customer_materiel
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_materiel`;
CREATE TABLE `uct_customer_materiel` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `purchase_id` int(11) NOT NULL COMMENT '订单id',
  `purchase_incharge` int(11) NOT NULL COMMENT '采购负责人id',
  `seller_id` int(11) NOT NULL COMMENT '客户存放人id',
  `materiel_id` int(11) NOT NULL COMMENT '辅材id',
  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '辅材名称',
  `storage_amount` int(11) NOT NULL COMMENT '存放辅材',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=267 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_customer_question
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_question`;
CREATE TABLE `uct_customer_question` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_id` int(11) NOT NULL DEFAULT '0' COMMENT 'admin_id',
  `branch_id` int(11) NOT NULL DEFAULT '0' COMMENT '分部id',
  `company_name` varchar(255) NOT NULL DEFAULT '' COMMENT '公司名',
  `phone` varchar(20) NOT NULL DEFAULT '' COMMENT '联系方式',
  `liasion` varchar(30) NOT NULL DEFAULT '' COMMENT '联系人',
  `location_name` varchar(30) NOT NULL DEFAULT '' COMMENT '位置名称',
  `position` varchar(255) NOT NULL DEFAULT '' COMMENT '定位坐标点',
  `createtime` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(11) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_customer_question_grade
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_question_grade`;
CREATE TABLE `uct_customer_question_grade` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question_id` int(11) DEFAULT NULL COMMENT '问券id',
  `item1` float(3,2) NOT NULL DEFAULT '0.00' COMMENT '清运服务',
  `item2` float(3,2) NOT NULL DEFAULT '0.00' COMMENT '服务态度',
  `item3` float(3,2) NOT NULL DEFAULT '0.00' COMMENT '结算',
  `item4` float(3,2) NOT NULL DEFAULT '0.00' COMMENT '处置与报告',
  `item5` float(3,2) NOT NULL DEFAULT '0.00' COMMENT '沟通与投诉',
  `item6` float(3,2) NOT NULL DEFAULT '0.00' COMMENT '服务点员工',
  `item7` float(3,2) NOT NULL DEFAULT '0.00' COMMENT '其它',
  `csi` float(4,2) NOT NULL DEFAULT '0.00' COMMENT 'csi评分',
  `createtime` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(11) NOT NULL DEFAULT '0' COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_customer_question_item
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_question_item`;
CREATE TABLE `uct_customer_question_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question_id` int(11) DEFAULT NULL COMMENT '关联的问券表id',
  `shipment_ask` tinyint(4) NOT NULL DEFAULT '0' COMMENT '清运要求',
  `shipment_answer` tinyint(4) NOT NULL DEFAULT '0' COMMENT '应急清运响应',
  `staff_cooperate` tinyint(4) NOT NULL DEFAULT '0' COMMENT '现场员工协作',
  `civilized_operation` tinyint(4) NOT NULL DEFAULT '0' COMMENT '文明作业',
  `customer_stipulate` tinyint(4) NOT NULL DEFAULT '0' COMMENT '遵守客户方规定',
  `now_settle` tinyint(4) NOT NULL DEFAULT '0' COMMENT '目前的结算方式',
  `settle_accuracy` tinyint(4) NOT NULL DEFAULT '0' COMMENT '结算方式准确性',
  `handle_rationality` tinyint(4) NOT NULL DEFAULT '0' COMMENT '废料处置合理性',
  `receipts_timeliness` tinyint(4) NOT NULL DEFAULT '0' COMMENT '转移单据开具的及时性',
  `report_accuracy` tinyint(4) NOT NULL DEFAULT '0' COMMENT '处置情况报告准确性',
  `communicate_smooth` tinyint(4) NOT NULL DEFAULT '0' COMMENT '双方沟通渠道的畅顺性',
  `complaint_timeliness` tinyint(4) NOT NULL DEFAULT '0' COMMENT '对投诉回应的及时性',
  `verify_track` tinyint(4) NOT NULL DEFAULT '0' COMMENT '对处理的验证跟踪',
  `regular_visits` tinyint(4) NOT NULL DEFAULT '0' COMMENT '定期走访',
  `report_to_duty` tinyint(4) NOT NULL DEFAULT '0' COMMENT '员工到岗',
  `working_attitude` tinyint(4) NOT NULL DEFAULT '0' COMMENT '工作态度',
  `packaging_work` tinyint(4) NOT NULL DEFAULT '0' COMMENT '包装工作',
  `shipshape` tinyint(4) NOT NULL DEFAULT '0' COMMENT '整洁情况',
  `qualifications_update` tinyint(4) NOT NULL DEFAULT '0' COMMENT '资质的及时更新',
  `assess_support` tinyint(4) NOT NULL DEFAULT '0' COMMENT '对相关方评审的支持',
  `emergency_container` tinyint(4) NOT NULL DEFAULT '0' COMMENT '应急容器的提供',
  `environmental_consultation` tinyint(4) NOT NULL DEFAULT '0' COMMENT '环保咨询',
  `extend_service` text COMMENT '延伸服务',
  `propose` text COMMENT '建议',
  `createtime` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_customer_report
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_report`;
CREATE TABLE `uct_customer_report` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cus_id` int(11) NOT NULL COMMENT '客户id',
  `cus_name` varchar(50) NOT NULL DEFAULT '' COMMENT '客户名称',
  `time_label` varchar(50) NOT NULL COMMENT '时间',
  `time_dim` varchar(10) NOT NULL COMMENT '时间类型: Y-年，M-月，D-日，Q-季度，W-星期',
  `begin_time` int(10) DEFAULT NULL COMMENT '开始时间',
  `end_time` int(10) DEFAULT NULL COMMENT '结束时间',
  `group1` varchar(50) DEFAULT NULL COMMENT '类型1',
  `cate_name1` varchar(100) DEFAULT NULL COMMENT '物料名称1',
  `group2` varchar(50) DEFAULT NULL COMMENT '类型2',
  `cate_name2` varchar(100) NOT NULL COMMENT '物料名称2',
  `item_no` int(10) DEFAULT '0' COMMENT '排序',
  `value1` varchar(30) NOT NULL DEFAULT '0.00' COMMENT '值1',
  `unit1` varchar(10) DEFAULT '' COMMENT '单位1',
  `value2` varchar(30) DEFAULT '0.0' COMMENT '值2',
  `unit2` varchar(10) DEFAULT '0' COMMENT '单位2',
  `value3` varchar(30) DEFAULT NULL COMMENT '值3',
  `unit3` varchar(10) DEFAULT NULL COMMENT '单位3',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2022 DEFAULT CHARSET=utf8 COMMENT='月数据报表';

-- ----------------------------
-- Table structure for uct_customer_report_memo
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_report_memo`;
CREATE TABLE `uct_customer_report_memo` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `cus_id` int(10) NOT NULL COMMENT '客户id',
  `cus_name` varchar(50) NOT NULL COMMENT '客户名称',
  `time_label` varchar(50) NOT NULL COMMENT '时间',
  `time_dim` varchar(10) NOT NULL COMMENT '时间类型: Y-年，M-月，D-日，Q-季度，W-星期',
  `begin_time` int(10) DEFAULT NULL COMMENT '开始时间',
  `end_time` int(10) DEFAULT NULL COMMENT '结束时间',
  `group1` varchar(100) NOT NULL COMMENT '类型1',
  `group2` varchar(100) NOT NULL COMMENT '类型2',
  `cate_name2` varchar(100) NOT NULL COMMENT '项名称2',
  `item_no` int(10) NOT NULL COMMENT '排序',
  `value1` varchar(800) NOT NULL COMMENT '描述',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=266 DEFAULT CHARSET=utf8 COMMENT='月数据报表的描述表';

-- ----------------------------
-- Table structure for uct_customer_servInfo
-- ----------------------------
DROP TABLE IF EXISTS `uct_customer_servInfo`;
CREATE TABLE `uct_customer_servInfo` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_id` int(11) NOT NULL COMMENT '用户ID',
  `name_cn` varchar(20) NOT NULL COMMENT '中文名',
  `name_en` varchar(50) NOT NULL COMMENT '英文名',
  `position_cn` varchar(20) NOT NULL COMMENT '中文职位',
  `position_en` varchar(50) NOT NULL COMMENT '英文职位',
  `introduce_cn` varchar(100) NOT NULL COMMENT '中文介绍',
  `introduce_en` varchar(200) NOT NULL COMMENT '英文介绍',
  `img` text NOT NULL COMMENT '职业头像url',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COMMENT='年度报告人员关联表';

-- ----------------------------
-- Table structure for uct_day_wall_report
-- ----------------------------
DROP TABLE IF EXISTS `uct_day_wall_report`;
CREATE TABLE `uct_day_wall_report` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `adcode` int(11) NOT NULL DEFAULT '0' COMMENT '区域行政编码 省 市 区',
  `weight` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '采购重量',
  `availability` decimal(5,2) NOT NULL DEFAULT '0.00' COMMENT '可利用率',
  `rubbish` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '低值废弃物产生量',
  `rdf` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT 'rdf排放量',
  `carbon` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '碳排放量',
  `box` int(11) NOT NULL DEFAULT '0' COMMENT '分类箱',
  `customer_num` int(11) NOT NULL DEFAULT '0' COMMENT '服务客户数量',
  `report_date` date DEFAULT NULL COMMENT '日期',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `key1` (`adcode`,`report_date`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2638452 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_dictionaries
-- ----------------------------
DROP TABLE IF EXISTS `uct_dictionaries`;
CREATE TABLE `uct_dictionaries` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `group` varchar(50) NOT NULL COMMENT '组',
  `code` varchar(50) NOT NULL DEFAULT '' COMMENT '代号',
  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '名称',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8 COMMENT='数据字典';

-- ----------------------------
-- Table structure for uct_ec_trajectory
-- ----------------------------
DROP TABLE IF EXISTS `uct_ec_trajectory`;
CREATE TABLE `uct_ec_trajectory` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `customer_id` int(11) DEFAULT NULL COMMENT '客户id',
  `user_nickname` varchar(30) NOT NULL DEFAULT '' COMMENT '操作人id',
  `trajectory_code` int(11) DEFAULT NULL COMMENT '轨迹类型',
  `content` text COMMENT '内容',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15799 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_ec_trajectory_code
-- ----------------------------
DROP TABLE IF EXISTS `uct_ec_trajectory_code`;
CREATE TABLE `uct_ec_trajectory_code` (
  `code` int(11) NOT NULL COMMENT 'ec代码',
  `p_code` int(11) NOT NULL DEFAULT '0' COMMENT '父代码',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '轨迹类型',
  PRIMARY KEY (`code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='ec轨迹';

-- ----------------------------
-- Table structure for uct_economic_circle
-- ----------------------------
DROP TABLE IF EXISTS `uct_economic_circle`;
CREATE TABLE `uct_economic_circle` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT NULL COMMENT '经济圈的名称',
  `state` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否使用： 0--不使用  1--使用',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COMMENT='经济圈板块';

-- ----------------------------
-- Table structure for uct_economic_circle_branch
-- ----------------------------
DROP TABLE IF EXISTS `uct_economic_circle_branch`;
CREATE TABLE `uct_economic_circle_branch` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `cire_id` int(10) DEFAULT NULL COMMENT '经济板块表的ID',
  `branch_id` int(11) DEFAULT NULL COMMENT '分部id',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COMMENT='经济圈板块对应的分部';

-- ----------------------------
-- Table structure for uct_erp_tool
-- ----------------------------
DROP TABLE IF EXISTS `uct_erp_tool`;
CREATE TABLE `uct_erp_tool` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(50) NOT NULL COMMENT '工具类型',
  `text` varchar(255) NOT NULL COMMENT '工具名称',
  `value` varchar(255) NOT NULL,
  `status` tinyint(1) NOT NULL COMMENT '状态',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_erp_tool_group
-- ----------------------------
DROP TABLE IF EXISTS `uct_erp_tool_group`;
CREATE TABLE `uct_erp_tool_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增id',
  `type` varchar(50) NOT NULL COMMENT '工具类型',
  `group_id` int(11) NOT NULL COMMENT '角色id',
  `rules` varchar(255) NOT NULL COMMENT '权限id集',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_feedback
-- ----------------------------
DROP TABLE IF EXISTS `uct_feedback`;
CREATE TABLE `uct_feedback` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `conf_id` int(10) NOT NULL COMMENT '反馈类型ID',
  `feedback_content` varchar(255) NOT NULL COMMENT '反馈详情',
  `feedback_tel` char(12) DEFAULT NULL COMMENT '手机号',
  `create_time` int(10) NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COMMENT='反馈内容记录表';

-- ----------------------------
-- Table structure for uct_feedback_conf
-- ----------------------------
DROP TABLE IF EXISTS `uct_feedback_conf`;
CREATE TABLE `uct_feedback_conf` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `conf_name` varchar(30) NOT NULL COMMENT '配置字段',
  `create_time` int(10) NOT NULL COMMENT '生成时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='反馈类型配置表';

-- ----------------------------
-- Table structure for uct_finance_account
-- ----------------------------
DROP TABLE IF EXISTS `uct_finance_account`;
CREATE TABLE `uct_finance_account` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `way` varchar(20) NOT NULL,
  `name` varchar(200) NOT NULL COMMENT '户名',
  `account` varchar(50) NOT NULL COMMENT '账号',
  `bank_name` varchar(200) NOT NULL DEFAULT '' COMMENT '开户名',
  `title` varchar(200) NOT NULL DEFAULT '' COMMENT '拼接字符串',
  `state` varchar(200) NOT NULL DEFAULT 'normal' COMMENT 'normal 正常 hidden 隐藏',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_finance_applet
-- ----------------------------
DROP TABLE IF EXISTS `uct_finance_applet`;
CREATE TABLE `uct_finance_applet` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `name` varchar(200) DEFAULT '' COMMENT '应用名称',
  `appid` varchar(200) DEFAULT '' COMMENT '应用id',
  `appsecret` varchar(200) DEFAULT '' COMMENT '应用密钥',
  `referer_list` varchar(200) NOT NULL DEFAULT '' COMMENT '来源列表',
  `access_token` varchar(200) NOT NULL DEFAULT '' COMMENT '令牌',
  `expires_time` int(11) NOT NULL DEFAULT '0' COMMENT '令牌过期时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_fzt_application
-- ----------------------------
DROP TABLE IF EXISTS `uct_fzt_application`;
CREATE TABLE `uct_fzt_application` (
  `cus_id` int(11) NOT NULL DEFAULT '0',
  `appid` char(32) NOT NULL DEFAULT '',
  `secret` char(32) NOT NULL DEFAULT '',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_fzt_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_fzt_log`;
CREATE TABLE `uct_fzt_log` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `order_id` bigint(20) NOT NULL COMMENT '绿环订单id',
  `fzt_id` bigint(20) NOT NULL COMMENT '废纸通id',
  `type` tinyint(4) NOT NULL DEFAULT '0' COMMENT '0完善订单 1单次录入 2完成录入 3修改录入',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_fzt_order
-- ----------------------------
DROP TABLE IF EXISTS `uct_fzt_order`;
CREATE TABLE `uct_fzt_order` (
  `order_id` bigint(20) NOT NULL COMMENT '绿环id',
  `fzt_id` bigint(20) NOT NULL COMMENT '废纸通id',
  `sort_state` tinyint(4) NOT NULL DEFAULT '0' COMMENT '分拣状态',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1一口价结算 2分拣后结算',
  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '关联时间',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_fzt_sort
-- ----------------------------
DROP TABLE IF EXISTS `uct_fzt_sort`;
CREATE TABLE `uct_fzt_sort` (
  `id` bigint(20) NOT NULL,
  `order_id` bigint(20) NOT NULL COMMENT '绿环订单id',
  `fzt_id` bigint(20) NOT NULL COMMENT '废纸通id',
  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '货品名称',
  `total_weight` double NOT NULL DEFAULT '0' COMMENT '总重',
  `tare_weight` double NOT NULL DEFAULT '0' COMMENT '皮重',
  `net_weight` double NOT NULL DEFAULT '0' COMMENT '净重',
  `price` double NOT NULL DEFAULT '0' COMMENT '单价',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_hazardous_waste_admin
-- ----------------------------
DROP TABLE IF EXISTS `uct_hazardous_waste_admin`;
CREATE TABLE `uct_hazardous_waste_admin` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `apt_id` varchar(50) NOT NULL DEFAULT '' COMMENT '预约号',
  `page_code` varchar(20) NOT NULL COMMENT '页面code',
  `page_name` varchar(30) NOT NULL COMMENT '页面名称',
  `cus_nickname` varchar(30) NOT NULL COMMENT '用户呢称',
  `cus_tel` varchar(11) NOT NULL COMMENT '用户手机号',
  `customer_id` int(11) DEFAULT NULL COMMENT '客户id',
  `state` varchar(50) DEFAULT NULL COMMENT '状态',
  `company_name` varchar(100) DEFAULT '' COMMENT '公司名称',
  `company_contact` varchar(50) DEFAULT '' COMMENT '公司联系人',
  `company_address` varchar(500) DEFAULT '' COMMENT '公司地址',
  `deal_time` datetime DEFAULT NULL COMMENT '预约处理时间',
  `img_address` varchar(500) DEFAULT NULL COMMENT '预约时候的图片',
  `apt_type` tinyint(1) DEFAULT '0' COMMENT '预约状态：0--初始状态  1--预约中  2--已确认  3--已取消',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '确认预约时间',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=159 DEFAULT CHARSET=utf8 COMMENT='危费六个页面的登录人员信息';

-- ----------------------------
-- Table structure for uct_hazardous_waste_admin_detail
-- ----------------------------
DROP TABLE IF EXISTS `uct_hazardous_waste_admin_detail`;
CREATE TABLE `uct_hazardous_waste_admin_detail` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(10) NOT NULL COMMENT '主表的id',
  `sub_type` varchar(20) NOT NULL DEFAULT '' COMMENT '预约的方式(gfcz--固废处置 wfpp--危废匹配  hjpg--环境评估)',
  `sub_name` varchar(50) NOT NULL DEFAULT '' COMMENT '预约物料名称',
  `sub_num` int(10) NOT NULL COMMENT '预约的数量（单位吨）',
  `sub_unit` varchar(50) NOT NULL DEFAULT '' COMMENT '预约的的打包方式（框/桶）',
  `is_use` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否使用：0--不使用  1--使用',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '预约的时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8 COMMENT='新环保管家的固废、危废预约的详情';

-- ----------------------------
-- Table structure for uct_hazardous_waste_disposal
-- ----------------------------
DROP TABLE IF EXISTS `uct_hazardous_waste_disposal`;
CREATE TABLE `uct_hazardous_waste_disposal` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cus_name` varchar(50) NOT NULL DEFAULT '' COMMENT '企业的全称',
  `goods_address` varchar(150) NOT NULL DEFAULT '' COMMENT '危废出货点的详细地址',
  `position` varchar(150) DEFAULT NULL COMMENT '位置（经纬度）',
  `goods_memo` varchar(255) DEFAULT '' COMMENT '危废明细',
  `expect_time` tinyint(1) DEFAULT NULL COMMENT '预期危废出货时间: 1-一周内 2-二周内 3-三周内 4-四周内',
  `goods_img` varchar(255) DEFAULT '' COMMENT '图片',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COMMENT='危废匹配（引导客户页面）';

-- ----------------------------
-- Table structure for uct_hazardous_waste_env
-- ----------------------------
DROP TABLE IF EXISTS `uct_hazardous_waste_env`;
CREATE TABLE `uct_hazardous_waste_env` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `env_type` varchar(30) DEFAULT '' COMMENT '环境类型：1-环保方案编制(环评. 应急预案. 管理计划等)\r\n2-危险废弃物签约(机油. 活性炭. 乳化液等)\r\n3-环保工程治理(废水. 废气. 噪声. 土壤修复等)\r\n4-排放检测验收(竣工验收. 水气检测. 在线监测等)',
  `env_memo` varchar(255) DEFAULT '' COMMENT '环境详细信息',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8 COMMENT='环境评估（引导客户页面）';

-- ----------------------------
-- Table structure for uct_huke
-- ----------------------------
DROP TABLE IF EXISTS `uct_huke`;
CREATE TABLE `uct_huke` (
  `name` varchar(100) NOT NULL DEFAULT '',
  `type` varchar(100) NOT NULL DEFAULT 'up',
  `crm_type` varchar(100) NOT NULL DEFAULT 'huke',
  `appkey` varchar(100) NOT NULL DEFAULT '',
  `appsecret` varchar(100) NOT NULL DEFAULT '',
  `cid` varchar(100) NOT NULL DEFAULT '',
  `status` varchar(100) NOT NULL DEFAULT 'enable' COMMENT 'enable 启用  disable 禁用'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_inventory_reconciliation
-- ----------------------------
DROP TABLE IF EXISTS `uct_inventory_reconciliation`;
CREATE TABLE `uct_inventory_reconciliation` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `admin_id` int(10) DEFAULT NULL COMMENT '调账申请人id',
  `nickname` varchar(50) DEFAULT NULL COMMENT '申请人',
  `userid` varchar(25) DEFAULT NULL COMMENT '钉钉id',
  `branch_id` int(11) DEFAULT NULL COMMENT '仓库id',
  `branch_name` varchar(50) DEFAULT NULL COMMENT '仓库名称',
  `audit_id` varchar(100) DEFAULT NULL COMMENT '审批内码',
  `processCode` varchar(50) DEFAULT NULL COMMENT '审批的单号',
  `remark` varchar(200) DEFAULT NULL COMMENT '备注',
  `exam_status` varchar(10) DEFAULT 'draft' COMMENT '"draft" -- "草稿","submit" -- "审批中","pass" -- "审批通过","reject" -- "审批拒绝","cancel" -- "删除"',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 COMMENT='库存调账的主表';

-- ----------------------------
-- Table structure for uct_inventory_reconciliation_detail
-- ----------------------------
DROP TABLE IF EXISTS `uct_inventory_reconciliation_detail`;
CREATE TABLE `uct_inventory_reconciliation_detail` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(11) DEFAULT NULL COMMENT '主表ID',
  `cate_id` int(11) DEFAULT NULL COMMENT '品类id',
  `cate_name` varchar(50) DEFAULT NULL COMMENT '品类名称',
  `ori_stock` decimal(10,2) DEFAULT NULL COMMENT '原来的库存重量',
  `cur_stock` decimal(10,2) DEFAULT NULL COMMENT '现在的库存重量',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4 COMMENT='库存调账的详情表';

-- ----------------------------
-- Table structure for uct_jobs_plan
-- ----------------------------
DROP TABLE IF EXISTS `uct_jobs_plan`;
CREATE TABLE `uct_jobs_plan` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `branch_id` int(10) NOT NULL DEFAULT '0' COMMENT '分部id',
  `sortage_id` varchar(100) DEFAULT '' COMMENT '仓库',
  `line_id` varchar(20) DEFAULT '' COMMENT '线体',
  `plan_type` varchar(50) NOT NULL DEFAULT '' COMMENT '计划状态：weight - 过磅 /  sorting - 分拣 / packing - 包装',
  `plan_begin_time` datetime(6) DEFAULT NULL COMMENT '预估开始时间',
  `plan_end_time` datetime(6) DEFAULT NULL COMMENT '预估结束时间',
  `plan_work_time` decimal(10,1) DEFAULT NULL COMMENT '预估分拣时间(小时)',
  `relation_order_id` int(11) DEFAULT NULL COMMENT '关联订单id',
  `relation_order_num` varchar(50) DEFAULT '' COMMENT '关联订单号',
  `real_begin_time` datetime(6) DEFAULT NULL COMMENT '实际开始时间',
  `real_end_time` datetime(6) DEFAULT NULL COMMENT '实际结束时间',
  `real_use_time` decimal(10,1) DEFAULT '0.0' COMMENT '实际分拣时间(小时)',
  `planner` int(10) NOT NULL COMMENT '计划人',
  `assign_to` int(255) DEFAULT NULL COMMENT '指派给一个人员',
  `status` varchar(50) DEFAULT 'plan' COMMENT '状态：plan - 计划, open - 开始, close - 结束',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='工作计划表';

-- ----------------------------
-- Table structure for uct_label
-- ----------------------------
DROP TABLE IF EXISTS `uct_label`;
CREATE TABLE `uct_label` (
  `label_sn` varchar(36) NOT NULL COMMENT '唯一辨识码',
  `lot_num` int(11) DEFAULT NULL COMMENT '批次号',
  `status` int(11) DEFAULT '0' COMMENT '0 - 未绑定， 1 - 已绑定',
  `order_no` varchar(32) DEFAULT NULL COMMENT '订单号',
  `category_id` int(11) DEFAULT NULL COMMENT '品类id',
  `category_type` varchar(20) DEFAULT NULL,
  `category_name` varchar(100) DEFAULT NULL COMMENT '品类名',
  `AW` int(11) DEFAULT '0' COMMENT '总重*100',
  `NW` int(11) DEFAULT '0' COMMENT '净重*100',
  `TW` int(11) DEFAULT '0' COMMENT '皮重*100',
  `weight_unit` varchar(10) DEFAULT 'kg' COMMENT '重量单位',
  `price` int(11) DEFAULT '0' COMMENT '成交价格*1000',
  `price_unit` varchar(10) DEFAULT '元' COMMENT '价格单位',
  `item_no` int(11) DEFAULT '0' COMMENT '批次内序列号',
  `position` varchar(100) DEFAULT NULL COMMENT '经纬度定位',
  `create_user` int(11) DEFAULT NULL COMMENT '创建人id',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_user` int(11) DEFAULT NULL COMMENT '更新人id',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`label_sn`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_label_lot
-- ----------------------------
DROP TABLE IF EXISTS `uct_label_lot`;
CREATE TABLE `uct_label_lot` (
  `num` int(11) NOT NULL AUTO_INCREMENT,
  `begin_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `end_time` timestamp NULL DEFAULT NULL,
  `create_user` int(11) DEFAULT NULL COMMENT '创建人id',
  PRIMARY KEY (`num`)
) ENGINE=InnoDB AUTO_INCREMENT=383 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_main_effective_table
-- ----------------------------
DROP TABLE IF EXISTS `uct_main_effective_table`;
CREATE TABLE `uct_main_effective_table` (
  `FBillNo` varchar(50) NOT NULL COMMENT '订单ID',
  `FCorrent` int(10) DEFAULT NULL,
  `FDate` datetime DEFAULT NULL COMMENT '日期',
  `create_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`FBillNo`) USING BTREE,
  KEY `idx_met_01` (`FBillNo`,`FCorrent`,`FDate`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='有效订单表（运营月度看板使用）';

-- ----------------------------
-- Table structure for uct_map
-- ----------------------------
DROP TABLE IF EXISTS `uct_map`;
CREATE TABLE `uct_map` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `admin_id` int(11) DEFAULT NULL COMMENT '用户id',
  `map_trail` text COMMENT '地图轨迹',
  `createtime` int(11) DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(11) DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='地图表';

-- ----------------------------
-- Table structure for uct_materiel
-- ----------------------------
DROP TABLE IF EXISTS `uct_materiel`;
CREATE TABLE `uct_materiel` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `branch_id` int(10) unsigned NOT NULL COMMENT '分部id',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT '辅材的品名',
  `number` int(11) NOT NULL DEFAULT '0' COMMENT '库存',
  `purchase_price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '采购价格',
  `inside_price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '内部销售价',
  `outside_price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '外部销售价',
  `remark` varchar(100) DEFAULT '' COMMENT '备注',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `state` enum('1','0') NOT NULL DEFAULT '1' COMMENT '状态:1=启用,0=禁用',
  `createtime` int(11) DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(11) DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1505 DEFAULT CHARSET=utf8 COMMENT='辅材管理表';

-- ----------------------------
-- Table structure for uct_materiel_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_materiel_log`;
CREATE TABLE `uct_materiel_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `admin_id` int(10) unsigned DEFAULT NULL COMMENT '管理员id',
  `materiel_id` int(10) unsigned NOT NULL COMMENT '辅材id',
  `entering_number` int(10) unsigned NOT NULL COMMENT '出入库数量',
  `number` int(11) NOT NULL COMMENT '现有库存',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `type` tinyint(3) unsigned NOT NULL DEFAULT '1' COMMENT '出库:0; 入库:1;',
  `ip` varchar(255) NOT NULL COMMENT 'ip',
  `createtime` int(11) NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1052 DEFAULT CHARSET=utf8 COMMENT='辅材出入库日志';

-- ----------------------------
-- Table structure for uct_modify_order_audit
-- ----------------------------
DROP TABLE IF EXISTS `uct_modify_order_audit`;
CREATE TABLE `uct_modify_order_audit` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` int(11) NOT NULL COMMENT '订单id',
  `dd_audit_id` varchar(100) DEFAULT NULL COMMENT '对应的钉钉审核id',
  `order_type` int(11) NOT NULL COMMENT '订单类型 0采购 1现买现卖 2销售 3送框',
  `tran_type` char(3) NOT NULL DEFAULT '' COMMENT '订单类型 PUR采购 SOR入库 SEL销售',
  `is_diff` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否金额差异 0否 1是',
  `admin_id` int(11) NOT NULL COMMENT '发起人',
  `field_list` text COMMENT '字段列表',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态  1待分部经理审核  2待运营经理审核  3待财务助理审核  4拒绝  5通过   ',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `createtime` (`createtime`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=273 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_modify_order_audit_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_modify_order_audit_log`;
CREATE TABLE `uct_modify_order_audit_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `audit_id` int(11) NOT NULL,
  `admin_id` int(11) NOT NULL,
  `operate` tinyint(4) NOT NULL DEFAULT '1' COMMENT '操作',
  `remark` varchar(200) NOT NULL DEFAULT '' COMMENT '留言',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=467 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_news_record
-- ----------------------------
DROP TABLE IF EXISTS `uct_news_record`;
CREATE TABLE `uct_news_record` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `new_title` varchar(200) NOT NULL COMMENT '标题',
  `new_time` date NOT NULL COMMENT '发文时间',
  `title_url` varchar(255) DEFAULT NULL COMMENT '标题图地址',
  `title_url_type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '图片的状态:1=正方形,2=长方形',
  `new_describe` varchar(800) NOT NULL COMMENT '描述',
  `new_url` varchar(255) DEFAULT NULL COMMENT '链接',
  `new_states` tinyint(1) NOT NULL DEFAULT '0' COMMENT '新闻状态:0=未发表,1=已发布',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否启用:1=启用,0=禁用',
  `create_time` int(10) NOT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8 COMMENT='新闻信息记录表';

-- ----------------------------
-- Table structure for uct_one_level_accumulate_wall_report
-- ----------------------------
DROP TABLE IF EXISTS `uct_one_level_accumulate_wall_report`;
CREATE TABLE `uct_one_level_accumulate_wall_report` (
  `adcode` int(11) NOT NULL DEFAULT '0' COMMENT '行政区域编码',
  `name` varchar(30) NOT NULL COMMENT '品类名称',
  `weight` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '采购重量',
  `carbon` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '碳排放量',
  PRIMARY KEY (`adcode`,`name`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='累计品类处置表';

-- ----------------------------
-- Table structure for uct_one_level_day_wall_report
-- ----------------------------
DROP TABLE IF EXISTS `uct_one_level_day_wall_report`;
CREATE TABLE `uct_one_level_day_wall_report` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `adcode` int(11) NOT NULL DEFAULT '0' COMMENT '行政编码',
  `name` varchar(30) DEFAULT '' COMMENT '一级品类名',
  `weight` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '采购重量',
  `carbon` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '碳排放',
  `report_date` date DEFAULT NULL COMMENT '报表日期',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `key1` (`adcode`,`report_date`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8 COMMENT='每日一级品类处置表';

-- ----------------------------
-- Table structure for uct_order_account
-- ----------------------------
DROP TABLE IF EXISTS `uct_order_account`;
CREATE TABLE `uct_order_account` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `branch_id` int(10) unsigned DEFAULT NULL COMMENT '分部id',
  `admin_id` int(10) unsigned DEFAULT NULL COMMENT '结账操作人',
  `pur_num` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '采购订单数量',
  `sel_num` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '销售订单数量',
  `account_year` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT '结账年份',
  `account_month` tinyint(4) unsigned NOT NULL DEFAULT '0' COMMENT '结账月份',
  `createtime` int(11) NOT NULL DEFAULT '0' COMMENT '结账时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `branch_id` (`branch_id`,`account_year`,`account_month`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=142 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_order_account_history
-- ----------------------------
DROP TABLE IF EXISTS `uct_order_account_history`;
CREATE TABLE `uct_order_account_history` (
  `order_id` int(11) NOT NULL COMMENT '订单id',
  `order_type` varchar(5) NOT NULL COMMENT '订单类型',
  `account_year` int(11) NOT NULL COMMENT '审核年份',
  `account_month` int(11) NOT NULL COMMENT '审核月份'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_order_bill
-- ----------------------------
DROP TABLE IF EXISTS `uct_order_bill`;
CREATE TABLE `uct_order_bill` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `order_id` int(11) NOT NULL COMMENT '订单id',
  `audit_id` varchar(100) DEFAULT NULL,
  `order_no` varchar(50) DEFAULT NULL COMMENT '订单号',
  `type` char(3) NOT NULL COMMENT '订单类型',
  `pay_way` varchar(20) DEFAULT 'bank' COMMENT '银行转账bank   微信支付wechat',
  `account` varchar(50) NOT NULL DEFAULT '' COMMENT '账号',
  `settle_type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1-现结，2-月结, 3-抵扣.4-现付+抵扣',
  `cash` double DEFAULT '0' COMMENT '现结金额',
  `amount` decimal(8,3) DEFAULT '0.000' COMMENT '结算金额',
  `url` varchar(2000) DEFAULT NULL COMMENT '水单图片',
  `bank_bill_url` varchar(2000) DEFAULT NULL COMMENT '银行流水',
  `audit_remark` varchar(255) NOT NULL DEFAULT '' COMMENT '财务系统审核备注',
  `upload_remark` varchar(255) NOT NULL DEFAULT '' COMMENT '上传水单备注',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `audittime` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '审核时间',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态  0拒绝 1审核中 2审核通过',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=653 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_order_cancel
-- ----------------------------
DROP TABLE IF EXISTS `uct_order_cancel`;
CREATE TABLE `uct_order_cancel` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` int(11) NOT NULL,
  `order_num` varchar(50) NOT NULL,
  `type` varchar(5) NOT NULL COMMENT '订单类型 PUR采购 SEL销售',
  `hand_mouth_data` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否现买现卖 ',
  `corrent` tinyint(4) NOT NULL DEFAULT '0' COMMENT '0未完成 1完成',
  `handle` tinyint(4) NOT NULL DEFAULT '0' COMMENT '0未处理 1已处理',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=190 DEFAULT CHARSET=utf8mb4 COMMENT='订单取消';

-- ----------------------------
-- Table structure for uct_page
-- ----------------------------
DROP TABLE IF EXISTS `uct_page`;
CREATE TABLE `uct_page` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `category_id` int(10) NOT NULL DEFAULT '0' COMMENT '分类ID',
  `title` varchar(50) NOT NULL DEFAULT '' COMMENT '标题',
  `keywords` varchar(255) NOT NULL DEFAULT '' COMMENT '关键字',
  `flag` set('hot','index','recommend') NOT NULL DEFAULT '' COMMENT '标志',
  `image` varchar(255) NOT NULL DEFAULT '' COMMENT '头像',
  `content` text NOT NULL COMMENT '内容',
  `icon` varchar(50) NOT NULL DEFAULT '' COMMENT '图标',
  `views` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '点击',
  `comments` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '评论',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='单页表';

-- ----------------------------
-- Table structure for uct_password_reset
-- ----------------------------
DROP TABLE IF EXISTS `uct_password_reset`;
CREATE TABLE `uct_password_reset` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(50) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=355 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_potential_customer
-- ----------------------------
DROP TABLE IF EXISTS `uct_potential_customer`;
CREATE TABLE `uct_potential_customer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL COMMENT '姓名',
  `mobile` varchar(15) DEFAULT NULL COMMENT '手机号',
  `company_name` varchar(100) NOT NULL DEFAULT '' COMMENT '公司名',
  `industry` varchar(100) NOT NULL DEFAULT '' COMMENT '所属行业',
  `scale` varchar(100) NOT NULL DEFAULT '0' COMMENT '公司规模',
  `city` varchar(100) NOT NULL DEFAULT '' COMMENT '城市',
  `type` varchar(100) NOT NULL DEFAULT '' COMMENT '废料类型',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_print_setting
-- ----------------------------
DROP TABLE IF EXISTS `uct_print_setting`;
CREATE TABLE `uct_print_setting` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `client_id` varchar(20) DEFAULT NULL COMMENT '应用ID',
  `client_secret` varchar(50) DEFAULT NULL COMMENT '应用密钥',
  `access_token` varchar(50) DEFAULT NULL COMMENT '访问令牌',
  `refresh_token` varchar(50) DEFAULT NULL COMMENT '更新令牌',
  `token_time` int(10) unsigned DEFAULT NULL COMMENT '令牌获取时间',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='打印配置表';

-- ----------------------------
-- Table structure for uct_purchase_overdue
-- ----------------------------
DROP TABLE IF EXISTS `uct_purchase_overdue`;
CREATE TABLE `uct_purchase_overdue` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_id` int(11) NOT NULL COMMENT '专员id',
  `order_id` int(11) NOT NULL COMMENT '订单id',
  `overdue_time` int(11) NOT NULL COMMENT '到期时间',
  `overdue_second` int(11) NOT NULL COMMENT '延期秒数',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=329 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_purchase_sign_in_out
-- ----------------------------
DROP TABLE IF EXISTS `uct_purchase_sign_in_out`;
CREATE TABLE `uct_purchase_sign_in_out` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `purchase_incharge` int(10) DEFAULT NULL COMMENT '操作员id',
  `purchase_id` int(10) DEFAULT NULL COMMENT '采购id',
  `sign_in_type` tinyint(1) DEFAULT '0' COMMENT '签到的状态：0-未签到   1-已签到',
  `img_in_url` varchar(255) DEFAULT '' COMMENT '签到图片的地址',
  `img_in_type` tinyint(1) DEFAULT '0' COMMENT '签到图片的状态： 0-现场拍摄 1-选择的图片',
  `position_in` varchar(100) DEFAULT '' COMMENT '签到的位置座标',
  `address_in` varchar(200) DEFAULT NULL COMMENT '签到的地址',
  `sign_in_time` int(10) DEFAULT NULL COMMENT '签到的时间',
  `sign_out_type` tinyint(1) DEFAULT '0' COMMENT '签退的状态：0-未签退   1-已签退',
  `img_out_url` varchar(255) DEFAULT '' COMMENT '签退图片的地址',
  `img_out_type` tinyint(1) DEFAULT '0' COMMENT '签退的图片的状态： 0-现场拍摄 1-选择的图片',
  `position_out` varchar(100) DEFAULT '' COMMENT '签退的位置座标',
  `address_out` varchar(200) DEFAULT NULL COMMENT '签退的地址',
  `sign_out_time` int(10) DEFAULT NULL COMMENT '签退的时间',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建的时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改的时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=311 DEFAULT CHARSET=utf8 COMMENT='操作员拉货签到和签退';

-- ----------------------------
-- Table structure for uct_quotation
-- ----------------------------
DROP TABLE IF EXISTS `uct_quotation`;
CREATE TABLE `uct_quotation` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(10) DEFAULT NULL COMMENT '样品表主表id',
  `wor_id` int(10) NOT NULL COMMENT '业务员id',
  `audit_code` varchar(18) NOT NULL COMMENT '审核code',
  `cus_id` int(10) NOT NULL COMMENT '客户ID',
  `first_wor_id` int(10) NOT NULL DEFAULT '0',
  `first_exa_time` int(10) NOT NULL DEFAULT '0' COMMENT '初审时间',
  `first_memo` varchar(100) DEFAULT '' COMMENT '初审备注',
  `last_wor_id` int(10) NOT NULL DEFAULT '0',
  `last_exa_time` int(10) NOT NULL DEFAULT '0' COMMENT '终审时间',
  `last_memo` varchar(100) NOT NULL DEFAULT '' COMMENT '终审备注',
  `exa_result` int(10) NOT NULL DEFAULT '1' COMMENT '审批结果: 1-待报价 2-待审核 3-初审通过 4-初审不通过 5-终审通过 6-终审不通过',
  `create_time` int(10) NOT NULL DEFAULT '0' COMMENT '生成时间',
  `change_time` int(10) NOT NULL COMMENT '修改的时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8 COMMENT='报价单主表';

-- ----------------------------
-- Table structure for uct_quotation_details
-- ----------------------------
DROP TABLE IF EXISTS `uct_quotation_details`;
CREATE TABLE `uct_quotation_details` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `quota_id` int(10) NOT NULL COMMENT '报价单ID',
  `material_id` int(10) NOT NULL COMMENT '物料ID',
  `img_url` varchar(800) NOT NULL COMMENT '图片地址',
  `pur_price` decimal(10,3) NOT NULL COMMENT '参考采购价',
  `create_time` int(10) NOT NULL COMMENT '生成时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=106 DEFAULT CHARSET=utf8 COMMENT='报价项目表';

-- ----------------------------
-- Table structure for uct_qywx_btn_event
-- ----------------------------
DROP TABLE IF EXISTS `uct_qywx_btn_event`;
CREATE TABLE `uct_qywx_btn_event` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `corpid` varchar(50) NOT NULL COMMENT '企业corpid',
  `btn_key` varchar(50) NOT NULL COMMENT '按钮key值',
  `from_user` varchar(100) NOT NULL COMMENT '来源',
  `event_type` varchar(30) CHARACTER SET utf8 DEFAULT 'taskcard_click' COMMENT '事件类型',
  `task_id` varchar(30) NOT NULL COMMENT '任务id',
  `agentId` int(10) NOT NULL COMMENT '企业应用的id',
  `msg_type` varchar(255) CHARACTER SET utf8 DEFAULT 'event' COMMENT '消息类型，此时固定为：event',
  `event_time` int(10) NOT NULL COMMENT '事件的时间',
  `status` int(1) DEFAULT '0' COMMENT '是否处理； 0-未处理   1-已处理',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COMMENT='企业微信的任务卡片消息的按钮点击事件的内容';

-- ----------------------------
-- Table structure for uct_recycling_data
-- ----------------------------
DROP TABLE IF EXISTS `uct_recycling_data`;
CREATE TABLE `uct_recycling_data` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `route_id` int(11) NOT NULL COMMENT '路线id',
  `station_id` int(11) NOT NULL COMMENT '站点id',
  `cate_id` int(10) DEFAULT '0' COMMENT '物料id',
  `cate_name` varchar(30) CHARACTER SET utf8 DEFAULT '0' COMMENT '物料名称',
  `serial_number` bigint(32) DEFAULT '0' COMMENT '流水号',
  `rfid` varchar(24) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL,
  `net_weight` decimal(10,3) DEFAULT '0.000' COMMENT '净重',
  `tare_weight` decimal(10,3) DEFAULT '0.000' COMMENT '皮重',
  `price` decimal(10,2) DEFAULT '0.00' COMMENT '单价',
  `sub_total` decimal(10,3) DEFAULT '0.000' COMMENT '小计',
  `status` tinyint(4) DEFAULT '1' COMMENT '是否有效： 1--正常   0--无效',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=391 DEFAULT CHARSET=utf8mb4 COMMENT='移动箱体项目的箱体称重数据表';

-- ----------------------------
-- Table structure for uct_recycling_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_recycling_log`;
CREATE TABLE `uct_recycling_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `log_type` varchar(30) NOT NULL COMMENT '类型:route-路线  station-站点  order-数据',
  `admin_id` int(11) NOT NULL COMMENT '操作员id',
  `title` varchar(255) DEFAULT NULL COMMENT '标题',
  `operation` varchar(255) DEFAULT NULL COMMENT '操作内容',
  `describe` varchar(255) DEFAULT NULL COMMENT '描述',
  `ip` varchar(50) DEFAULT NULL COMMENT '操作者ip',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建的时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1885 DEFAULT CHARSET=utf8mb4 COMMENT='移动收集箱体项目的路线和站点操作的日志表';

-- ----------------------------
-- Table structure for uct_recycling_routes
-- ----------------------------
DROP TABLE IF EXISTS `uct_recycling_routes`;
CREATE TABLE `uct_recycling_routes` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `route_code` varchar(50) NOT NULL COMMENT '路线code',
  `carriage_code` varchar(50) NOT NULL COMMENT '箱体code',
  `carriage_name` varchar(50) DEFAULT NULL COMMENT '箱体名称',
  `hw_sn` varchar(100) DEFAULT NULL COMMENT 'sn',
  `hw_ble_model_no` varchar(50) NOT NULL DEFAULT '' COMMENT '蓝牙名称',
  `hw_ble_mac_address` varchar(255) NOT NULL DEFAULT '' COMMENT '蓝牙地址',
  `purchase_incharge` int(10) NOT NULL COMMENT '采购负责人id',
  `purchase_name` varchar(50) DEFAULT NULL COMMENT '采购负责人姓名',
  `driver_id` int(10) NOT NULL COMMENT '司机的id',
  `driver_name` varchar(50) DEFAULT NULL COMMENT '司机的姓名',
  `plate_number` varchar(50) NOT NULL COMMENT '车牌号',
  `cate_id` int(11) DEFAULT NULL COMMENT '物料id',
  `cate_name` varchar(50) DEFAULT NULL COMMENT '物料名称',
  `branch_id` int(11) DEFAULT NULL COMMENT '分部id',
  `branch_name` varchar(255) CHARACTER SET utf8 DEFAULT '' COMMENT '分部名称',
  `weight` decimal(10,2) DEFAULT NULL COMMENT '采购重量',
  `capacity` decimal(10,2) DEFAULT NULL COMMENT '容量',
  `status` varchar(30) DEFAULT NULL COMMENT '状态:waiting-进行中 finish-完成',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建的时间',
  `input_flag` int(255) DEFAULT '0' COMMENT '手工输入标志',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=83 DEFAULT CHARSET=utf8mb4 COMMENT='移动收集箱体项目的路线表';

-- ----------------------------
-- Table structure for uct_recycling_server_account
-- ----------------------------
DROP TABLE IF EXISTS `uct_recycling_server_account`;
CREATE TABLE `uct_recycling_server_account` (
  `branch_id` int(11) DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `auto_commit_flag` varchar(255) DEFAULT 'PUR,SEL'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_recycling_station
-- ----------------------------
DROP TABLE IF EXISTS `uct_recycling_station`;
CREATE TABLE `uct_recycling_station` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `route_id` int(10) unsigned NOT NULL COMMENT '路线表id',
  `route_code` varchar(30) DEFAULT NULL COMMENT '路线code',
  `station_num` int(11) DEFAULT NULL COMMENT '站点的序号',
  `station_code` varchar(30) DEFAULT NULL COMMENT '站点的code',
  `station_name` varchar(30) DEFAULT NULL COMMENT '站点的名称',
  `station_type` varchar(20) DEFAULT 'PUR' COMMENT '站点的状态:PUR-采购  SEL-销售',
  `FInterID` int(10) DEFAULT '0' COMMENT '订单表的自增id',
  `order_id` varchar(30) DEFAULT '0' COMMENT '订单号',
  `order_type` varchar(50) DEFAULT '''0''' COMMENT '订单状态:''wait_pick_cargo''--待提货   ‘wait_storage_connect''--待入库  ''wait_confirm_return_fee''--已入库  ''wait_confirm_gather''--待销售   ''finish''--已销售',
  `customer_id` int(11) DEFAULT '0' COMMENT '客户id',
  `customer_name` varchar(255) DEFAULT '0' COMMENT '客户名称',
  `company_address` varchar(255) DEFAULT '' COMMENT '企业地址',
  `factory_id` int(10) DEFAULT '0' COMMENT '客户工厂id',
  `manager_id` int(10) DEFAULT '0' COMMENT '业务负责人ID',
  `manager_name` varchar(20) DEFAULT '' COMMENT '业务经理',
  `branch_id` int(11) DEFAULT '0' COMMENT '分部id',
  `branch_name` varchar(20) DEFAULT '0' COMMENT '分部名称',
  `price` decimal(10,3) DEFAULT '0.000' COMMENT '单价',
  `presell_price` decimal(10,3) DEFAULT '0.000' COMMENT '预提销售单价',
  `weight` decimal(10,2) DEFAULT '0.00' COMMENT '总重',
  `sales_weight` double(10,2) DEFAULT '0.00' COMMENT '销售总重',
  `capacity` decimal(10,2) DEFAULT '0.00' COMMENT '容量',
  `sales_total` decimal(10,3) DEFAULT '0.000' COMMENT '销售货款合计',
  `subs_total` decimal(10,3) DEFAULT '0.000' COMMENT '销售补助合计',
  `presell_total` decimal(10,3) DEFAULT '0.000' COMMENT '入库预提合计',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改的时间',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建的时间',
  `job_status` varchar(50) DEFAULT 'waiting' COMMENT '作业状态："waiting"--"等待","start"--"开始","finish"--"完成","abort"--"终止","print"--"打印"',
  `act_status` varchar(50) DEFAULT 'waiting' COMMENT '行动状态："waiting"--"等待","set-out"--"出发","arrived"--"到达","abort"--"终止","sticky-post"--"置顶"',
  `reason_code` varchar(50) DEFAULT NULL COMMENT '问题代码',
  `reason_text` varchar(100) DEFAULT NULL COMMENT '问题描述',
  `act_begin_time` timestamp NULL DEFAULT NULL COMMENT '出发时间',
  `act_end_time` timestamp NULL DEFAULT NULL COMMENT '到达和终止时间',
  `job_begin_time` timestamp NULL DEFAULT NULL COMMENT '作业开始时间',
  `job_end_time` timestamp NULL DEFAULT NULL COMMENT '作业结束时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=412 DEFAULT CHARSET=utf8mb4 COMMENT='移动收集箱体项目的站点表';

-- ----------------------------
-- Table structure for uct_red_point
-- ----------------------------
DROP TABLE IF EXISTS `uct_red_point`;
CREATE TABLE `uct_red_point` (
  `admin_id` int(11) NOT NULL AUTO_INCREMENT,
  `order_msg` int(11) NOT NULL DEFAULT '0' COMMENT '订单通知',
  `question_msg` int(11) NOT NULL DEFAULT '0' COMMENT '问卷通知',
  PRIMARY KEY (`admin_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_report_params
-- ----------------------------
DROP TABLE IF EXISTS `uct_report_params`;
CREATE TABLE `uct_report_params` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `role_ids` varchar(20) NOT NULL DEFAULT '' COMMENT '角色ids',
  `report_name` varchar(50) NOT NULL DEFAULT '' COMMENT '报表名称',
  `data_dims` varchar(20) NOT NULL DEFAULT '' COMMENT '参数粒度',
  `field_name` varchar(20) NOT NULL DEFAULT '' COMMENT '字段名',
  `data_val` varchar(20) NOT NULL DEFAULT '' COMMENT '参数值',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_review
-- ----------------------------
DROP TABLE IF EXISTS `uct_review`;
CREATE TABLE `uct_review` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cus_id` int(10) NOT NULL COMMENT '客户的id',
  `wor_id` int(10) NOT NULL COMMENT '评测人id',
  `create_time` int(10) NOT NULL COMMENT '评测时间',
  `report_time` int(10) DEFAULT NULL COMMENT '报告时间',
  `deletetime` int(10) DEFAULT NULL COMMENT '删除时间',
  `status` tinyint(1) NOT NULL COMMENT '评测的状态：0-草稿 1-待报告 2-待审核 3-完成发布',
  `chang_time` int(10) DEFAULT NULL COMMENT '修改的时间',
  `type_json` json DEFAULT NULL COMMENT '品类和价格的json',
  `begin_ratio` float NOT NULL DEFAULT '0' COMMENT '改善前废料可回收率',
  `last_ratio` float NOT NULL DEFAULT '0' COMMENT '改善后废料可回收率',
  `earnings` float NOT NULL DEFAULT '0' COMMENT '预计改善后增加的收益',
  `change_memo` text COMMENT '预期改善效果',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=211 DEFAULT CHARSET=utf8 COMMENT='废料评测主表';

-- ----------------------------
-- Table structure for uct_review_audit
-- ----------------------------
DROP TABLE IF EXISTS `uct_review_audit`;
CREATE TABLE `uct_review_audit` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `review_id` int(10) NOT NULL COMMENT '评测主表的id',
  `audit_id` int(10) NOT NULL COMMENT '审核人id',
  `audit_result` tinyint(1) NOT NULL COMMENT '审核结果: 0-不通过 1- 通过',
  `memo` text NOT NULL COMMENT '审核备注',
  `create_time` int(10) NOT NULL COMMENT '审核时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=MyISAM AUTO_INCREMENT=22 DEFAULT CHARSET=utf8 COMMENT='评测审核表';

-- ----------------------------
-- Table structure for uct_review_auth
-- ----------------------------
DROP TABLE IF EXISTS `uct_review_auth`;
CREATE TABLE `uct_review_auth` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `parent_id` int(10) NOT NULL COMMENT '父级id',
  `auth_name` varchar(40) NOT NULL COMMENT '鉴定项目的名称',
  `type` int(10) NOT NULL DEFAULT '1' COMMENT '格式类型',
  `deletetime` int(10) DEFAULT NULL COMMENT '删除时间',
  `rank` int(10) DEFAULT '0' COMMENT '排序',
  `is_show` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否显示：0=不显示  1-显示',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8 COMMENT='鉴定项目配置表';

-- ----------------------------
-- Table structure for uct_review_branch
-- ----------------------------
DROP TABLE IF EXISTS `uct_review_branch`;
CREATE TABLE `uct_review_branch` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `branch_name` varchar(30) NOT NULL COMMENT '分支的名称',
  `deletetime` int(10) DEFAULT NULL COMMENT '删除时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='评测分支配置表';

-- ----------------------------
-- Table structure for uct_review_details
-- ----------------------------
DROP TABLE IF EXISTS `uct_review_details`;
CREATE TABLE `uct_review_details` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(10) NOT NULL COMMENT '主表的id',
  `auth_id` varchar(20) NOT NULL COMMENT '鉴定项目id',
  `auth_attr` text COMMENT '鉴定项目的属性的json',
  `version` int(10) DEFAULT NULL COMMENT '版本',
  `attr_type` int(10) DEFAULT NULL COMMENT '属性的状态；0-暂存 1-正式内容',
  `img_url` varchar(800) NOT NULL COMMENT '图片的地址',
  `memo` text COMMENT '备注',
  `create_time` int(10) NOT NULL DEFAULT '0' COMMENT '数据生成时间',
  `changes_time` int(10) NOT NULL DEFAULT '0' COMMENT '数据修改的时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=405 DEFAULT CHARSET=utf8 COMMENT='评测的详情表';

-- ----------------------------
-- Table structure for uct_sample_collect
-- ----------------------------
DROP TABLE IF EXISTS `uct_sample_collect`;
CREATE TABLE `uct_sample_collect` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cus_id` int(10) NOT NULL COMMENT '客户ID',
  `wor_id` int(10) NOT NULL COMMENT '采样人id',
  `create_time` int(10) NOT NULL COMMENT '创建时间',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '样品的状态：0-草稿 1-待报价 2-待审核 3-初审通过 4-初审不通过 5-终审通过 6-终审不通过',
  `chang_time` int(10) NOT NULL DEFAULT '0' COMMENT '改变的时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COMMENT='废料评测的样品采集表';

-- ----------------------------
-- Table structure for uct_sample_collect_details
-- ----------------------------
DROP TABLE IF EXISTS `uct_sample_collect_details`;
CREATE TABLE `uct_sample_collect_details` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `collect_id` int(11) NOT NULL COMMENT '主表id',
  `collect_code` varchar(30) NOT NULL COMMENT '样品编码',
  `img_url` varchar(800) NOT NULL COMMENT '多图片的地址',
  `memo` varchar(100) DEFAULT NULL COMMENT '备注',
  `create_time` int(10) NOT NULL COMMENT '生成的时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8 COMMENT='废料评测的样品采集详情表';

-- ----------------------------
-- Table structure for uct_sell_tax_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_sell_tax_log`;
CREATE TABLE `uct_sell_tax_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `cus_id` int(11) NOT NULL COMMENT '客户id',
  `before` decimal(5,2) NOT NULL,
  `after` decimal(5,2) NOT NULL,
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_sign_company
-- ----------------------------
DROP TABLE IF EXISTS `uct_sign_company`;
CREATE TABLE `uct_sign_company` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `license` varchar(100) NOT NULL DEFAULT '' COMMENT '营业执照编号',
  `name` varchar(100) NOT NULL COMMENT '公司全称',
  `addr` varchar(100) NOT NULL COMMENT '详细地址',
  `legal_person` varchar(100) NOT NULL COMMENT '法人代表',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_sim_card_main
-- ----------------------------
DROP TABLE IF EXISTS `uct_sim_card_main`;
CREATE TABLE `uct_sim_card_main` (
  `iccid` varchar(50) NOT NULL COMMENT 'SIM卡的iccid',
  `msisdn` varchar(50) DEFAULT NULL COMMENT 'MSISDN',
  `carrier` varchar(50) DEFAULT NULL COMMENT '服务商代号',
  `provider` varchar(50) DEFAULT NULL COMMENT '服务提供商名称',
  `packge` varchar(50) DEFAULT NULL COMMENT '套餐名称',
  `register_time` datetime DEFAULT NULL COMMENT '注册时间',
  `activation_time` varchar(32) DEFAULT NULL COMMENT '激活时间',
  `service_end_time` datetime DEFAULT NULL COMMENT '结束时间',
  `capacity` decimal(20,2) DEFAULT NULL COMMENT '总⽤量(MB)',
  `current_usage` decimal(20,2) DEFAULT NULL COMMENT '已使⽤量(MB)',
  `current_cycle_begin` datetime DEFAULT NULL COMMENT '当前周期⽤量⽣效时间',
  `current_cycle_end` datetime DEFAULT NULL COMMENT '当前周期⽤量失效时间',
  `life_cycle` int(10) DEFAULT NULL COMMENT '卡的生命周期的代号:   0-库存,   1-沉默期,  2-可用,    3-待续期订购, 4-待销卡,    5-已销卡',
  `net_status` int(10) DEFAULT NULL COMMENT '卡的网络状态:  0-正常,    1-强制断网,       2-客户断网,    3-超套停,    4-服务结束,  5-提请销卡,  6-销卡',
  `active` blob COMMENT '激活状态:  false-表示没有激活，true-表示激活',
  `online` blob COMMENT '在线状态: false-表示不在线，true-表示在线',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updata_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`iccid`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='设备上面的卡的信息（IOE、北京讯众）';

-- ----------------------------
-- Table structure for uct_sms
-- ----------------------------
DROP TABLE IF EXISTS `uct_sms`;
CREATE TABLE `uct_sms` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `event` varchar(30) NOT NULL DEFAULT 'register' COMMENT '事件',
  `mobile` varchar(20) NOT NULL DEFAULT '' COMMENT '手机号',
  `code` varchar(10) NOT NULL DEFAULT '' COMMENT '验证码',
  `times` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '验证次数',
  `ip` varchar(30) NOT NULL DEFAULT '' COMMENT 'IP',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `createtime` (`createtime`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8 COMMENT='短信验证码表';

-- ----------------------------
-- Table structure for uct_sort_line_station
-- ----------------------------
DROP TABLE IF EXISTS `uct_sort_line_station`;
CREATE TABLE `uct_sort_line_station` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `uuid` varchar(50) NOT NULL,
  `line_id` int(11) NOT NULL COMMENT '线别id',
  `device_num` int(11) NOT NULL DEFAULT '0' COMMENT '磅秤数',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `states` varchar(20) DEFAULT 'normal' COMMENT '显示状态 hidden normal',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_sorting_cate
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_cate`;
CREATE TABLE `uct_sorting_cate` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `parent_id` int(11) DEFAULT NULL COMMENT '父键',
  `creater_id` int(11) DEFAULT NULL COMMENT '创建者id',
  `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '品类名称',
  `description` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '详细描述性息',
  `imgpath` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '默认图片路径',
  `order_str` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '查询键位',
  `create_at` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '创建时间',
  `update_at` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=756 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Table structure for uct_sorting_commit
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_commit`;
CREATE TABLE `uct_sorting_commit` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `task_id` int(11) DEFAULT NULL COMMENT '任务表id',
  `line_id` varchar(20) DEFAULT NULL COMMENT '线体id',
  `station_id` varchar(20) NOT NULL COMMENT '分拣工站ID',
  `device_id` varchar(20) DEFAULT NULL COMMENT '装置ID',
  `purchase_order_no` varchar(20) DEFAULT NULL COMMENT '采购单号',
  `cate_id` int(11) DEFAULT NULL COMMENT '品类ID',
  `presell_price` decimal(10,3) DEFAULT NULL COMMENT '预提单价(元/kg)',
  `package_no` varchar(20) DEFAULT NULL COMMENT '包装编号',
  `item_no` int(11) DEFAULT NULL COMMENT '序号',
  `net_weight` decimal(6,2) DEFAULT NULL COMMENT '净重',
  `gross_weight` decimal(6,2) DEFAULT NULL COMMENT '总重',
  `tare_memo` varchar(800) DEFAULT NULL COMMENT '过磅皮重详情',
  `weight_unit` varchar(3) DEFAULT 'kg' COMMENT '重量单位',
  `sub_time` int(10) DEFAULT '0' COMMENT '提交数据的时间',
  `sorter` int(11) DEFAULT NULL COMMENT '分拣人',
  `control_station_id` varchar(30) DEFAULT NULL COMMENT '控制工站id',
  `controler` int(10) DEFAULT NULL COMMENT '控制工站登录人id',
  `begin_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '开始时间',
  `end_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '结束时间',
  `use_time` int(11) DEFAULT NULL COMMENT '耗时,按秒记',
  `process` varchar(20) DEFAULT 'pending' COMMENT '处理状态: [pending  待确认 / passed 确认通过 / rejected 拒绝]',
  `disposal_way` varchar(20) DEFAULT 'sorting' COMMENT '处理方式: [sorting  分拣 / weighing  过磅]',
  `is_pack` tinyint(1) DEFAULT '0' COMMENT '是否封包: [0  不更换太空包 / 1  更换太空包]',
  `leader` varchar(20) DEFAULT NULL,
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=494 DEFAULT CHARSET=utf8 COMMENT='分拣提交记录表,   1. 在什么位置     - 线体      - 工站    - 磅称 2. 是什么物    - 品类    - 包装ID    - 重量    - 单位 3. 是什么人    - 包装者    - 线长 4. 在什么时候    - 开始时间    - 结束时间 5. 是什么事     -提交分拣结果     -处理状态 ';

-- ----------------------------
-- Table structure for uct_sorting_container
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_container`;
CREATE TABLE `uct_sorting_container` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `sn` varchar(20) NOT NULL,
  `csn` varchar(20) DEFAULT NULL,
  `state` tinyint(1) DEFAULT '1',
  `weight` decimal(6,2) DEFAULT NULL,
  `weight_unit` varchar(5) NOT NULL DEFAULT 'kg',
  `last_calibration_at` datetime DEFAULT NULL,
  `hw_info` json DEFAULT NULL,
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `IDX_CON_SN_UNIQUE` (`sn`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_sorting_job_logs
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_job_logs`;
CREATE TABLE `uct_sorting_job_logs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line_id` varchar(20) NOT NULL COMMENT '分拣线ID',
  `purchase_order_no` varchar(20) NOT NULL COMMENT '采购单号',
  `revision` int(11) NOT NULL COMMENT '订修号',
  `status` varchar(20) DEFAULT 'startup' COMMENT '分拣状态: [startup 开始分拣 / stop 停止分拣 / finish 分拣完成]',
  `leader` varchar(20) DEFAULT NULL COMMENT '分拣线长',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=593 DEFAULT CHARSET=utf8 COMMENT='批次分拣的历史记录表';

-- ----------------------------
-- Table structure for uct_sorting_jobs
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_jobs`;
CREATE TABLE `uct_sorting_jobs` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line_id` varchar(20) NOT NULL COMMENT '分拣线ID',
  `order_id` int(10) NOT NULL COMMENT '订单表的自增id',
  `purchase_order_no` varchar(20) NOT NULL COMMENT '采购单号',
  `status` varchar(20) DEFAULT 'startup' COMMENT '分拣状态: [waiting 等待分拣 / startup 开始分拣 / stop 停止分拣 / finish 分拣完成]',
  `leader` varchar(20) DEFAULT NULL COMMENT '分拣线长',
  `priority` int(10) DEFAULT NULL COMMENT '优先级',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `finish_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '完成时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=106 DEFAULT CHARSET=utf8 COMMENT='当前批次分拣表';

-- ----------------------------
-- Table structure for uct_sorting_line
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_line`;
CREATE TABLE `uct_sorting_line` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增长id',
  `warehouse_id` int(11) NOT NULL DEFAULT '0' COMMENT '仓库id',
  `station_num` int(11) NOT NULL DEFAULT '0' COMMENT '工位号',
  `line_num` int(11) NOT NULL DEFAULT '0' COMMENT '线别号',
  `order_id` varchar(50) NOT NULL DEFAULT '0' COMMENT '订单id',
  `cate_id` int(11) NOT NULL DEFAULT '0' COMMENT '物料id',
  `sort_man` int(11) NOT NULL DEFAULT '0' COMMENT '分拣人id',
  `materiel_num` varchar(100) NOT NULL DEFAULT '' COMMENT '包装编码',
  `net_weight` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '入库净重',
  `presell_price` decimal(10,3) NOT NULL DEFAULT '0.000' COMMENT '预提销售单价',
  `storage_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '入库时间',
  `start_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '开始分拣时间',
  `end_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '结束分拣时间',
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=72 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_sorting_line_manage
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_line_manage`;
CREATE TABLE `uct_sorting_line_manage` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '分拣线id号',
  `uuid` varchar(50) NOT NULL COMMENT '分拣线唯一识别码',
  `admin_id` int(11) NOT NULL COMMENT '负责人',
  `branch_id` int(11) NOT NULL COMMENT '分部id',
  `warehouse_id` int(11) NOT NULL COMMENT '仓库',
  `line_name` varchar(200) NOT NULL COMMENT '线别名称',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `states` varchar(20) DEFAULT 'normal' COMMENT '显示状态 hidden normal',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_sorting_packings
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_packings`;
CREATE TABLE `uct_sorting_packings` (
  `package_no` varchar(20) NOT NULL COMMENT '包装编号',
  `station_id` varchar(20) NOT NULL COMMENT '工站ID',
  `device_id` varchar(20) DEFAULT NULL COMMENT '磅秤ID',
  `cate_id` int(11) DEFAULT NULL COMMENT '品类ID',
  `total_net_weight` decimal(6,2) DEFAULT NULL COMMENT '净重',
  `weight_unit` varchar(3) DEFAULT 'kg' COMMENT '重量单位',
  `packer` int(255) DEFAULT NULL,
  `begin_time` timestamp NULL DEFAULT NULL COMMENT '开始时间',
  `end_time` timestamp NULL DEFAULT NULL COMMENT '结束时间',
  `use_time` int(11) DEFAULT NULL COMMENT '耗时,按秒记',
  `status` varchar(10) DEFAULT 'open' COMMENT '包装状态: [open  / close ]',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`package_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_sorting_rfid
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_rfid`;
CREATE TABLE `uct_sorting_rfid` (
  `rfid` varchar(24) NOT NULL COMMENT ' RFID EPC 20位 全大写',
  `sn` varchar(20) DEFAULT NULL COMMENT '设备系列号 20位',
  `state` int(11) DEFAULT '0' COMMENT '状态： 0 未使用，1 绑定设备， 2 已失效',
  `create_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_sorting_sop
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_sop`;
CREATE TABLE `uct_sorting_sop` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'SOP主键',
  `state` tinyint(4) DEFAULT '1' COMMENT '利用int值-控制sop状态(0-待激活，1-激活，2-关闭)',
  `key_id` int(11) NOT NULL COMMENT '关联表键--版本主键',
  `creater_id` int(11) DEFAULT NULL COMMENT '创建者外键',
  `version` int(11) DEFAULT '1' COMMENT '版本号',
  `name` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT 'sop名称/',
  `description` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'sop-内容明细',
  `imgpath` varchar(100) COLLATE utf8_bin DEFAULT NULL COMMENT '默认图片路径',
  `create_at` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_at` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;

-- ----------------------------
-- Table structure for uct_sorting_task_template
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_task_template`;
CREATE TABLE `uct_sorting_task_template` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `template_name` varchar(50) NOT NULL COMMENT '模板名称',
  `branch_id` int(10) DEFAULT '0' COMMENT '分部id',
  `sortage_id` int(10) DEFAULT '0' COMMENT '仓库id',
  `line_id` varchar(10) DEFAULT '0' COMMENT '线体id',
  `supplier_code` varchar(100) DEFAULT '' COMMENT '供应商code',
  `active` tinyint(1) DEFAULT '1' COMMENT '是否生效：0-失效  1-有效',
  `wor_id` int(10) DEFAULT '0' COMMENT '添加模板人id',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT=' 设置每个线体中各个磅秤物料的模板表';

-- ----------------------------
-- Table structure for uct_sorting_task_template_detail
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_task_template_detail`;
CREATE TABLE `uct_sorting_task_template_detail` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `temp_id` int(10) NOT NULL COMMENT '模板主表id',
  `station_id` varchar(50) DEFAULT '' COMMENT '工站id',
  `device_id` varchar(50) DEFAULT '' COMMENT '磅秤id',
  `cate_id` int(10) DEFAULT '0' COMMENT '物料id',
  `cate_name` varchar(100) DEFAULT '' COMMENT '物料名称',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8 COMMENT='工位物料设置模板的详情表';

-- ----------------------------
-- Table structure for uct_sorting_tasks
-- ----------------------------
DROP TABLE IF EXISTS `uct_sorting_tasks`;
CREATE TABLE `uct_sorting_tasks` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line_id` varchar(20) NOT NULL,
  `station_id` varchar(20) DEFAULT NULL COMMENT '工站ID',
  `device_id` varchar(20) DEFAULT NULL COMMENT '装置ID',
  `device_label` varchar(50) DEFAULT NULL COMMENT '装置标签',
  `cate_id` int(11) DEFAULT NULL COMMENT '品类ID',
  `cate_name` varchar(50) DEFAULT NULL COMMENT '品类名称',
  `active` int(11) DEFAULT '2' COMMENT '活激标志: 0 失效, 1 有效, 2 待生效',
  `leader` int(11) DEFAULT NULL COMMENT '分拣线长',
  `po_no` varchar(20) DEFAULT NULL COMMENT '[备用]指定一个采购单PO',
  `assign_no` int(11) DEFAULT NULL COMMENT '[备用]分配给某个指定的分拣员',
  `package_no` varchar(20) DEFAULT NULL COMMENT '指定一个包装编号',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=612 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_special_settle
-- ----------------------------
DROP TABLE IF EXISTS `uct_special_settle`;
CREATE TABLE `uct_special_settle` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `order_no` varchar(30) NOT NULL,
  `audit_id` varchar(50) NOT NULL DEFAULT '' COMMENT '钉钉审核id',
  `stop_audit_id` varchar(50) NOT NULL DEFAULT '' COMMENT '终止钉钉审核id',
  `cus_id` int(11) NOT NULL COMMENT '客户id',
  `crmid` varchar(15) NOT NULL DEFAULT '' COMMENT 'crm系统id',
  `cus_name` varchar(100) NOT NULL DEFAULT '' COMMENT '客户名称',
  `apply_id` int(11) NOT NULL COMMENT '申请人',
  `apply_name` varchar(100) NOT NULL DEFAULT '' COMMENT '申请人名称',
  `settle_type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '结算方式 1半月结 2月结',
  `is_publice` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否对公 1 是 2否',
  `tax` decimal(5,2) NOT NULL DEFAULT '0.00' COMMENT '税率',
  `sign_company_id` int(11) NOT NULL DEFAULT '0' COMMENT '签约公司',
  `sign_company_name` varchar(100) NOT NULL DEFAULT '' COMMENT '签约公司名称',
  `bill_order` tinyint(4) NOT NULL DEFAULT '0' COMMENT '票款顺序 0非对公  1是先付款后开票,2先开票后付款',
  `begin_date` date NOT NULL COMMENT '开始日期',
  `end_date` date NOT NULL COMMENT '结束日期',
  `sync_tax` tinyint(4) NOT NULL DEFAULT '1' COMMENT '是否同步 1是 2否',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态 1审批中 2生效中 3已失效',
  `stop_status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '终止申请状态  1未申请  2审核中 3终止',
  `audittime` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '审核时间',
  `stoptime` timestamp NULL DEFAULT NULL COMMENT '终止时间',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_special_settle_remark
-- ----------------------------
DROP TABLE IF EXISTS `uct_special_settle_remark`;
CREATE TABLE `uct_special_settle_remark` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `special_settle_id` int(11) NOT NULL COMMENT '特殊结算id',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '类型 1新增 2审核通过 3终止',
  `remark` varchar(100) NOT NULL DEFAULT '' COMMENT '备注文本',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_spi_customer_history
-- ----------------------------
DROP TABLE IF EXISTS `uct_spi_customer_history`;
CREATE TABLE `uct_spi_customer_history` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `month` varchar(50) NOT NULL COMMENT '月份',
  `branch_id` int(11) DEFAULT NULL COMMENT '分部',
  `cust_id` int(11) DEFAULT NULL COMMENT '客户id',
  `cust_name` varchar(255) DEFAULT NULL COMMENT '客户名称',
  `cust_type` varchar(20) DEFAULT NULL COMMENT '客户类型:up=上游客户,down=下游客户',
  `star_level` int(11) DEFAULT '1' COMMENT '客户星级',
  `create_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3439 DEFAULT CHARSET=utf8mb4 COMMENT='客户上个月的星级';

-- ----------------------------
-- Table structure for uct_spi_level
-- ----------------------------
DROP TABLE IF EXISTS `uct_spi_level`;
CREATE TABLE `uct_spi_level` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `level1` decimal(10,2) NOT NULL COMMENT '等级1',
  `level2` decimal(10,2) DEFAULT NULL COMMENT '等级2',
  `create_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='spi的等级';

-- ----------------------------
-- Table structure for uct_spi_target
-- ----------------------------
DROP TABLE IF EXISTS `uct_spi_target`;
CREATE TABLE `uct_spi_target` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `time_dims` varchar(10) NOT NULL COMMENT '时间维度',
  `time_val` varchar(30) DEFAULT NULL COMMENT '时间标签',
  `begin_time` datetime DEFAULT NULL COMMENT '开始时间',
  `end_time` datetime DEFAULT NULL COMMENT '结束时间',
  `data_dims` varchar(30) DEFAULT NULL COMMENT '数据颗粒度',
  `data_val` varchar(100) DEFAULT NULL COMMENT '数据值',
  `dept_name` varchar(100) DEFAULT NULL COMMENT '所属部门名称',
  `parent_id` varchar(100) DEFAULT '0' COMMENT '父数据值',
  `owner` varchar(50) DEFAULT NULL COMMENT '所有人',
  `target_dims` varchar(30) DEFAULT NULL COMMENT '目标维度',
  `target_val` decimal(10,2) DEFAULT NULL COMMENT '目标值',
  `target_unit` varchar(20) DEFAULT NULL COMMENT '目标单位',
  `create_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1012 DEFAULT CHARSET=utf8mb4 COMMENT='绩效目标表';

-- ----------------------------
-- Table structure for uct_statements_action_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_statements_action_log`;
CREATE TABLE `uct_statements_action_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(10) DEFAULT NULL COMMENT '主表的id',
  `action_type` varchar(20) DEFAULT NULL COMMENT '动作:''apply''--申请,''check''--检查,''make''--生成,''redo''--重做,''submit''--提交,''approval''--审核,''sent''--推送,''cancel''--作废,''feedback''--反馈',
  `identity` varchar(10) DEFAULT '服务人员' COMMENT '操作人的身份（''系统'',''客户'',''服务人员''）',
  `identity_id` int(10) DEFAULT NULL COMMENT '操作人的id',
  `content` varchar(255) DEFAULT NULL COMMENT '操作内容',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC COMMENT='对账单的动作日志';

-- ----------------------------
-- Table structure for uct_statements_basic_data
-- ----------------------------
DROP TABLE IF EXISTS `uct_statements_basic_data`;
CREATE TABLE `uct_statements_basic_data` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `customer_id` int(10) DEFAULT '0' COMMENT '客户id',
  `customer_name` varchar(100) DEFAULT NULL COMMENT '客户名称',
  `stas_type` int(10) DEFAULT '1' COMMENT '对账单类型：1--收付款项凭证  2--往来账务核对',
  `stas_way` varchar(20) DEFAULT NULL COMMENT '对账方式：''分成''    ''常规采购''',
  `way_ratio` decimal(10,3) DEFAULT '0.000' COMMENT '分成比率',
  `is_tax` tinyint(2) DEFAULT '0' COMMENT '是否含税：0--不含税   1--含税',
  `tax_ratio` decimal(10,3) DEFAULT NULL COMMENT '税率',
  `status` tinyint(2) DEFAULT '0' COMMENT '使用状态： 0--刚刚生成  1--正常使用     2--过期',
  `start_time` int(10) DEFAULT NULL COMMENT '开始时间',
  `end_time` int(10) DEFAULT NULL COMMENT '结束时间',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COMMENT='各个客户的对账单的基础数据';

-- ----------------------------
-- Table structure for uct_statements_detail
-- ----------------------------
DROP TABLE IF EXISTS `uct_statements_detail`;
CREATE TABLE `uct_statements_detail` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(11) DEFAULT NULL COMMENT '主表的id',
  `version` int(10) DEFAULT '0' COMMENT '版本',
  `FInterID` int(11) DEFAULT NULL COMMENT '订单内码ID',
  `order_id` varchar(20) DEFAULT NULL COMMENT '订单号',
  `order_type` int(10) NOT NULL DEFAULT '1' COMMENT '订单状态：1--待付款  2--已付款',
  `pick_goods_time` datetime DEFAULT NULL COMMENT '提货的时间',
  `purchase_incharge` int(10) DEFAULT NULL COMMENT '采购负责人ID',
  `purchase_name` varchar(30) DEFAULT NULL COMMENT '采购负责人姓名',
  `total_net_weight` decimal(10,3) DEFAULT NULL COMMENT '合计净重',
  `total_amount` decimal(10,3) DEFAULT NULL COMMENT '合计金额',
  `memo` varchar(255) DEFAULT NULL COMMENT '备注',
  `material_json` json DEFAULT NULL COMMENT '订单所属物料的json数据',
  `detail_status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态： 0--删除  1--正常  ',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COMMENT='客户对账单的详情表';

-- ----------------------------
-- Table structure for uct_statements_main
-- ----------------------------
DROP TABLE IF EXISTS `uct_statements_main`;
CREATE TABLE `uct_statements_main` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `stas_id` varchar(30) CHARACTER SET utf8 NOT NULL COMMENT '对账单id',
  `customer_id` int(11) DEFAULT NULL COMMENT '客户id',
  `stas_from` varchar(10) DEFAULT 'services' COMMENT '申请来源：''system''--系统触发   ''customer''--客户申请  ''services''--服务人员申请',
  `customer_name` varchar(100) DEFAULT NULL COMMENT '客户名称',
  `purchase_incharge` int(10) DEFAULT NULL COMMENT '客户对应的采购负责人id',
  `purchase_name` varchar(20) DEFAULT NULL COMMENT '客户对应的采购负责人名称',
  `purchase_tel` bigint(20) DEFAULT NULL COMMENT '客户对应的采购负责人联系电话',
  `stas_start_time` int(10) DEFAULT NULL COMMENT '对账的开始日期',
  `stas_end_time` int(10) DEFAULT NULL COMMENT '对账的结束日期',
  `pur_company` varchar(200) DEFAULT NULL COMMENT '购货单位',
  `pur_people` varchar(30) DEFAULT NULL COMMENT '购货单位负责人',
  `pur_tel` varchar(15) DEFAULT NULL COMMENT '购货单位负责人电话',
  `stas_type` varchar(10) DEFAULT 'payment' COMMENT '对账单类型：''payment''--收付款项凭证  ''history''--往来账务核对',
  `stas_way` varchar(50) DEFAULT 'general' COMMENT '对账方式：''general''--"常规采购"   ''profit_sharing''--"利润分成"',
  `way_ratio` decimal(10,3) DEFAULT NULL COMMENT '分成比率',
  `is_tax` tinyint(1) DEFAULT NULL COMMENT '是否含税：0--不含税   1--含税',
  `tax_ratio` decimal(10,3) DEFAULT NULL COMMENT '税率',
  `stas_state` varchar(10) DEFAULT 'new' COMMENT '对账单状态: ''new''--新申请,''generated''--已生成,''submitted''--已提交,''approved''--已审核,''rejected''--已拒绝,''TBC''--待确认,''confirmed''--已确认,''failure''--确认失败,''canceled''--已做废,''expired''--已过期',
  `detail_version` int(10) DEFAULT '0' COMMENT '版本',
  `pur_total_net_weight` decimal(10,3) DEFAULT '0.000' COMMENT '合计采购净重',
  `pur_total_amount` decimal(10,3) DEFAULT '0.000' COMMENT '合计采购金额',
  `tax_total_amount` decimal(10,3) DEFAULT '0.000' COMMENT '含税采购金额',
  `pay_divided_amount` decimal(10,3) DEFAULT '0.000' COMMENT '应付分成金额',
  `stas_memo` varchar(255) DEFAULT NULL COMMENT '备注',
  `appr_num` varchar(50) DEFAULT NULL COMMENT '审批单号',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `confirmed_time` int(10) DEFAULT NULL COMMENT '确认时间',
  `send_time` int(10) DEFAULT NULL COMMENT '推送时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COMMENT='客户的对账单主表';

-- ----------------------------
-- Table structure for uct_statements_main_feedback
-- ----------------------------
DROP TABLE IF EXISTS `uct_statements_main_feedback`;
CREATE TABLE `uct_statements_main_feedback` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `main_id` int(10) NOT NULL COMMENT '对账单的主表id',
  `feed_name` varchar(20) CHARACTER SET utf8 DEFAULT NULL COMMENT '反馈人的姓名',
  `msg_type` tinyint(2) DEFAULT '1' COMMENT '类型： 1--反馈内容   2--图片地址',
  `content` text CHARACTER SET utf8 COMMENT '反馈的内容',
  `img_url` varchar(100) CHARACTER SET utf8 DEFAULT NULL COMMENT '图片的地址',
  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COMMENT='对账单客户的反馈信息/图片的信息';

-- ----------------------------
-- Table structure for uct_testmodule_test
-- ----------------------------
DROP TABLE IF EXISTS `uct_testmodule_test`;
CREATE TABLE `uct_testmodule_test` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) NOT NULL COMMENT '管理员ID',
  `category_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '分类ID(单选)',
  `category_ids` varchar(100) NOT NULL COMMENT '分类ID(多选)',
  `week` enum('monday','tuesday','wednesday') NOT NULL COMMENT '星期(单选):monday=星期一,tuesday=星期二,wednesday=星期三',
  `flag` set('hot','index','recommend') NOT NULL DEFAULT '' COMMENT '标志(多选):hot=热门,index=首页,recommend=推荐',
  `genderdata` enum('male','female') NOT NULL DEFAULT 'male' COMMENT '性别(单选):male=男,female=女',
  `hobbydata` set('music','reading','swimming') NOT NULL COMMENT '爱好(多选):music=音乐,reading=读书,swimming=游泳',
  `title` varchar(50) NOT NULL DEFAULT '' COMMENT '标题',
  `content` text NOT NULL COMMENT '内容',
  `image` varchar(100) NOT NULL DEFAULT '' COMMENT '图片',
  `images` varchar(1500) NOT NULL DEFAULT '' COMMENT '图片组',
  `attachfile` varchar(100) NOT NULL DEFAULT '' COMMENT '附件',
  `keywords` varchar(100) NOT NULL DEFAULT '' COMMENT '关键字',
  `description` varchar(255) NOT NULL DEFAULT '' COMMENT '描述',
  `city` varchar(100) NOT NULL DEFAULT '' COMMENT '省市',
  `price` float(10,2) unsigned NOT NULL DEFAULT '0.00' COMMENT '价格',
  `views` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '点击',
  `startdate` date DEFAULT NULL COMMENT '开始日期',
  `activitytime` datetime DEFAULT NULL COMMENT '活动时间(datetime)',
  `year` year(4) DEFAULT NULL COMMENT '年',
  `times` time DEFAULT NULL COMMENT '时间',
  `refreshtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '刷新时间(int)',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `switch` tinyint(1) NOT NULL DEFAULT '0' COMMENT '开关',
  `status` enum('normal','hidden') NOT NULL DEFAULT 'normal' COMMENT '状态',
  `state` enum('0','1','2') NOT NULL DEFAULT '1' COMMENT '状态值:0=禁用,1=正常,2=推荐',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='测试表';

-- ----------------------------
-- Table structure for uct_third
-- ----------------------------
DROP TABLE IF EXISTS `uct_third`;
CREATE TABLE `uct_third` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `user_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '会员ID',
  `platform` enum('weibo','wechat','qq') NOT NULL COMMENT '第三方应用',
  `openid` varchar(50) NOT NULL DEFAULT '' COMMENT '第三方唯一ID',
  `openname` varchar(50) NOT NULL DEFAULT '' COMMENT '第三方会员昵称',
  `access_token` varchar(100) NOT NULL DEFAULT '',
  `refresh_token` varchar(100) NOT NULL DEFAULT '',
  `expires_in` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '有效期',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `logintime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '登录时间',
  `expiretime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '过期时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `platform` (`platform`,`openid`) USING BTREE,
  KEY `user_id` (`user_id`,`platform`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='第三方登录表';

-- ----------------------------
-- Table structure for uct_trans_revise_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_trans_revise_log`;
CREATE TABLE `uct_trans_revise_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `admin_id` int(11) DEFAULT NULL COMMENT '操作者id',
  `order_id` int(11) DEFAULT NULL COMMENT '订单id',
  `type` int(11) DEFAULT '0' COMMENT '订单类型 0 采购流程 1现买现卖 2销售订单',
  `revise_item` text COMMENT '修改事项',
  `createtime` int(11) DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=423 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_up
-- ----------------------------
DROP TABLE IF EXISTS `uct_up`;
CREATE TABLE `uct_up` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `crmid` varchar(20) DEFAULT NULL COMMENT 'crmid',
  `name` varchar(20) DEFAULT NULL COMMENT '姓名',
  `mobile` varchar(20) DEFAULT NULL COMMENT '手机',
  `company_province` varchar(20) DEFAULT NULL COMMENT '省',
  `company_city` varchar(20) DEFAULT NULL COMMENT '市',
  `company_region` varchar(20) DEFAULT NULL COMMENT '区',
  `company_addr` varchar(250) DEFAULT NULL COMMENT '详细地址',
  `first_business_time` varchar(255) DEFAULT NULL COMMENT '第一次交易时间',
  `position` varchar(20) NOT NULL DEFAULT '0,0' COMMENT '经纬度',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2913 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_up2
-- ----------------------------
DROP TABLE IF EXISTS `uct_up2`;
CREATE TABLE `uct_up2` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT '自增长id',
  `crmId` varchar(25) DEFAULT NULL COMMENT 'crmid',
  `followUserId` varchar(25) DEFAULT NULL COMMENT '跟随id',
  `name` varchar(50) DEFAULT NULL COMMENT '名称',
  `mobile` varchar(25) DEFAULT NULL COMMENT '手机号',
  `phone` varchar(25) DEFAULT NULL COMMENT '手机号',
  `title` varchar(50) DEFAULT NULL COMMENT '职位',
  `fax` varchar(50) DEFAULT NULL COMMENT '传真',
  `qq` varchar(50) DEFAULT NULL COMMENT 'qq',
  `email` varchar(25) DEFAULT NULL COMMENT 'email地址',
  `company` text COMMENT '客户公司名称',
  `company_addr` text COMMENT '公司地址',
  `company_url` text COMMENT '公司网址',
  `company_country` text COMMENT '公司国家',
  `call` text COMMENT '称呼',
  `memo` text COMMENT '备注',
  `gender` int(11) DEFAULT NULL COMMENT '客户性别0无/1/男/2女',
  `company_province` varchar(30) DEFAULT NULL COMMENT '公司所在省份',
  `company_city` varchar(30) DEFAULT NULL COMMENT '公司所在市',
  `company_region` varchar(30) DEFAULT NULL COMMENT '公司所在镇',
  `vocation` varchar(30) DEFAULT NULL COMMENT '客户行业',
  `modifyTime` varchar(100) DEFAULT NULL COMMENT '客户最近动态更新时间',
  `contactTime` varchar(100) DEFAULT NULL COMMENT '客户最近动态更新时间',
  `createTime` varchar(100) DEFAULT NULL COMMENT '客户创建时间',
  `lastFollowUserId` varchar(25) DEFAULT NULL COMMENT '最后跟进人id',
  `step` int(11) DEFAULT NULL COMMENT '客户阶段',
  `channelId` varchar(25) DEFAULT NULL COMMENT '渠道ID',
  `corpId` varchar(25) DEFAULT NULL COMMENT '公司ID',
  `createUserId` varchar(25) DEFAULT NULL COMMENT '创建人ID',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1303 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_up_modify_audit
-- ----------------------------
DROP TABLE IF EXISTS `uct_up_modify_audit`;
CREATE TABLE `uct_up_modify_audit` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` varchar(50) NOT NULL DEFAULT '' COMMENT '订单号',
  `customer_id` int(11) NOT NULL COMMENT '客户id',
  `type` smallint(6) NOT NULL DEFAULT '0' COMMENT '审核类型',
  `crmid` bigint(20) unsigned NOT NULL COMMENT '客户crmid',
  `accid` varchar(50) NOT NULL DEFAULT '' COMMENT '客户accid',
  `cus_type` varchar(50) NOT NULL DEFAULT 'up' COMMENT '客户类型',
  `crm_type` varchar(50) NOT NULL DEFAULT 'huke' COMMENT 'crm系统平台类型',
  `field_list` text COMMENT '修改字段',
  `opinion` varchar(100) DEFAULT '' COMMENT '意见',
  `manager_id` int(11) DEFAULT NULL COMMENT '业务负责人',
  `state` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态  1待审核 2审核通过 3审核不通过',
  `audittime` timestamp NULL DEFAULT NULL COMMENT '审核时间',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  `sync_flag` varchar(10) DEFAULT 'waiting' COMMENT '同步标志',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=104 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_user
-- ----------------------------
DROP TABLE IF EXISTS `uct_user`;
CREATE TABLE `uct_user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned DEFAULT NULL COMMENT '后台用户ID',
  `appletid` varchar(50) NOT NULL COMMENT '应用ID',
  `openid` varchar(50) NOT NULL COMMENT '用户openid',
  `unionid` varchar(50) NOT NULL DEFAULT '' COMMENT '用户unionid',
  `session_key` varchar(255) NOT NULL DEFAULT '' COMMENT '小程序会话密钥',
  `username` varchar(32) NOT NULL DEFAULT '' COMMENT '用户名',
  `nickname` varchar(50) NOT NULL DEFAULT '' COMMENT '昵称',
  `subscribe` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '1已关注 0未关注',
  `sex` tinyint(1) unsigned DEFAULT NULL COMMENT '1男 2女',
  `language` varchar(32) NOT NULL DEFAULT '' COMMENT '客户端语言',
  `city` varchar(50) NOT NULL DEFAULT '' COMMENT '城市',
  `province` varchar(50) NOT NULL DEFAULT '' COMMENT '省份',
  `country` varchar(50) NOT NULL DEFAULT '' COMMENT '国家',
  `password` varchar(32) NOT NULL DEFAULT '' COMMENT '密码',
  `salt` varchar(30) NOT NULL DEFAULT '' COMMENT '密码盐',
  `email` varchar(100) NOT NULL DEFAULT '' COMMENT '电子邮箱',
  `mobile` varchar(11) NOT NULL DEFAULT '' COMMENT '手机号',
  `avatar` varchar(255) NOT NULL DEFAULT '' COMMENT '头像',
  `level` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '等级',
  `gender` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '性别',
  `birthday` date DEFAULT NULL COMMENT '生日',
  `score` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '积分',
  `prevtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '上次登录时间',
  `loginfailure` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '失败次数',
  `logintime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '登录时间',
  `loginip` varchar(50) NOT NULL DEFAULT '' COMMENT '登录IP',
  `joinip` varchar(50) NOT NULL DEFAULT '' COMMENT '加入IP',
  `jointime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '加入时间',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `token` varchar(50) NOT NULL DEFAULT '' COMMENT 'Token',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `username` (`username`) USING BTREE,
  KEY `email` (`email`) USING BTREE,
  KEY `mobile` (`mobile`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=437 DEFAULT CHARSET=utf8 COMMENT='会员表';

-- ----------------------------
-- Table structure for uct_vehicle
-- ----------------------------
DROP TABLE IF EXISTS `uct_vehicle`;
CREATE TABLE `uct_vehicle` (
  `vehicle_id` varchar(36) DEFAULT NULL COMMENT '车辆ID',
  `plate_number` varchar(20) DEFAULT NULL COMMENT '车牌号',
  `pass_number` varchar(20) DEFAULT NULL COMMENT '行驶证',
  `model` varchar(20) DEFAULT NULL COMMENT '车辆类型',
  `status` varchar(20) DEFAULT NULL COMMENT '车辆状态',
  `vehicle_weight` double DEFAULT NULL COMMENT '车辆重量（单位：吨）',
  `vehicle_load_weight` double DEFAULT NULL COMMENT '车辆荷载（单位：吨）',
  `manufacturer` varchar(255) DEFAULT NULL COMMENT '生产厂家',
  `license_plate_color` varchar(50) DEFAULT NULL COMMENT '车牌颜色',
  `engine_no` varchar(50) DEFAULT NULL COMMENT '发动机号',
  `engine_number` varchar(50) DEFAULT NULL COMMENT '车架号',
  `container_sn` varchar(50) DEFAULT NULL COMMENT '车厢编号',
  `tem_id` varchar(50) DEFAULT NULL COMMENT '终端号',
  `remark` text COMMENT '备注',
  `org_id` varchar(36) DEFAULT NULL COMMENT '所属组织',
  `create_at` timestamp NULL DEFAULT NULL COMMENT '创建时间',
  `create_user_id` int(11) DEFAULT NULL COMMENT '创建人ID',
  `update_at` timestamp NULL DEFAULT NULL COMMENT '更新时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_voucher
-- ----------------------------
DROP TABLE IF EXISTS `uct_voucher`;
CREATE TABLE `uct_voucher` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `no` varchar(30) NOT NULL COMMENT '订单号',
  `audit_id` varchar(50) NOT NULL DEFAULT '' COMMENT '钉钉审核订单号',
  `task_id` varchar(50) NOT NULL DEFAULT '' COMMENT '钉钉任务id',
  `branch_id` int(11) NOT NULL DEFAULT '0' COMMENT '分部id',
  `branch_text` varchar(50) NOT NULL DEFAULT '' COMMENT '分部名称',
  `place_order_name` varchar(50) NOT NULL COMMENT '下单人昵称',
  `place_order_id` int(11) NOT NULL COMMENT '下单人id',
  `place_order_mobile` varchar(15) NOT NULL DEFAULT '' COMMENT '下单人手机号',
  `cus_linkman_name` varchar(50) NOT NULL DEFAULT '' COMMENT '客户对接人',
  `cus_id` int(11) NOT NULL COMMENT '客户id',
  `cus_name` varchar(100) NOT NULL DEFAULT '' COMMENT '客户公司',
  `cus_code` varchar(50) NOT NULL DEFAULT '' COMMENT '客户编码',
  `cus_type` varchar(50) NOT NULL DEFAULT 'down' COMMENT '客户类型  up上游 down下游',
  `pay_use` varchar(50) NOT NULL DEFAULT 'deposit' COMMENT '支付用途   deposit定金   pledge保证金  refund退款',
  `pay_way` varchar(50) NOT NULL DEFAULT 'wechat' COMMENT '支付方式',
  `collect_bank_account` varchar(50) NOT NULL DEFAULT '' COMMENT '到账银行账号',
  `account_num` varchar(50) NOT NULL DEFAULT '' COMMENT '客户银行账号',
  `bank` varchar(50) NOT NULL DEFAULT '' COMMENT '开户行(上游)',
  `bank_address` varchar(50) NOT NULL DEFAULT '' COMMENT '开户地址(上游)',
  `wechat_name` varchar(50) NOT NULL DEFAULT '' COMMENT '微信名称',
  `cash` double NOT NULL DEFAULT '0' COMMENT '现结金额',
  `amount` double NOT NULL DEFAULT '0' COMMENT '金额',
  `surplus` double NOT NULL DEFAULT '0' COMMENT '剩余金额',
  `cause` varchar(200) NOT NULL DEFAULT '' COMMENT '付款原因(上游)',
  `images` varchar(200) NOT NULL DEFAULT '' COMMENT '图片列表',
  `qc` tinyint(4) NOT NULL DEFAULT '0' COMMENT '1为期初单',
  `status` varchar(20) NOT NULL DEFAULT 'untreated' COMMENT '状态 untreated未受理  act_ refuse会计审核拒绝   act_accept会计审核通过   refuse拒绝   uncleared未结清   cleared已结清',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_voucher_remark
-- ----------------------------
DROP TABLE IF EXISTS `uct_voucher_remark`;
CREATE TABLE `uct_voucher_remark` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `voucher_id` int(11) NOT NULL COMMENT '凭证id',
  `admin_id` int(11) NOT NULL DEFAULT '0' COMMENT '留言人id',
  `nickname` varchar(50) NOT NULL DEFAULT '' COMMENT '留言人昵称',
  `remark` varchar(200) NOT NULL DEFAULT '' COMMENT '留言',
  `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=222 DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- Table structure for uct_waste_cate
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_cate`;
CREATE TABLE `uct_waste_cate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `branch_id` int(10) unsigned NOT NULL COMMENT '分部ID',
  `parent_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '父级ID',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '名称',
  `top_class` varchar(20) DEFAULT '' COMMENT '所属大类(null--初始状态  glass--玻璃    metal--金属 plastic--塑料    waste-paper--纸  semi-finished--半成品  wood--木材  comprehensive--综合类  material--辅材  other--其他类别)',
  `standard_price` float(10,2) DEFAULT NULL COMMENT '标准报价(元/kg)',
  `presell_price` float(10,3) DEFAULT '0.000' COMMENT '预提单价(元/kg)',
  `risk_cost` float(10,2) DEFAULT NULL COMMENT '风险成本(元/kg)',
  `image` varchar(100) DEFAULT NULL COMMENT '图片',
  `value_type` varchar(20) DEFAULT 'valuable' COMMENT '价值类型  valuable有价  unvaluable 无价',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `state` enum('1','0') NOT NULL DEFAULT '1' COMMENT '状态:1=启用,0=禁用',
  `carbon_parm` float NOT NULL DEFAULT '0' COMMENT '碳减排参数',
  `start_time` bigint(20) DEFAULT NULL COMMENT '开始时间',
  `end_time` bigint(20) DEFAULT NULL COMMENT '结束时间',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  `direction` int(11) DEFAULT NULL COMMENT '重定向位置',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `uct_waste_cate_idx_002` (`parent_id`) USING BTREE,
  KEY `uct_waste_cate_idx_001` (`branch_id`) USING BTREE,
  KEY `id_name_branch_id` (`id`,`name`,`branch_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=13346 DEFAULT CHARSET=utf8 COMMENT='废料分类表';

-- ----------------------------
-- Table structure for uct_waste_cate_actual
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_cate_actual`;
CREATE TABLE `uct_waste_cate_actual` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `branch_id` int(11) NOT NULL COMMENT '分部id',
  `customer_id` int(11) unsigned NOT NULL COMMENT '客户id',
  `cate_id` int(10) unsigned NOT NULL COMMENT '废料id',
  `expect_sale` int(10) unsigned DEFAULT NULL COMMENT '预计销售量',
  `standard_value` float(10,2) DEFAULT NULL COMMENT '标准销售报价',
  `actual_value` float(10,2) DEFAULT NULL COMMENT '实际销售单价',
  `start_time` int(10) unsigned NOT NULL COMMENT '开始时间',
  `end_time` int(10) unsigned NOT NULL COMMENT '结束时间',
  `createtime` int(10) unsigned NOT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=129 DEFAULT CHARSET=utf8 COMMENT='有效销售计划表';

-- ----------------------------
-- Table structure for uct_waste_cate_actual_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_cate_actual_log`;
CREATE TABLE `uct_waste_cate_actual_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `order_id` varchar(50) NOT NULL DEFAULT '' COMMENT '审批单号',
  `audit_id` varchar(50) NOT NULL DEFAULT '' COMMENT '钉钉审批id',
  `branch_id` int(10) unsigned NOT NULL COMMENT '分部id',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '发起者管理员id',
  `examine_remark` varchar(255) DEFAULT NULL COMMENT '销售专员说明',
  `branch_remark` varchar(255) DEFAULT NULL COMMENT '分部说明',
  `hq_remark` varchar(255) DEFAULT NULL COMMENT '总部说明',
  `hq_examine_time` int(10) unsigned DEFAULT NULL COMMENT '总部审核时间',
  `status` tinyint(3) unsigned NOT NULL DEFAULT '1' COMMENT '申请状态 1:分部审核中; 2:待总部审核;3:分部审核不通过;4总部审核不通过;5总部审核通过',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=279 DEFAULT CHARSET=utf8 COMMENT='销售计划审核日志表';

-- ----------------------------
-- Table structure for uct_waste_cate_actual_log_item
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_cate_actual_log_item`;
CREATE TABLE `uct_waste_cate_actual_log_item` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `branch_id` int(11) NOT NULL COMMENT '分部id',
  `actual_log_id` int(11) NOT NULL COMMENT '发起审核id',
  `customer_id` int(11) NOT NULL COMMENT '客户id',
  `cate_id` int(11) NOT NULL COMMENT '废料id',
  `expect_sale` int(11) DEFAULT NULL COMMENT '预计销售量',
  `presell_price` float(10,3) DEFAULT NULL COMMENT '标准报价',
  `actual_value` float(10,3) DEFAULT NULL COMMENT '实际销售单价',
  `state` int(10) DEFAULT '1' COMMENT '审核状态  0不通过   1审核通过',
  `level` varchar(50) DEFAULT 'standard' COMMENT '质量等级',
  `images` varchar(500) DEFAULT '' COMMENT '图片列表',
  `remark` varchar(50) DEFAULT '' COMMENT '备注',
  `start_time` int(10) unsigned DEFAULT NULL COMMENT '开始时间',
  `end_time` int(10) unsigned DEFAULT NULL COMMENT '结束时间',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `state` (`state`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=330 DEFAULT CHARSET=utf8 COMMENT='销售计划记录日志表';

-- ----------------------------
-- Table structure for uct_waste_cate_expect_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_cate_expect_log`;
CREATE TABLE `uct_waste_cate_expect_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `admin_id` int(10) unsigned DEFAULT NULL COMMENT '发起审核管理员id',
  `branch_id` int(10) unsigned DEFAULT NULL COMMENT '分部id',
  `file_name` varchar(255) DEFAULT NULL COMMENT '审批文件名称',
  `examine_remark` varchar(255) DEFAULT NULL COMMENT '审核说明',
  `branch_remark` varchar(255) DEFAULT NULL COMMENT '分部审核说明',
  `hq_remark` varchar(255) DEFAULT NULL COMMENT '总部审核说明',
  `hq_examine_time` int(10) unsigned DEFAULT NULL COMMENT '总部审核时间',
  `status` tinyint(3) unsigned NOT NULL DEFAULT '1' COMMENT '申请状态 1:分部审核中; 2:待总部审核;3:分部审核不通过;4总部审核不通过;5总部审核通过',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1174 DEFAULT CHARSET=utf8 COMMENT='预提销售单价';

-- ----------------------------
-- Table structure for uct_waste_cate_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_cate_log`;
CREATE TABLE `uct_waste_cate_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '操作者ID',
  `cate_id` int(10) unsigned NOT NULL COMMENT '废料分类ID',
  `type` enum('standard_price','presell_price','risk_cost') NOT NULL COMMENT '类型:standard_price=标准报价(元/kg),presell_price=预售价(元/kg),risk_cost=风险成本(元/kg)',
  `before_value` float(10,3) DEFAULT NULL COMMENT '变化前的值',
  `value` float(10,3) DEFAULT NULL COMMENT '变化后的值',
  `ip` varchar(50) NOT NULL DEFAULT '' COMMENT '操作者IP',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `createtime` (`createtime`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2686 DEFAULT CHARSET=utf8 COMMENT='废料分类记录表';

-- ----------------------------
-- Table structure for uct_waste_cate_overdue
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_cate_overdue`;
CREATE TABLE `uct_waste_cate_overdue` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `branch_id` int(11) DEFAULT NULL COMMENT '分部ID',
  `ware_id` int(11) DEFAULT NULL COMMENT '仓库ID',
  `cate_id` int(11) NOT NULL COMMENT '品类ID',
  `cate_name` varchar(100) DEFAULT NULL COMMENT '品类名称',
  `state` enum('1','0') NOT NULL DEFAULT '1' COMMENT '状态:1=启用,0=禁用',
  `create_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updata_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=310 DEFAULT CHARSET=utf8mb4 COMMENT='需要查询的超期品类表（仓库指标月度看板使用）';

-- ----------------------------
-- Table structure for uct_waste_customer
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_customer`;
CREATE TABLE `uct_waste_customer` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `cus_accid` varchar(100) NOT NULL DEFAULT '0' COMMENT '互客系统id',
  `crmid` varchar(100) NOT NULL DEFAULT '0' COMMENT 'crmid',
  `admin_id` varchar(100) DEFAULT NULL COMMENT '客户账号ID',
  `branch_id` int(10) unsigned DEFAULT NULL COMMENT '分部ID',
  `internal` int(10) unsigned DEFAULT '0' COMMENT '内部客户 0否 1是',
  `green_coin` int(10) unsigned DEFAULT '0' COMMENT '绿币',
  `customer_type` enum('up','down') NOT NULL DEFAULT 'up' COMMENT '客户类型:up=上游客户,down=下游客户',
  `customer_code` varchar(100) NOT NULL DEFAULT '' COMMENT '客户编码',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '企业全称',
  `agre_expire` date DEFAULT NULL COMMENT '合同到期时间',
  `sign_company` varchar(100) NOT NULL DEFAULT '' COMMENT '签约公司',
  `print_title_id` int(11) NOT NULL DEFAULT '1' COMMENT '客户单据打印id',
  `name_en` varchar(100) NOT NULL DEFAULT '' COMMENT '企业全称(英文)',
  `allot_id` int(11) NOT NULL DEFAULT '0' COMMENT '指定的分配人',
  `manager_id` int(10) unsigned DEFAULT NULL COMMENT '业务负责人ID',
  `server_id` int(10) unsigned DEFAULT NULL COMMENT '服务负责人ID',
  `seller_incharge` int(10) unsigned DEFAULT NULL COMMENT '销售负责人ID',
  `service_department` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '服务部门 1 客服 2企服',
  `incharge` varchar(50) NOT NULL DEFAULT '' COMMENT '客户负责人',
  `juridical_person` varchar(50) NOT NULL DEFAULT '' COMMENT '公司法人',
  `class_a` varchar(20) NOT NULL DEFAULT '' COMMENT '客户类别a  A1 A2 A3 A4',
  `class_b` varchar(20) NOT NULL DEFAULT '' COMMENT '客户类别b  B1 B2 B3 B4',
  `trade_type` varchar(5) DEFAULT NULL COMMENT '行业类型   1模切、涂布类 = M 特钢类 = T 隔膜类 = G 车废类 = C 其他类 = Q',
  `mobile` char(15) NOT NULL DEFAULT '' COMMENT '联系电话',
  `waste_type` varchar(100) NOT NULL DEFAULT '' COMMENT '废料种类',
  `level` int(10) unsigned DEFAULT NULL COMMENT '客户级别',
  `company_address` varchar(255) DEFAULT NULL COMMENT '企业地址',
  `company_position` text COMMENT '企业坐标',
  `company_adcode` bigint(20) DEFAULT NULL COMMENT '行政区编码(adcode)',
  `company_region` varchar(255) DEFAULT NULL COMMENT '行政区名称',
  `adcode_status` tinyint(1) DEFAULT '1' COMMENT '是否地址修改：0--正常  1--更新',
  `industry` int(10) unsigned DEFAULT NULL COMMENT '行业类别',
  `website` varchar(50) DEFAULT NULL COMMENT '官网',
  `sales_area` varchar(50) DEFAULT NULL COMMENT '销售区域',
  `annual_waste` float unsigned DEFAULT NULL COMMENT '年度废料量',
  `detail` varchar(500) DEFAULT NULL COMMENT '详情描述',
  `tax_cert` varchar(50) DEFAULT NULL COMMENT '税务登记证号',
  `trading_cert` varchar(50) DEFAULT NULL COMMENT '营业执照号',
  `company_nature` int(10) unsigned DEFAULT NULL COMMENT '企业性质',
  `tax_type` int(10) unsigned DEFAULT NULL COMMENT '税票类型',
  `settle_way` int(10) unsigned DEFAULT NULL COMMENT '结算方式',
  `back_percent` int(10) unsigned DEFAULT NULL COMMENT '分成比例(%)',
  `month_receivable` int(10) unsigned DEFAULT '0' COMMENT '月结算服务 1是 0不是',
  `statements_json` json DEFAULT NULL COMMENT '客户的结算基础资料（json格式）',
  `is_hide_zero` tinyint(1) NOT NULL DEFAULT '0' COMMENT '对账单是否屏蔽为零的项：0--不屏蔽     1--屏蔽',
  `is_separate` tinyint(1) NOT NULL DEFAULT '0' COMMENT '对账单是否收付款分离： 0--不分离    1--分离',
  `black_state` int(10) DEFAULT '0' COMMENT '重点关注客户',
  `sign_company_id` int(10) DEFAULT '0' COMMENT '签约公司id',
  `tax` decimal(5,2) DEFAULT '0.00' COMMENT '税率',
  `state` enum('black','consult','draft','enabled') NOT NULL DEFAULT 'draft' COMMENT '状态:black=黑名单,consult=客户咨询,draft=草稿,enabled=已提交',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4749 DEFAULT CHARSET=utf8 COMMENT='客户表';

-- ----------------------------
-- Table structure for uct_waste_customer_factory
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_customer_factory`;
CREATE TABLE `uct_waste_customer_factory` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `customer_id` int(10) unsigned NOT NULL COMMENT '客户ID',
  `province` varchar(50) NOT NULL DEFAULT '' COMMENT '省份',
  `city` varchar(50) NOT NULL DEFAULT '' COMMENT '城市',
  `area` varchar(50) NOT NULL DEFAULT '' COMMENT '区域',
  `detail_address` varchar(255) NOT NULL DEFAULT '' COMMENT '详细地址',
  `linkman` varchar(50) NOT NULL DEFAULT '' COMMENT '联系人',
  `job` varchar(50) NOT NULL DEFAULT '' COMMENT '职务',
  `mobile` char(15) NOT NULL DEFAULT '' COMMENT '联系电话',
  `email` varchar(50) NOT NULL DEFAULT '' COMMENT '邮箱',
  `adcode` int(11) NOT NULL DEFAULT '0' COMMENT '行政区域编码',
  `position` varchar(255) NOT NULL DEFAULT '0,0' COMMENT '坐标点',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2072 DEFAULT CHARSET=utf8 COMMENT='客户工厂表';

-- ----------------------------
-- Table structure for uct_waste_customer_gathering
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_customer_gathering`;
CREATE TABLE `uct_waste_customer_gathering` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `customer_id` int(10) unsigned NOT NULL COMMENT '客户ID',
  `ec_linkid` varchar(50) NOT NULL DEFAULT '' COMMENT 'ec联系人id',
  `index` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT '顺序',
  `receiver` varchar(50) DEFAULT NULL COMMENT '收款人',
  `bank_account` varchar(50) DEFAULT NULL COMMENT '银行账号',
  `deposit_bank` varchar(100) DEFAULT NULL COMMENT '开户银行',
  `deposit_address` varchar(255) DEFAULT '' COMMENT '开户地址',
  `type` varchar(10) DEFAULT 'public',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  `status` varchar(30) DEFAULT 'normal' COMMENT '状态 normal正常  hidden隐藏',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1070 DEFAULT CHARSET=utf8 COMMENT='客户收款信息表';

-- ----------------------------
-- Table structure for uct_waste_customer_linkman
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_customer_linkman`;
CREATE TABLE `uct_waste_customer_linkman` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `customer_id` int(10) unsigned NOT NULL COMMENT '客户ID',
  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '姓名',
  `job` varchar(50) NOT NULL DEFAULT '' COMMENT '职务',
  `mobile` char(15) NOT NULL DEFAULT '' COMMENT '联系电话',
  `email` varchar(50) NOT NULL DEFAULT '' COMMENT '邮箱',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=819 DEFAULT CHARSET=utf8 COMMENT='客户联系人表';

-- ----------------------------
-- Table structure for uct_waste_customer_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_customer_log`;
CREATE TABLE `uct_waste_customer_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '操作者ID',
  `customer_id` int(10) unsigned NOT NULL COMMENT '客户ID',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `state_value` varchar(50) NOT NULL DEFAULT '' COMMENT '状态值',
  `state_text` varchar(50) NOT NULL DEFAULT '' COMMENT '状态文字',
  `ip` varchar(50) NOT NULL DEFAULT '' COMMENT '操作者IP',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1268 DEFAULT CHARSET=utf8 COMMENT='客户状态记录表';

-- ----------------------------
-- Table structure for uct_waste_evaluate
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_evaluate`;
CREATE TABLE `uct_waste_evaluate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `customer_id` int(10) unsigned NOT NULL COMMENT '客户ID',
  `incharge` varchar(50) NOT NULL DEFAULT '' COMMENT '客户负责人',
  `mobile` char(15) NOT NULL DEFAULT '' COMMENT '联系电话',
  `salesman_id` int(10) unsigned NOT NULL COMMENT '业务员ID',
  `fillin_date` date DEFAULT NULL COMMENT '填写日期',
  `waste_type` int(10) unsigned DEFAULT NULL COMMENT '废料类型ID',
  `is_mix_stack` enum('1','0') DEFAULT NULL COMMENT '是否混堆:1=是,0=否',
  `mix_stack_detail` varchar(500) DEFAULT NULL COMMENT '混堆情况',
  `impurity` varchar(100) DEFAULT NULL COMMENT '杂质情况',
  `third_test` enum('1','0') DEFAULT NULL COMMENT '第三方检测:1=需要,0=不需要',
  `test_fee` enum('1','0') DEFAULT NULL COMMENT '检测费用:1=承担,0=不承担',
  `stack_area` float unsigned DEFAULT NULL COMMENT '堆放面积(平方)',
  `daily_waste` float unsigned DEFAULT NULL COMMENT '日均排废量(吨/天)',
  `low_monthly_waste` float unsigned DEFAULT NULL COMMENT '淡季月均处理量(吨/月)',
  `high_monthly_waste` float unsigned DEFAULT NULL COMMENT '旺季月均处理量(吨/月)',
  `detail_type` varchar(500) DEFAULT NULL COMMENT '详细种类',
  `physical_state` varchar(100) DEFAULT NULL COMMENT '物理状态',
  `weigh_tool` varchar(100) DEFAULT NULL COMMENT '计量工具',
  `weigh_detail` varchar(500) DEFAULT NULL COMMENT '客户计量方法详情',
  `produce_deal` varchar(255) DEFAULT NULL COMMENT '产生部门处理方式',
  `collect_deal` varchar(255) DEFAULT NULL COMMENT '收集部门处理方式',
  `sell_deal` varchar(255) DEFAULT NULL COMMENT '售出部门处理方式',
  `loading_scene` varchar(100) DEFAULT NULL COMMENT '装卸现场',
  `loading_help` varchar(100) DEFAULT NULL COMMENT '能提供的装卸协助',
  `transport_way` varchar(100) DEFAULT NULL COMMENT '运输方式',
  `danger_item` varchar(100) DEFAULT NULL COMMENT '危险品',
  `operate_risk` varchar(100) DEFAULT NULL COMMENT '操作安全风险',
  `scene_images` varchar(1500) DEFAULT NULL COMMENT '现场图片',
  `secretout_risk` varchar(500) DEFAULT NULL COMMENT '泄密风险点',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='废料评测表';

-- ----------------------------
-- Table structure for uct_waste_hazardous_cate
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_hazardous_cate`;
CREATE TABLE `uct_waste_hazardous_cate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `creater_id` int(10) DEFAULT NULL COMMENT '创建者id',
  `code` varchar(10) DEFAULT '' COMMENT '危废的code',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '危废的名称',
  `description` varchar(255) DEFAULT '' COMMENT '描述',
  `is_use` tinyint(1) DEFAULT '1' COMMENT '是否使用(1--使用  0--禁用)',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='危废的名称';

-- ----------------------------
-- Table structure for uct_waste_message
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_message`;
CREATE TABLE `uct_waste_message` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `from_user` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '发送者ID',
  `to_user` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '接收者ID',
  `type` enum('default','purchase','sell','customer','evaluate','report') NOT NULL DEFAULT 'default' COMMENT '类型:default=默认,purchase=采购,sell=销售,customer=客户,evaluate=废料评测,report=评测报告',
  `target_id` int(10) unsigned DEFAULT NULL COMMENT '目标ID',
  `level` enum('info','warning') NOT NULL DEFAULT 'info' COMMENT '等级:info=提醒,warning=警告',
  `content` varchar(500) NOT NULL DEFAULT '' COMMENT '通知内容',
  `is_read` enum('1','0') NOT NULL DEFAULT '0' COMMENT '状态:1=已读,0=未读',
  `readtime` int(10) unsigned DEFAULT NULL COMMENT '阅读时间',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=56947 DEFAULT CHARSET=utf8 COMMENT='废料通知表';

-- ----------------------------
-- Table structure for uct_waste_prestock
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_prestock`;
CREATE TABLE `uct_waste_prestock` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `cate_id` int(10) unsigned NOT NULL COMMENT '废料分类ID',
  `prestock_weigh` int(15) unsigned NOT NULL COMMENT '期初库存量',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='期初库存表';

-- ----------------------------
-- Table structure for uct_waste_prestock_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_prestock_log`;
CREATE TABLE `uct_waste_prestock_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '操作人ID',
  `cate_id` int(10) unsigned NOT NULL COMMENT '废料分类ID',
  `regulation` enum('1','0') NOT NULL COMMENT '增减状态(1=增加，0=减少）',
  `reconcilie_weigh` int(10) unsigned NOT NULL COMMENT '调帐重量',
  `ip` varchar(50) NOT NULL COMMENT '操作人IP',
  `create time` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='期初库存修改记录表';

-- ----------------------------
-- Table structure for uct_waste_printer
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_printer`;
CREATE TABLE `uct_waste_printer` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `type` int(11) DEFAULT '0' COMMENT '打印类型(0 无类型，1 财务打印销售信息)',
  `key_id` int(11) NOT NULL DEFAULT '0' COMMENT '外键 id',
  `key_active` tinyint(1) DEFAULT '1' COMMENT '记录激活状态，1为激活，0 为关闭状态',
  `key_status` tinyint(1) DEFAULT '0' COMMENT '打印记录 ( 0 仅记录 1 仅发送 2 others )',
  `key_img` varchar(255) DEFAULT NULL COMMENT '图片地址',
  `key_others` varchar(255) DEFAULT NULL COMMENT '其他备注',
  `create_time` int(11) DEFAULT NULL COMMENT '请求时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_waste_purchase
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_purchase`;
CREATE TABLE `uct_waste_purchase` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `branch_id` int(10) unsigned NOT NULL COMMENT '分部ID',
  `order_id` varchar(50) NOT NULL COMMENT '单号',
  `customer_id` int(10) unsigned NOT NULL COMMENT '客户ID',
  `seller_id` int(10) unsigned NOT NULL COMMENT '下单人ID',
  `seller_remark` varchar(255) DEFAULT NULL COMMENT '下单人留言',
  `factory_id` int(10) unsigned DEFAULT NULL COMMENT '工厂地址ID',
  `cargo_sort_data` enum('1','0') NOT NULL DEFAULT '0' COMMENT '货品分拣情况:1=已分拣,0=未分拣',
  `cargo_type` varchar(255) DEFAULT NULL COMMENT '货品类型',
  `cargo_count` int(10) unsigned DEFAULT NULL COMMENT '货品总数',
  `cargo_images` varchar(1500) DEFAULT NULL COMMENT '货品堆放情况',
  `cargo_pick_date` datetime DEFAULT NULL COMMENT '提货日期',
  `manager_id` int(10) unsigned DEFAULT NULL COMMENT '业务经理ID',
  `is_move` tinyint(3) unsigned DEFAULT '0' COMMENT '是否移动采购',
  `hand_mouth_data` enum('1','0') DEFAULT '0' COMMENT '是否现买现卖:1=是,0=否',
  `give_frame` enum('1','0') DEFAULT '0' COMMENT '是否送框流程:1=是,0=否',
  `purchase_id` int(10) unsigned DEFAULT NULL COMMENT '关联的采购订单ID',
  `locale_sort_data` enum('1','0') DEFAULT NULL COMMENT '是否现场分拣:1=是,0=否',
  `purchase_incharge` int(10) unsigned DEFAULT NULL COMMENT '采购负责人ID',
  `sell_incharge` int(10) unsigned DEFAULT NULL COMMENT '销售负责人ID',
  `purchase_time` datetime DEFAULT NULL COMMENT '采购时间',
  `floater_ids` varchar(100) DEFAULT NULL COMMENT '临时工IDS',
  `ofld_ids` varchar(100) DEFAULT NULL COMMENT '拉货助理ids',
  `driver_id` int(10) unsigned DEFAULT NULL COMMENT '司机ID',
  `map_trail` text COMMENT '地图轨迹',
  `car_type` int(10) unsigned DEFAULT NULL COMMENT '车辆类型',
  `plate_number` varchar(255) DEFAULT NULL COMMENT '车牌号码',
  `train_number` float(10,2) DEFAULT '1.00' COMMENT '车次',
  `allot_remark` varchar(255) DEFAULT NULL COMMENT '分配留言',
  `apply_materiel_picktime` datetime DEFAULT NULL COMMENT '申请提取辅材时间',
  `apply_materiel_warehouse` int(10) unsigned DEFAULT NULL COMMENT '申请辅材仓库分点',
  `apply_materiel_remark` varchar(255) DEFAULT NULL COMMENT '申请辅材留言',
  `pick_materiel_remark` varchar(255) DEFAULT NULL COMMENT '提取辅材留言',
  `materiel_price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '辅材费用',
  `cargo_pick_remark` varchar(255) DEFAULT NULL COMMENT '提货留言',
  `cargo_pick_images` varchar(1500) DEFAULT NULL COMMENT '提货图片',
  `cargo_price` float(10,3) DEFAULT NULL COMMENT '货品费用(元)',
  `cargo_weight` float unsigned DEFAULT NULL COMMENT '货品净重(kg)',
  `purchase_expense` float(10,2) DEFAULT NULL COMMENT '采购开支(元)',
  `is_cash_pay` tinyint(1) unsigned DEFAULT NULL COMMENT '是否现付:1=是,0=否',
  `is_sorting` tinyint(1) unsigned DEFAULT '1' COMMENT '是否上分拣线:1=是,0=否',
  `terminal_type` tinyint(1) unsigned DEFAULT '1' COMMENT '1为erp下单  2为客户端下单',
  `gathering_id` int(10) unsigned DEFAULT NULL COMMENT '收款信息ID',
  `is_evaluate_data` enum('1','0') DEFAULT '0' COMMENT '是否已评价:1=是,0=否',
  `sort_point` int(10) unsigned DEFAULT NULL COMMENT '分拣点',
  `storage_price` float(10,2) DEFAULT NULL COMMENT '入库交接费用(元)',
  `connect_weight` float(10,2) DEFAULT '0.00' COMMENT '交接总重',
  `connect_tare` float(10,2) DEFAULT '0.00' COMMENT '交接皮重',
  `storage_remark` varchar(255) DEFAULT NULL COMMENT '入库留言',
  `connect_remark` varchar(255) DEFAULT NULL COMMENT '确认交接留言',
  `return_fee` float(10,2) DEFAULT NULL COMMENT '报销费用(元)',
  `sort_man` varchar(50) DEFAULT NULL COMMENT '分拣人员',
  `sort_remark` varchar(255) DEFAULT NULL COMMENT '分拣留言',
  `sort_expense` float(10,2) DEFAULT NULL COMMENT '分拣费用(元)',
  `cargo_commission` decimal(5,2) DEFAULT '0.00' COMMENT '货品提成单价',
  `storage_weight` float unsigned DEFAULT NULL COMMENT '入库净重(kg)',
  `sorting_valuable_weight` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '分拣有价废弃物',
  `weigh_valuable_weight` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '过磅有价废弃物',
  `sorting_unvaluable_weight` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '分拣无价废弃物',
  `weigh_unvaluable_weight` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '过磅无价废弃物',
  `sorting_unit_cargo_price` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '有价分拣提成单价',
  `weigh_unit_cargo_price` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '有价过磅提成单价',
  `sorting_unit_labor_price` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '分拣基础人工单价',
  `weigh_unit_labor_price` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '过磅基础人工单价',
  `warehouse_unit_cost` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '仓储成本单价',
  `total_cargo_price` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '有价提成总价',
  `total_labor_price` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '基础人工总价',
  `warehouse_cost` decimal(10,3) unsigned DEFAULT '0.000' COMMENT '仓储成本',
  `storage_cargo_price` float(20,3) DEFAULT NULL COMMENT '入库货品净重',
  `storage_confirm_remark` varchar(255) DEFAULT NULL COMMENT '入库确认留言',
  `tags` varchar(20) DEFAULT '' COMMENT '订单标签 3未匹配 2逾期 1客诉',
  `overdue_time` int(10) DEFAULT NULL COMMENT '逾期时间',
  `state` enum('draft','wait_allot','wait_receive_order','wait_apply_materiel','wait_pick_materiel','wait_signin_materiel','wait_pick_cargo','wait_pay','wait_storage_connect','wait_storage_connect_confirm','wait_storage_sort','wait_storage_confirm','wait_return_fee','wait_confirm_return_fee','finish','cancel','receivable') NOT NULL DEFAULT 'draft' COMMENT '状态:draft=草稿,wait_allot=待分配,wait_receive_order=待接单,wait_apply_materiel=待申请辅材,wait_pick_materiel=待提取辅材,wait_signin_materiel=待签收辅材,wait_pick_cargo=待提货,wait_pay=待付款,wait_storage_connect=待入库交接,wait_storage_connect_confirm=待确认交接,wait_storage_sort=待分拣入库,wait_storage_confirm=待入库确认,wait_confirm_return_fee=待审核订单,finish=交易完成,cancel=订单取消',
  `audit_state` enum('draft','waiting','review','finish') DEFAULT 'draft' COMMENT '入库审核状态： draft = 初始状态， waiting = 待审核状态，review = 审核中， finish = 审核完成 ',
  `bill_state` tinyint(4) NOT NULL DEFAULT '0' COMMENT '水单状态 0=待上传水单  1=待钉钉审核  2=待付款  3=完成 ',
  `prop_ratio` decimal(10,3) unsigned NOT NULL DEFAULT '1.000' COMMENT '对账单的分成比率',
  `print_num` int(11) NOT NULL DEFAULT '0' COMMENT '打印次数',
  `forensics_time` int(10) DEFAULT NULL COMMENT '取证的时间',
  `forensics_info` json DEFAULT NULL COMMENT '取证的内容',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `order_id` (`order_id`) USING BTREE,
  KEY `branch_id` (`branch_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=139474 DEFAULT CHARSET=utf8 COMMENT='采购订单表';

-- ----------------------------
-- Table structure for uct_waste_purchase_cargo
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_purchase_cargo`;
CREATE TABLE `uct_waste_purchase_cargo` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `cate_id` int(10) unsigned DEFAULT NULL COMMENT '废料分类ID',
  `cargo_name` varchar(50) NOT NULL DEFAULT '' COMMENT '品名',
  `total_weight` float unsigned DEFAULT NULL COMMENT '总重(kg)',
  `rough_weight` float unsigned DEFAULT NULL COMMENT '毛重(kg)',
  `net_weight` float unsigned DEFAULT NULL COMMENT '净重(kg)',
  `storage_net_weight` float unsigned DEFAULT NULL COMMENT '入库净重(kg)  交接净重',
  `unit_price` float(10,3) DEFAULT NULL COMMENT '成交报价(元/kg)',
  `total_price` float(10,3) DEFAULT NULL COMMENT '总价(元)',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=10341 DEFAULT CHARSET=utf8 COMMENT='采购货品表';

-- ----------------------------
-- Table structure for uct_waste_purchase_evaluate
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_purchase_evaluate`;
CREATE TABLE `uct_waste_purchase_evaluate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `content` varchar(500) NOT NULL DEFAULT '' COMMENT '评价内容',
  `remove_fast_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '清运及时评分',
  `remove_level_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '清运程度评分',
  `service_attitude_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '服务态度评分',
  `linktime` date DEFAULT NULL COMMENT '联系时间',
  `cause` varchar(50) NOT NULL DEFAULT '' COMMENT '原因',
  `cause_resume` text COMMENT '原因简述',
  `conclusion` text COMMENT '沟通结果',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `purchase_id` (`purchase_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2324 DEFAULT CHARSET=utf8 COMMENT='采购评价表';

-- ----------------------------
-- Table structure for uct_waste_purchase_expense
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_purchase_expense`;
CREATE TABLE `uct_waste_purchase_expense` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `type` enum('in','out') DEFAULT NULL COMMENT '类型:in=收入,out=支出',
  `usage` varchar(50) NOT NULL DEFAULT '' COMMENT '用途',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '价格(元)',
  `receiver` varchar(50) NOT NULL DEFAULT '' COMMENT '领款人',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=560 DEFAULT CHARSET=utf8 COMMENT='采购开支表';

-- ----------------------------
-- Table structure for uct_waste_purchase_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_purchase_log`;
CREATE TABLE `uct_waste_purchase_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '操作者ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `state_value` varchar(50) NOT NULL DEFAULT '' COMMENT '状态值',
  `state_text` varchar(50) NOT NULL DEFAULT '' COMMENT '状态文字',
  `is_timeline_data` enum('1','0') DEFAULT NULL COMMENT '是否在时间轴展示:1=是,0=否',
  `ip` varchar(50) NOT NULL DEFAULT '' COMMENT '操作者IP',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `state_value_2` (`state_value`,`createtime`) USING BTREE,
  KEY `purchase_id` (`purchase_id`,`state_value`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=25475 DEFAULT CHARSET=utf8 COMMENT='采购状态记录表';

-- ----------------------------
-- Table structure for uct_waste_purchase_materiel
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_purchase_materiel`;
CREATE TABLE `uct_waste_purchase_materiel` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `materiel_id` int(10) unsigned DEFAULT NULL COMMENT '辅材id',
  `type` varchar(50) NOT NULL DEFAULT '' COMMENT '类型',
  `amount` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '数量',
  `inside_price` float(19,2) unsigned NOT NULL DEFAULT '0.00' COMMENT '辅材单价',
  `pick_amount` int(10) unsigned DEFAULT NULL COMMENT '出库数量',
  `storage_amount` int(10) unsigned DEFAULT '0' COMMENT '入库数量',
  `pick_materiel_number` text COMMENT '出库物料编码',
  `storage_materiel_number` text COMMENT '入库物料编码',
  `use_type` tinyint(3) unsigned DEFAULT '0' COMMENT '0:采购,1:分拣入库使用',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `purchase_id` (`purchase_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5894 DEFAULT CHARSET=utf8 COMMENT='采购订单辅材表';

-- ----------------------------
-- Table structure for uct_waste_purchase_payment_voucher
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_purchase_payment_voucher`;
CREATE TABLE `uct_waste_purchase_payment_voucher` (
  `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) NOT NULL COMMENT '采购ID',
  `pay_from` varchar(20) NOT NULL COMMENT 'bank-transfer: 银行转账, wx-native: 微信扫码支付, wx-micropay:微信付款码支付',
  `payment_amount` decimal(6,2) NOT NULL COMMENT '付款金额',
  `payment_voucher` json DEFAULT NULL COMMENT '付款凭证, 银行转账记水单图片上传url, 微信记录支付单号',
  `createtime` int(10) DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for uct_waste_quote_prices_table
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_quote_prices_table`;
CREATE TABLE `uct_waste_quote_prices_table` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_day` varchar(30) DEFAULT NULL COMMENT '日期',
  `cate_type` varchar(30) DEFAULT '' COMMENT '类型',
  `region` varchar(30) DEFAULT '' COMMENT '地区',
  `cate_name` varchar(100) DEFAULT '' COMMENT '品名',
  `max_price` decimal(50,2) DEFAULT '0.00' COMMENT '最高价',
  `min_price` decimal(50,2) DEFAULT '0.00' COMMENT '最低价',
  `rise_fall` varchar(50) DEFAULT '' COMMENT '涨跌',
  `memo` varchar(255) DEFAULT '' COMMENT '备注',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=666 DEFAULT CHARSET=utf8 COMMENT='报价行情指数表';

-- ----------------------------
-- Table structure for uct_waste_report
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_report`;
CREATE TABLE `uct_waste_report` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `customer_id` int(10) unsigned NOT NULL COMMENT '客户ID',
  `evaluate_id` int(10) unsigned NOT NULL COMMENT '废料评测ID',
  `evaluate_info` text COMMENT '评测详情',
  `stack_problem` varchar(500) DEFAULT NULL COMMENT '堆放问题点描述',
  `stack_standard` varchar(500) DEFAULT NULL COMMENT '最佳堆放标准',
  `stack_standard_images` varchar(1500) DEFAULT NULL COMMENT '堆放标准图片',
  `detail_type` text COMMENT '种类详情',
  `weigh_problem` varchar(1000) DEFAULT NULL COMMENT '计量问题描述',
  `weigh_standard` varchar(1000) DEFAULT NULL COMMENT '计量标准',
  `produce_deal_problem` varchar(1000) DEFAULT NULL COMMENT '产生部门处理方式的问题',
  `collect_deal_problem` varchar(1000) DEFAULT NULL COMMENT '收集部门处理方式的问题',
  `sell_deal_problem` varchar(1000) DEFAULT NULL COMMENT '售出部门处理方式的问题',
  `deal_standard_images` varchar(1500) DEFAULT NULL COMMENT '处理标准图片',
  `secret_promise` varchar(1000) DEFAULT NULL COMMENT '保密承诺',
  `third_test_company` varchar(100) DEFAULT NULL COMMENT '第三方检测公司',
  `test_fee` float(10,2) unsigned DEFAULT NULL COMMENT '检测费用',
  `test_purity` float unsigned DEFAULT NULL COMMENT '检测含量',
  `changed_recovery` float unsigned DEFAULT NULL COMMENT '整改后回收率估算',
  `problem_summary` varchar(1000) DEFAULT NULL COMMENT '问题点综述',
  `improve_way` varchar(1000) DEFAULT NULL COMMENT '改善措施',
  `improved_expect` varchar(1000) DEFAULT NULL COMMENT '改善预计',
  `audit_opinion` varchar(500) NOT NULL DEFAULT '' COMMENT '领导意见',
  `is_latest` enum('1','0') NOT NULL DEFAULT '1' COMMENT '是否最新:1=是,0=否',
  `state` enum('draft','wait_audit','un_audit','audited') NOT NULL DEFAULT 'draft' COMMENT '状态:draft=草稿,wait_audit=待审核,un_audit=审核未通过,audited=审核通过',
  `submittime` int(10) unsigned DEFAULT NULL COMMENT '提交时间',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='评测报告表';

-- ----------------------------
-- Table structure for uct_waste_report_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_report_log`;
CREATE TABLE `uct_waste_report_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '操作者ID',
  `report_id` int(10) unsigned NOT NULL COMMENT '评测报告ID',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `state_value` varchar(50) NOT NULL DEFAULT '' COMMENT '状态值',
  `state_text` varchar(50) NOT NULL DEFAULT '' COMMENT '状态文字',
  `ip` varchar(50) NOT NULL DEFAULT '' COMMENT '操作者IP',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='评测报告状态记录表';

-- ----------------------------
-- Table structure for uct_waste_sell
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell`;
CREATE TABLE `uct_waste_sell` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `branch_id` int(10) unsigned NOT NULL COMMENT '分部ID',
  `purchase_id` int(10) unsigned DEFAULT NULL COMMENT '采购ID',
  `is_move` tinyint(3) unsigned DEFAULT '0' COMMENT '是否移动',
  `move_purchase_incharge` int(10) unsigned DEFAULT '0' COMMENT '采购负责人',
  `order_id` varchar(50) NOT NULL COMMENT '单号',
  `customer_id` int(10) unsigned DEFAULT NULL COMMENT '客户ID',
  `customer_linkman_id` int(10) unsigned DEFAULT NULL COMMENT '客户对接人ID',
  `seller_id` int(10) unsigned NOT NULL COMMENT '下单人ID',
  `seller_remark` varchar(255) DEFAULT NULL COMMENT '下单人留言',
  `warehouse_id` int(10) unsigned DEFAULT NULL COMMENT '出货仓库ID',
  `cargo_pick_time` datetime DEFAULT NULL COMMENT '提货时间',
  `car_number` varchar(50) DEFAULT NULL COMMENT '车牌号',
  `car_weight` float unsigned DEFAULT NULL COMMENT '车辆皮重(吨)',
  `cargo_price` float(10,3) DEFAULT NULL COMMENT '货品费用(元)',
  `cargo_weight` float(11,3) DEFAULT NULL COMMENT '货品重量(kg)',
  `materiel_price` float(10,2) DEFAULT NULL COMMENT '辅材费用(元)',
  `other_price` float(10,2) DEFAULT NULL COMMENT '其他费用(元)',
  `cargo_out_remark` varchar(255) DEFAULT NULL COMMENT '出货留言',
  `pay_way_id` int(10) unsigned DEFAULT NULL COMMENT '打款方式ID',
  `customer_evaluate_data` enum('1','0') DEFAULT NULL COMMENT '客户是否已评价:1=是,0=否',
  `seller_evaluate_data` enum('1','0') DEFAULT NULL COMMENT '销售是否已评价:1=是,0=否',
  `state` enum('wait_commit_order','draft','wait_weigh','wait_confirm_order','wait_pay','wait_confirm_gather','finish','cancel') NOT NULL DEFAULT 'draft' COMMENT '状态:wait_commit_order=待提交订单,draft=草稿,wait_weigh=待称重,wait_confirm_order=待确认订单,wait_pay=待付款,wait_confirm_gather=待确认收款,finish=交易完成,cancel订单取消',
  `bill_state` tinyint(4) NOT NULL DEFAULT '0' COMMENT '水单状态 0=待上传水单  1=待付款  3=完成',
  `fzt_state` tinyint(4) NOT NULL DEFAULT '0' COMMENT '废纸通关联状态 0未管理 1关联',
  `print_num` int(11) NOT NULL DEFAULT '0' COMMENT '打印次数',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `order_id` (`order_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=28624 DEFAULT CHARSET=utf8 COMMENT='销售订单表';

-- ----------------------------
-- Table structure for uct_waste_sell_cargo
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell_cargo`;
CREATE TABLE `uct_waste_sell_cargo` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `sell_id` int(10) unsigned NOT NULL COMMENT '销售ID',
  `cate_id` int(10) unsigned DEFAULT NULL COMMENT '废品分类ID',
  `plan_sell_weight` float unsigned DEFAULT NULL COMMENT '预售出货重量(kg)',
  `total_weight` float unsigned DEFAULT NULL COMMENT '出货总重(kg)',
  `rough_weight` float unsigned DEFAULT NULL COMMENT '出货毛重(kg)',
  `net_weight` float unsigned DEFAULT NULL COMMENT '出货净重(kg)',
  `unit_price` float(10,3) DEFAULT NULL COMMENT '单价(元/kg)',
  `level` varchar(50) DEFAULT 'standard' COMMENT '等级',
  `images` varchar(500) DEFAULT '' COMMENT '图片列表',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1706 DEFAULT CHARSET=utf8 COMMENT='销售货品表';

-- ----------------------------
-- Table structure for uct_waste_sell_customer_evaluate
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell_customer_evaluate`;
CREATE TABLE `uct_waste_sell_customer_evaluate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `sell_id` int(10) unsigned NOT NULL COMMENT '销售ID',
  `content` varchar(500) NOT NULL DEFAULT '' COMMENT '评价内容',
  `remove_fast_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '清运及时评分',
  `remove_level_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '清运程度评分',
  `service_attitude_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '服务态度评分',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='销售订单客户评价表';

-- ----------------------------
-- Table structure for uct_waste_sell_evidence_voucher
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell_evidence_voucher`;
CREATE TABLE `uct_waste_sell_evidence_voucher` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '付款凭证ID',
  `sell_id` int(11) DEFAULT NULL COMMENT '销售号ID',
  `img_url` json DEFAULT NULL COMMENT '付款凭证图片URL',
  `active` tinyint(2) DEFAULT '1' COMMENT '有效标志',
  `print_flag` tinyint(2) DEFAULT '0' COMMENT '打印标志',
  `create_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间戳',
  `update_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间戳',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `sell_id` (`sell_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=266 DEFAULT CHARSET=utf8 COMMENT='销售付款凭证记录表';

-- ----------------------------
-- Table structure for uct_waste_sell_log
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell_log`;
CREATE TABLE `uct_waste_sell_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '操作者ID',
  `sell_id` int(10) unsigned NOT NULL COMMENT '销售ID',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `state_value` varchar(50) NOT NULL DEFAULT '' COMMENT '状态值',
  `state_text` varchar(50) NOT NULL DEFAULT '' COMMENT '状态文字',
  `is_timeline_data` enum('1','0') DEFAULT NULL COMMENT '是否在时间轴展示:1=是,0=否',
  `ip` varchar(50) NOT NULL DEFAULT '' COMMENT '操作者IP',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6051 DEFAULT CHARSET=utf8 COMMENT='销售状态记录表';

-- ----------------------------
-- Table structure for uct_waste_sell_materiel
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell_materiel`;
CREATE TABLE `uct_waste_sell_materiel` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `sell_id` int(10) unsigned NOT NULL COMMENT '销售ID',
  `materiel_id` int(10) unsigned DEFAULT NULL COMMENT '辅材id',
  `type` varchar(50) NOT NULL DEFAULT '' COMMENT '类型',
  `pick_amount` int(10) unsigned DEFAULT NULL COMMENT '出库数量',
  `unit_price` float(10,2) DEFAULT NULL COMMENT '实际外部销售单价(元/kg)',
  `outside_price` float(10,2) DEFAULT '0.00' COMMENT '外部销售单价',
  `materiel_number` text COMMENT '物料编码',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=470 DEFAULT CHARSET=utf8 COMMENT='销售订单辅材表';

-- ----------------------------
-- Table structure for uct_waste_sell_other_price
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell_other_price`;
CREATE TABLE `uct_waste_sell_other_price` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `sell_id` int(10) unsigned NOT NULL COMMENT '销售ID',
  `type` enum('in','out','inout') DEFAULT NULL COMMENT '类型:in=收入,out=支出,inout下游支出',
  `usage` varchar(50) NOT NULL DEFAULT '' COMMENT '用途',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '价格(元)',
  `receiver` varchar(50) NOT NULL DEFAULT '' COMMENT '领款人',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1049 DEFAULT CHARSET=utf8 COMMENT='销售订单其他费用表';

-- ----------------------------
-- Table structure for uct_waste_sell_seller_evaluate
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_sell_seller_evaluate`;
CREATE TABLE `uct_waste_sell_seller_evaluate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `sell_id` int(10) unsigned NOT NULL COMMENT '销售ID',
  `content` varchar(500) NOT NULL DEFAULT '' COMMENT '评价内容',
  `remove_fast_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '清运及时评分',
  `remove_level_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '清运程度评分',
  `service_attitude_star` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '服务态度评分',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='销售订单销售评价表';

-- ----------------------------
-- Table structure for uct_waste_settings
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_settings`;
CREATE TABLE `uct_waste_settings` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `group` varchar(50) DEFAULT NULL COMMENT '分组',
  `setting_key` int(10) unsigned DEFAULT NULL COMMENT '配置键',
  `setting_value` varchar(50) NOT NULL DEFAULT '' COMMENT '配置值',
  `image` varchar(100) DEFAULT NULL COMMENT '图片',
  `remark` varchar(100) DEFAULT NULL COMMENT '备注',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `state` enum('1','0') NOT NULL DEFAULT '1' COMMENT '状态:1=启用,0=禁用',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `group` (`group`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=341 DEFAULT CHARSET=utf8 COMMENT='废料配置表';

-- ----------------------------
-- Table structure for uct_waste_settings_bak
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_settings_bak`;
CREATE TABLE `uct_waste_settings_bak` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `group` varchar(50) DEFAULT NULL COMMENT '分组',
  `setting_key` int(10) unsigned DEFAULT NULL COMMENT '配置键',
  `setting_value` varchar(50) NOT NULL DEFAULT '' COMMENT '配置值',
  `image` varchar(100) DEFAULT NULL COMMENT '图片',
  `remark` varchar(100) DEFAULT NULL COMMENT '备注',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `state` enum('1','0') NOT NULL DEFAULT '1' COMMENT '状态:1=启用,0=禁用',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=218 DEFAULT CHARSET=utf8 COMMENT='废料配置表';

-- ----------------------------
-- Table structure for uct_waste_storage
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_storage`;
CREATE TABLE `uct_waste_storage` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `branch_id` int(10) unsigned NOT NULL COMMENT '分部ID',
  `cate_id` int(10) unsigned NOT NULL COMMENT '废料分类ID',
  `storage_weight` float NOT NULL DEFAULT '0' COMMENT '库存总重(kg)',
  `purchase_price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '回收均价(元)',
  `recent_sell_weight` float unsigned DEFAULT NULL COMMENT '最近出货量(kg)',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=442 DEFAULT CHARSET=utf8 COMMENT='库存信息表';

-- ----------------------------
-- Table structure for uct_waste_storage_audit
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_storage_audit`;
CREATE TABLE `uct_waste_storage_audit` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ware_id` int(11) DEFAULT NULL COMMENT '仓库ID',
  `branch_id` int(11) DEFAULT NULL COMMENT '分部ID',
  `FInterID` int(11) DEFAULT NULL COMMENT '订单内码ID',
  `order_id` varchar(20) NOT NULL COMMENT '订单号',
  `cate_id` int(11) DEFAULT NULL COMMENT '品类ID',
  `issue` varchar(255) DEFAULT NULL COMMENT '异常问题',
  `related` varchar(100) DEFAULT NULL COMMENT '相关的项目',
  `state` enum('start','canceled','pending','resolved') NOT NULL DEFAULT 'start' COMMENT '修正状态：  ''start'' -- 开始状态，''canceled'' -- 取消， ''pending'' -- 待处理，''resolved'' -- 已解决',
  `create_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updata_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COMMENT='数据员进销存审批物料详情 （入库数据差异的审批）  详情表';

-- ----------------------------
-- Table structure for uct_waste_storage_expense
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_storage_expense`;
CREATE TABLE `uct_waste_storage_expense` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `type` enum('in','out') DEFAULT NULL COMMENT '类型:in=收入,out=支出',
  `usage` varchar(50) NOT NULL DEFAULT '' COMMENT '用途',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '价格(元)',
  `receiver` varchar(50) NOT NULL DEFAULT '' COMMENT '领款人',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=164 DEFAULT CHARSET=utf8 COMMENT='入库费用表';

-- ----------------------------
-- Table structure for uct_waste_storage_return_fee
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_storage_return_fee`;
CREATE TABLE `uct_waste_storage_return_fee` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `type` enum('in','out') DEFAULT NULL COMMENT '类型:in=收入,out=支出',
  `usage` varchar(50) NOT NULL DEFAULT '' COMMENT '用途',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '价格(元)',
  `receiver` varchar(50) NOT NULL DEFAULT '' COMMENT '领款人',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2709 DEFAULT CHARSET=utf8 COMMENT='入库报销表';

-- ----------------------------
-- Table structure for uct_waste_storage_sort
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_storage_sort`;
CREATE TABLE `uct_waste_storage_sort` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '货品分拣备注',
  `cargo_sort` int(10) unsigned DEFAULT NULL COMMENT '品类id',
  `materiel_number` varchar(50) NOT NULL DEFAULT '' COMMENT '物料编码',
  `total_weight` float unsigned DEFAULT NULL COMMENT '总重(kg)',
  `rough_weight` float unsigned DEFAULT NULL COMMENT '毛重(kg)',
  `net_weight` float unsigned DEFAULT NULL COMMENT '入库净重(kg)',
  `presell_price` float(10,2) DEFAULT NULL COMMENT '预提销售单价(元/kg)',
  `disposal_way` varchar(20) DEFAULT 'sorting' COMMENT '处理方式: [sorting  分拣 / weighing  过磅]',
  `value_type` varchar(20) DEFAULT 'valuable' COMMENT '价值类型  valuable有价  unvaluable 无价',
  `sort_time` int(10) unsigned DEFAULT NULL COMMENT '分拣时间',
  `createtime` int(10) DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=12567 DEFAULT CHARSET=utf8 COMMENT='分拣入库表';

-- ----------------------------
-- Table structure for uct_waste_storage_sort_expense
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_storage_sort_expense`;
CREATE TABLE `uct_waste_storage_sort_expense` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `type` enum('in','out') DEFAULT NULL COMMENT '类型:in=收入,out=支出',
  `usage` varchar(50) NOT NULL DEFAULT '' COMMENT '用途',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `price` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '价格(元)',
  `receiver` varchar(50) NOT NULL DEFAULT '' COMMENT '领款人',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2801 DEFAULT CHARSET=utf8 COMMENT='分拣费用表';

-- ----------------------------
-- Table structure for uct_waste_storage_sort_out_group
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_storage_sort_out_group`;
CREATE TABLE `uct_waste_storage_sort_out_group` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `purchase_id` int(10) unsigned NOT NULL COMMENT '采购ID',
  `usage` varchar(50) NOT NULL DEFAULT '' COMMENT '用途',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `weight` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '价格(元)',
  `receiver` varchar(50) NOT NULL DEFAULT '' COMMENT '领款人',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='分拣费用表';

-- ----------------------------
-- Table structure for uct_waste_warehouse
-- ----------------------------
DROP TABLE IF EXISTS `uct_waste_warehouse`;
CREATE TABLE `uct_waste_warehouse` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) unsigned DEFAULT NULL COMMENT '负责人ID',
  `ids` varchar(50) DEFAULT '' COMMENT '负责人id列表',
  `parent_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '仓库ID',
  `branch_id` int(10) unsigned NOT NULL COMMENT '分部ID',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '名称',
  `province` varchar(50) NOT NULL DEFAULT '' COMMENT '省份',
  `capacity` decimal(10,2) DEFAULT NULL COMMENT '仓库容量',
  `city` varchar(50) NOT NULL DEFAULT '' COMMENT '城市',
  `area` varchar(50) NOT NULL DEFAULT '' COMMENT '区域',
  `detail_address` varchar(255) NOT NULL DEFAULT '' COMMENT '详细地址',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  `state` enum('1','0') NOT NULL DEFAULT '1' COMMENT '状态:1=启用,0=禁用',
  `createtime` int(10) unsigned DEFAULT NULL COMMENT '创建时间',
  `updatetime` int(10) unsigned DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `uct_waste_warehouse_idx_001` (`parent_id`) USING BTREE,
  KEY `uct_waste_warehouse_idx_002` (`branch_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=135 DEFAULT CHARSET=utf8 COMMENT='绿环仓库和分拣点表';

-- ----------------------------
-- Table structure for uct_wechat_applet
-- ----------------------------
DROP TABLE IF EXISTS `uct_wechat_applet`;
CREATE TABLE `uct_wechat_applet` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `admin_id` int(10) NOT NULL COMMENT '管理员ID',
  `appletid` varchar(50) NOT NULL COMMENT '微应用标识',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT '应用名称',
  `typedata` enum('serv_account','miniapp','sub_account') NOT NULL DEFAULT 'serv_account' COMMENT '应用类型:serv_account=服务号,miniapp=小程序,sub_account=订阅号',
  `token` varchar(100) NOT NULL DEFAULT '' COMMENT 'Token',
  `appid` varchar(255) NOT NULL DEFAULT '' COMMENT 'AppID',
  `appsecret` varchar(255) DEFAULT NULL COMMENT 'AppSecret',
  `aeskey` varchar(255) DEFAULT NULL COMMENT 'EncodingAESKey',
  `mchid` varchar(50) DEFAULT NULL COMMENT '商户号',
  `mchkey` varchar(50) DEFAULT NULL COMMENT '商户支付密钥',
  `notify_url` varchar(255) DEFAULT NULL COMMENT '微信支付异步通知',
  `principal` varchar(100) DEFAULT NULL COMMENT '主体名称',
  `original` varchar(50) DEFAULT NULL COMMENT '原始ID',
  `wechat` varchar(50) DEFAULT NULL COMMENT '微信号',
  `headface_image` varchar(255) DEFAULT NULL COMMENT '头像',
  `qrcode_image` varchar(255) DEFAULT NULL COMMENT '二维码图片',
  `signature` text COMMENT '账号介绍',
  `city` varchar(50) DEFAULT NULL COMMENT '省市',
  `state` enum('enable','disable','unaudit') NOT NULL DEFAULT 'enable' COMMENT '状态:enable=启用,disable=禁用,unaudit=未审核',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `deletetime` int(10) unsigned DEFAULT NULL COMMENT '删除时间',
  `weigh` int(10) NOT NULL DEFAULT '0' COMMENT '权重',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COMMENT='微应用表';

-- ----------------------------
-- Table structure for uct_wechat_autoreply
-- ----------------------------
DROP TABLE IF EXISTS `uct_wechat_autoreply`;
CREATE TABLE `uct_wechat_autoreply` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `appletid` varchar(50) NOT NULL COMMENT '所属应用标识',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '标题',
  `text` varchar(100) NOT NULL DEFAULT '' COMMENT '触发文本',
  `eventkey` varchar(50) NOT NULL DEFAULT '' COMMENT '响应事件',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '添加时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='微信自动回复表';

-- ----------------------------
-- Table structure for uct_wechat_config
-- ----------------------------
DROP TABLE IF EXISTS `uct_wechat_config`;
CREATE TABLE `uct_wechat_config` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `appletid` varchar(50) NOT NULL COMMENT '所属应用标识',
  `name` varchar(50) NOT NULL DEFAULT '' COMMENT '配置名称',
  `title` varchar(50) NOT NULL DEFAULT '' COMMENT '配置标题',
  `value` text NOT NULL COMMENT '配置值',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COMMENT='微信配置表';

-- ----------------------------
-- Table structure for uct_wechat_context
-- ----------------------------
DROP TABLE IF EXISTS `uct_wechat_context`;
CREATE TABLE `uct_wechat_context` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `openid` varchar(64) NOT NULL DEFAULT '',
  `type` varchar(30) NOT NULL DEFAULT '' COMMENT '类型',
  `eventkey` varchar(64) NOT NULL DEFAULT '',
  `command` varchar(64) NOT NULL DEFAULT '',
  `message` varchar(255) NOT NULL DEFAULT '' COMMENT '内容',
  `refreshtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最后刷新时间',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `openid` (`openid`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='微信上下文表';

-- ----------------------------
-- Table structure for uct_wechat_response
-- ----------------------------
DROP TABLE IF EXISTS `uct_wechat_response`;
CREATE TABLE `uct_wechat_response` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `appletid` varchar(50) NOT NULL COMMENT '所属应用标识',
  `title` varchar(100) NOT NULL DEFAULT '' COMMENT '资源名',
  `eventkey` varchar(128) NOT NULL DEFAULT '' COMMENT '事件',
  `type` enum('text','image','news','voice','video','music','link','app') NOT NULL DEFAULT 'text' COMMENT '类型',
  `content` text NOT NULL COMMENT '内容',
  `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注',
  `createtime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updatetime` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '更新时间',
  `status` varchar(30) NOT NULL DEFAULT '' COMMENT '状态',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `event` (`eventkey`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COMMENT='微信资源表';

-- ----------------------------
-- Table structure for yunwei_record_table
-- ----------------------------
DROP TABLE IF EXISTS `yunwei_record_table`;
CREATE TABLE `yunwei_record_table` (
  `create_time` varchar(24) DEFAULT NULL COMMENT '发生时间',
  `address` enum('总部','深圳低废运营部','东莞凤岗运营部','深圳光明运营部','苏州昆山仓储中心','深圳中央仓储中心','东莞大岭山仓储中心','苏州昆山运营部','成都崇州分部','北京大兴运营组','深圳龙华运营部','深圳沙井运营部','江西绿蚁','江西樟树','其他分部') DEFAULT NULL COMMENT '地点，只能选（总部、深圳分部、东莞分部、珠海分部、苏州分部、其他分部）',
  `feedback_person` varchar(30) NOT NULL COMMENT '反馈人',
  `problem_good` varchar(50) DEFAULT NULL COMMENT '故障物，填软硬件名称',
  `soft_hardware` enum('软件','硬件') DEFAULT NULL COMMENT '软硬件类型，只能选(软件、硬件、其他)',
  `problem_explain` varchar(255) NOT NULL COMMENT '问题简述',
  `handled_person` varchar(30) NOT NULL COMMENT '处理人',
  `assist_person` varchar(30) DEFAULT '' COMMENT '协助人',
  `methods_explain` varchar(255) NOT NULL COMMENT '解决方法',
  `handled_progress` enum('处理中','独立完成','协助完成') DEFAULT NULL COMMENT '处理进度，只能选(处理中、独立完成、协助完成)',
  `finish_time` varchar(24) DEFAULT NULL COMMENT '结束时间',
  `record_person` varchar(30) DEFAULT '' COMMENT '记录人',
  `remarks` varchar(255) DEFAULT '' COMMENT '备注'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- ----------------------------
-- View structure for Accoding_all_pur
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_all_pur`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_all_pur` AS select `test_lvhuan`.`uct_branch`.`name` AS `分部归属`,concat(`test_lvhuan`.`uct_waste_customer`.`name`,'#',`er`.`FBillNo`) AS `订单号`,`er`.`FDate` AS `采购日期`,if((`er`.`FinDate` like '1970-01-01%'),'-',`er`.`FinDate`) AS `确认日期`,(case `er`.`FSaleStyle` when '1' then '直销' when '0' then '采购回库' end) AS `采购方式`,`test_lvhuan`.`uct_admin`.`nickname` AS `采购负责人`,`er`.`pur_FQty` AS `采购净重`,round(`er`.`pur_TalFAmount`,2) AS `采购金额`,round(`er`.`pur_expense`,2) AS `采购费用`,`er`.`sor_FQty` AS `入库净重`,round(`er`.`profit`,2) AS `毛利润`,(case `er`.`FCancellation` when '1' then '正常' when '0' then '已取消' end) AS `有效状态`,(case `er`.`FCorrent` when '1' then '已完成' when '0' then '未完成' end) AS `订单状态` from (((((select max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`FDate` else '1970-01-01 00:00:00' end)) AS `FDate`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`FDate` when 'SEL' then `test_lvhuan`.`Trans_main_table`.`FDate` else '1970-01-01 00:00:00' end)) AS `FinDate`,`test_lvhuan`.`Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,`test_lvhuan`.`Trans_main_table`.`FBillNo` AS `FBillNo`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`FSupplyID` else '0' end)) AS `FSupplyID`,`test_lvhuan`.`Trans_main_table`.`FSaleStyle` AS `FSaleStyle`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`FEmpID` else '0' end)) AS `FEmpID`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`TalFQty` else '0' end)) AS `pur_FQty`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`TalFAmount` else '0' end)) AS `pur_TalFAmount`,sum((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`TalFrist` else '0' end)) AS `pur_expense`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`TalFQty` when 'SEL' then `test_lvhuan`.`Trans_main_table`.`TalFQty` else '0' end)) AS `sor_FQty`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`FCorrent` when 'SEL' then `test_lvhuan`.`Trans_main_table`.`FCorrent` else '0' end)) AS `FCorrent`,`test_lvhuan`.`Trans_main_table`.`FCancellation` AS `FCancellation`,sum((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then ((((-(ifnull(`test_lvhuan`.`Trans_main_table`.`TalFAmount`,0)) - ifnull(`test_lvhuan`.`Trans_main_table`.`TalFrist`,0)) - ifnull(`test_lvhuan`.`Trans_main_table`.`TalSecond`,0)) - ifnull(`test_lvhuan`.`Trans_main_table`.`TalThird`,0)) - ifnull(`test_lvhuan`.`Trans_main_table`.`TalForth`,0)) when 'SOR' then (((ifnull(`test_lvhuan`.`Trans_main_table`.`TalFAmount`,0) - ifnull(`test_lvhuan`.`Trans_main_table`.`TalFrist`,0)) - ifnull(`test_lvhuan`.`Trans_main_table`.`TalSecond`,0)) - ifnull(`test_lvhuan`.`Trans_main_table`.`TalThird`,0)) when 'SEL' then ((ifnull(`test_lvhuan`.`Trans_main_table`.`TalFAmount`,0) + ifnull(`test_lvhuan`.`Trans_main_table`.`TalFrist`,0)) + ifnull(`test_lvhuan`.`Trans_main_table`.`TalSecond`,0)) else '0' end)) AS `profit` from `test_lvhuan`.`Trans_main_table` where (`test_lvhuan`.`Trans_main_table`.`FSaleStyle` <> 2) group by `test_lvhuan`.`Trans_main_table`.`FBillNo`)) `er` join `test_lvhuan`.`uct_branch`) join `test_lvhuan`.`uct_waste_customer`) join `test_lvhuan`.`uct_admin`) where ((`test_lvhuan`.`uct_branch`.`setting_key` = `er`.`FRelateBrID`) and (`test_lvhuan`.`uct_waste_customer`.`id` = `er`.`FSupplyID`) and (`test_lvhuan`.`uct_admin`.`id` = `er`.`FEmpID`) and (`er`.`FBillNo` like '2021%') and (`er`.`FRelateBrID` <> 7));

-- ----------------------------
-- View structure for Accoding_all_sel
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_all_sel`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_all_sel` AS select `branch`.`name` AS `分部归属`,if((`main`.`FDate` like '1970%'),'-',`main`.`FDate`) AS `销售日期`,concat(`cum`.`name`,'#',`main`.`FBillNo`) AS `订单号`,`admin`.`nickname` AS `销售负责人`,'销售出库' AS `销售方式`,`main`.`TalFQty` AS `销售总净重`,`main`.`TalFAmount` AS `销售总金额`,ifnull(`main`.`TalFrist`,0) AS `太空包费用`,ifnull(`main`.`TalSecond`,0) AS `其他收支`,(case `main`.`FCancellation` when '1' then '正常' when '0' then '已取消' end) AS `有效状态`,(case `main`.`FCorrent` when '1' then '已完成' when '0' then '未完成' end) AS `订单状态` from (((`Trans_main_table` `main` join `uct_branch` `branch`) join `uct_waste_customer` `cum`) join `uct_admin` `admin`) where ((`main`.`FTranType` = 'SEL') and (`main`.`FBillNo` like '20%') and (`main`.`FRelateBrID` = `branch`.`setting_key`) and (`main`.`FSupplyID` = `cum`.`id`) and (`main`.`FSaleStyle` = 2) and (`admin`.`id` = `main`.`FEmpID`) and (`main`.`FRelateBrID` <> 7)) union all select `branch`.`name` AS `分部归属`,if((`main`.`FDate` like '1970%'),'-',`main`.`FDate`) AS `销售日期`,concat(`cum`.`name`,'#',`main`.`FBillNo`) AS `订单号`,`admin`.`nickname` AS `销售负责人`,'直销' AS `销售方式`,`main`.`TalFQty` AS `销售总净重`,`main`.`TalFAmount` AS `销售总金额`,ifnull(`main`.`TalFrist`,0) AS `太空包费用`,ifnull(`main`.`TalSecond`,0) AS `其他收支`,(case `main`.`FCancellation` when '1' then '正常' when '0' then '已取消' end) AS `有效状态`,(case `main`.`FCorrent` when '1' then '已完成' when '0' then '未完成' end) AS `订单状态` from (((`Trans_main_table` `main` join `uct_branch` `branch`) join `uct_waste_customer` `cum`) join `uct_admin` `admin`) where ((`main`.`FRelateBrID` = `branch`.`setting_key`) and (`main`.`FSupplyID` = `cum`.`id`) and (`admin`.`id` = `main`.`FEmpID`) and (`main`.`FTranType` = 'SEL') and (`main`.`FRelateBrID` <> 7) and (`main`.`FSaleStyle` = '1') and (`main`.`FBillNo` like '20%'));

-- ----------------------------
-- View structure for Accoding_cargo_in
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_cargo_in`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_cargo_in` AS select `p`.`branch_id` AS `branch_id`,concat(`c`.`name`,'#',`p`.`order_id`) AS `order_id`,`Trans_assist_table`.`FItemID` AS `FItemID`,`ac`.`name` AS `name`,`Trans_assist_table`.`disposal_way` AS `disposal_way`,`Trans_assist_table`.`FQty` AS `FQty`,`Trans_assist_table`.`FPrice` AS `FPrice`,`Trans_assist_table`.`FAmount` AS `FAmount`,`Trans_assist_table`.`FDCTime` AS `FDCTime` from (((`Trans_assist_table` join `uct_waste_purchase` `p`) join `uct_waste_customer` `c`) join `Accoding_stock_cate` `ac`) where ((`Trans_assist_table`.`FTranType` = 'SOR') and (`Trans_assist_table`.`FDCTime` like '%2019%') and (`Trans_assist_table`.`FinterID` = `p`.`id`) and (`p`.`customer_id` = `c`.`id`) and (`ac`.`FItemID` = `Trans_assist_table`.`FItemID`) and (`p`.`branch_id` <> 7));

-- ----------------------------
-- View structure for Accoding_cargo_out
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_cargo_out`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_cargo_out` AS select `p`.`branch_id` AS `branch_id`,concat(`c`.`name`,'#',`p`.`order_id`) AS `order_id`,`Trans_assist_table`.`FItemID` AS `FItemID`,`ac`.`name` AS `name`,`Trans_assist_table`.`FQty` AS `FQty`,`Trans_assist_table`.`FPrice` AS `FPrice`,`Trans_assist_table`.`FAmount` AS `FAmount`,`Trans_assist_table`.`FDCTime` AS `FDCTime` from (((`Trans_assist_table` join `uct_waste_sell` `p`) join `uct_waste_customer` `c`) join `Accoding_stock_cate` `ac`) where ((`Trans_assist_table`.`FTranType` = 'SEL') and (`Trans_assist_table`.`FDCTime` like '%2019%') and (`Trans_assist_table`.`FinterID` = `p`.`id`) and (`p`.`customer_id` = `c`.`id`) and (`ac`.`FItemID` = `Trans_assist_table`.`FItemID`) and (`p`.`branch_id` <> 7) and isnull(length(`p`.`purchase_id`)) and (`p`.`state` <> 'cancel'));

-- ----------------------------
-- View structure for Accoding_stock
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_stock`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_stock` AS select `stoC`.`FRelateBrID` AS `FRelateBrID`,`stoC`.`FStockID` AS `FStockID`,`stoC`.`FItemID` AS `FItemID`,`stoC`.`name` AS `name`,if((ifnull(unix_timestamp(`stodif`.`FdifTime`),'0') > unix_timestamp(sysdate())),(((ifnull(`stodif`.`FdifQty`,0) - ifnull(sum(`stoiod`.`FDCQty`),0)) + ifnull(sum(`stoiod`.`FSCQty`),0)) + ifnull(sum(`stoiod`.`FdifQty`),0)),((ifnull(`stodif`.`FdifQty`,0) + ifnull(sum(`stoiod`.`FDCQty`),0)) - ifnull(sum(`stoiod`.`FSCQty`),0))) AS `FQty`,ifnull(`stodif`.`FdifTime`,0) AS `Fdiftime` from ((`test_lvhuan`.`Accoding_stock_cate` `stoC` left join `test_lvhuan`.`Accoding_stock_dif` `stodif` on(((`stoC`.`FStockID` = `stodif`.`FStockID`) and (`stoC`.`FItemID` = `stodif`.`FItemID`)))) left join `test_lvhuan`.`Accoding_stock_iod` `stoiod` on(((convert(`stoC`.`FStockID` using utf8) = `stoiod`.`FStockID`) and (`stoC`.`FItemID` = `stoiod`.`FItemID`) and if((ifnull(unix_timestamp(`stodif`.`FdifTime`),'0') > unix_timestamp(sysdate())),(unix_timestamp(`stoiod`.`FDCTime`) between (unix_timestamp(sysdate()) + 1) and ifnull(unix_timestamp(`stodif`.`FdifTime`),'0')),(unix_timestamp(`stoiod`.`FDCTime`) between ifnull((unix_timestamp(`stodif`.`FdifTime`) + 1),'0') and unix_timestamp(sysdate())))))) group by `stoC`.`FStockID`,`stoC`.`FItemID`;

-- ----------------------------
-- View structure for Accoding_stock_cate
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_stock_cate`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_stock_cate` AS select `c2`.`branch_id` AS `FRelateBrID`,concat('LH',`w`.`id`) AS `FStockID`,`c2`.`id` AS `FItemID`,(case `c2`.`state` when '1' then `c2`.`name` when '0' then concat('【禁用】',`c2`.`name`) end) AS `name` from (`uct_waste_cate` `c2` join `uct_waste_warehouse` `w`) where ((not(`c2`.`parent_id` in (select `c`.`id` AS `id` from `uct_waste_cate` `c` where (`c`.`parent_id` = 0)))) and (`c2`.`parent_id` <> 0) and (`w`.`branch_id` = `c2`.`branch_id`) and (`w`.`parent_id` = 0) and (`w`.`state` = 1));

-- ----------------------------
-- View structure for Accoding_stock_cur
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_stock_cur`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_stock_cur` AS select `stoC`.`FRelateBrID` AS `FRelateBrID`,`stoC`.`FStockID` AS `FStockID`,`stoC`.`FItemID` AS `FItemID`,`stoC`.`name` AS `name`,ifnull(`stoiod`.`FDCQty`,0) AS `FDCQty`,ifnull(`stoiod`.`FSCQty`,0) AS `FSCQty` from (`Accoding_stock_cate` `stoC` left join `Accoding_stock_iod` `stoiod` on(((convert(`stoC`.`FStockID` using utf8) = `stoiod`.`FStockID`) and (`stoC`.`FItemID` = `stoiod`.`FItemID`) and (date_format(`stoiod`.`FDCTime`,'%Y-%m-%d') = '2019-03-29')))) group by `stoC`.`FStockID`,`stoC`.`FItemID`;

-- ----------------------------
-- View structure for Accoding_stock_dif
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_stock_dif`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_stock_dif` AS select `acc_base`.`FRelateBrID` AS `FRelateBrID`,concat('LH',`acc_base`.`FStockID`) AS `FStockID`,`acc_base`.`cate_id` AS `FItemID`,`test_lvhuan`.`uct_cate_account`.`account_num` AS `FdifQty`,date_format(from_unixtime(`acc_base`.`FdifTime`),'%Y-%m-%d %H:%i:%s') AS `FdifTime` from (((select `test_lvhuan`.`uct_cate_account`.`branch_id` AS `FRelateBrID`,`test_lvhuan`.`uct_cate_account`.`warehouse_id` AS `FStockID`,`test_lvhuan`.`uct_cate_account`.`cate_id` AS `cate_id`,max(`test_lvhuan`.`uct_cate_account`.`createtime`) AS `FdifTime` from `test_lvhuan`.`uct_cate_account` group by `test_lvhuan`.`uct_cate_account`.`cate_id`,`test_lvhuan`.`uct_cate_account`.`warehouse_id`)) `acc_base` join `test_lvhuan`.`uct_cate_account`) where ((`test_lvhuan`.`uct_cate_account`.`cate_id` = `acc_base`.`cate_id`) and (`test_lvhuan`.`uct_cate_account`.`createtime` = `acc_base`.`FdifTime`) and (`test_lvhuan`.`uct_cate_account`.`warehouse_id` = `acc_base`.`FStockID`));

-- ----------------------------
-- View structure for Accoding_stock_iod
-- ----------------------------
DROP VIEW IF EXISTS `Accoding_stock_iod`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Accoding_stock_iod` AS select `uct_waste_cate`.`branch_id` AS `FRelateBrID`,concat('LH',`uct_waste_warehouse`.`id`) AS `FStockID`,`Trans_assist_table`.`FItemID` AS `FItemID`,round(ifnull((case `Trans_main_table`.`FTranType` when 'SOR' then `Trans_assist_table`.`FQty` else 0 end),0),1) AS `FDCQty`,round(ifnull((case `Trans_main_table`.`FTranType` when 'SEL' then `Trans_assist_table`.`FQty` else 0 end),0),1) AS `FSCQty`,'0' AS `FdifQty`,date_format(`Trans_assist_table`.`FDCTime`,'%Y-%m-%d %H:%i:%s') AS `FDCTime` from (((`Trans_assist_table` join `Trans_main_table`) join `uct_waste_cate`) join `uct_waste_warehouse`) where ((`Trans_main_table`.`FSaleStyle` <> 1) and (`Trans_main_table`.`FCancellation` = 1) and (`Trans_assist_table`.`FinterID` = `Trans_main_table`.`FInterID`) and (`Trans_assist_table`.`FTranType` = `Trans_main_table`.`FTranType`) and ((`Trans_assist_table`.`FDCTime` >= curdate()) or (`Trans_assist_table`.`red_ink_time` >= curdate())) and (`Trans_assist_table`.`FItemID` = `uct_waste_cate`.`id`) and (`uct_waste_cate`.`branch_id` = `uct_waste_warehouse`.`branch_id`) and (`uct_waste_warehouse`.`parent_id` = 0) and (`uct_waste_warehouse`.`state` = 1)) union all select `uct_cate_account`.`branch_id` AS `FRelateBrID`,concat('LH',`uct_cate_account`.`warehouse_id`) AS `FStockID`,`uct_cate_account`.`cate_id` AS `FItemID`,'0' AS `FDCQty`,'0' AS `FSCQty`,(`uct_cate_account`.`before_account_num` - `uct_cate_account`.`account_num`) AS `FdifQty`,date_format(from_unixtime(`uct_cate_account`.`createtime`),'%Y-%m-%d %H:%i:%s') AS `FDCTime` from `uct_cate_account` where (date_format(from_unixtime(`uct_cate_account`.`createtime`),'%Y-%m-%d %H:%i:%s') > curdate()) union all select `Accoding_stock_history`.`FRelateBrID` AS `FRelateBrID`,`Accoding_stock_history`.`FStockID` AS `FStockID`,`Accoding_stock_history`.`FItemID` AS `FItemID`,`Accoding_stock_history`.`FDCQty` AS `FDCQty`,`Accoding_stock_history`.`FSCQty` AS `FSCQty`,`Accoding_stock_history`.`FdifQty` AS `FdifQty`,`Accoding_stock_history`.`FDCTime` AS `FDCTime` from `Accoding_stock_history`;

-- ----------------------------
-- View structure for Check_orderData
-- ----------------------------
DROP VIEW IF EXISTS `Check_orderData`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Check_orderData` AS select `main`.`FRelateBrID` AS `FRelateBrID`,`main`.`FInterID` AS `FInterID`,`main`.`FTranType` AS `FTranType`,`main`.`FDate` AS `FDate`,concat('#',`main`.`FBillNo`) AS `FBillNo`,`main`.`FDCStockID` AS `FDCStockID`,`main`.`FSCStockID` AS `FSCStockID`,`main`.`FFManagerID` AS `FFManagerID`,`main`.`FSaleStyle` AS `FSaleStyle`,`main`.`FPOStyle` AS `FPOStyle`,`main`.`FPOPrecent` AS `FPOPrecent`,`main`.`TalFQty` AS `TalFQty`,`main`.`TalFAmount` AS `TalFAmount`,`main`.`TalFrist` AS `TalFrist`,`main`.`TalSecond` AS `TalSecond`,`main`.`TalThird` AS `TalThird`,`main`.`TalForth` AS `TalForth` from (((select `main`.`FBillNo` AS `FBillNo` from `test_lvhuan`.`Trans_main_table` `main` where ((`main`.`FDate` like '2019-06-04%') and ((`main`.`FTranType` = 'SOR') or (`main`.`FTranType` = 'SEL')) and (`main`.`FRelateBrID` = 1) and (`main`.`FCancellation` = 1)))) `ord` join `test_lvhuan`.`Trans_main_table` `main`) where (`ord`.`FBillNo` = `main`.`FBillNo`);

-- ----------------------------
-- View structure for Check_queRuturn
-- ----------------------------
DROP VIEW IF EXISTS `Check_queRuturn`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Check_queRuturn` AS select `cq`.`id` AS `id`,`cq`.`admin_id` AS `admin_id`,`cq`.`branch_id` AS `branch_id`,`cq`.`company_name` AS `company_name`,`cq`.`liasion` AS `liasion`,`cq`.`location_name` AS `location_name`,`cq`.`position` AS `position`,`cq`.`createtime` AS `createtime`,`cq`.`updatetime` AS `updatetime` from (select `cq`.`id` AS `id`,`cq`.`admin_id` AS `admin_id`,`cq`.`branch_id` AS `branch_id`,`cq`.`company_name` AS `company_name`,`cq`.`phone` AS `phone`,`cq`.`liasion` AS `liasion`,max(`cq`.`location_name`) AS `location_name`,`cq`.`position` AS `position`,`cq`.`createtime` AS `createtime`,`cq`.`updatetime` AS `updatetime` from `test_lvhuan`.`uct_customer_question` `cq` where ((`cq`.`branch_id` <> 7) and (`cq`.`branch_id` <> 0)) group by `cq`.`phone` having (max(`cq`.`location_name`) = '')) `cq` where (not(`cq`.`id` in (select `test_lvhuan`.`uct_customer_question_item`.`question_id` from `test_lvhuan`.`uct_customer_question_item`)));

-- ----------------------------
-- View structure for Customer_item_analyse
-- ----------------------------
DROP VIEW IF EXISTS `Customer_item_analyse`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Customer_item_analyse` AS select `Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,`Trans_main_table`.`FSupplyID` AS `FSupplyID`,date_format(`Trans_main_table`.`FDate`,'%Y-%m') AS `FDate`,`Trans_assist_table`.`FItemID` AS `FItemID`,sum(`Trans_assist_table`.`FQty`) AS `FQty`,sum(`Trans_assist_table`.`FAmount`) AS `FAmount` from (`Trans_main_table` join `Trans_assist_table`) where ((`Trans_main_table`.`FCorrent` = '1') and (`Trans_main_table`.`FCancellation` = '1') and (`Trans_assist_table`.`FinterID` = `Trans_main_table`.`FInterID`) and (`Trans_assist_table`.`FTranType` = `Trans_main_table`.`FTranType`) and (`Trans_main_table`.`FTranType` <> 'PUR') and (`Trans_main_table`.`FSaleStyle` <> '2') and (not((`Trans_main_table`.`FDate` like '1970%')))) group by date_format(`Trans_main_table`.`FDate`,'%Y-%m'),`Trans_main_table`.`FSupplyID`,`Trans_assist_table`.`FItemID`;

-- ----------------------------
-- View structure for Customer_month_analyse
-- ----------------------------
DROP VIEW IF EXISTS `Customer_month_analyse`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Customer_month_analyse` AS select `Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,`Trans_main_table`.`FSupplyID` AS `FSupplyID`,date_format(`Trans_main_table`.`FDate`,'%Y-%m') AS `Month`,count(`Trans_main_table`.`FInterID`) AS `OrderNum`,sum(`Trans_main_table`.`TalFQty`) AS `TalFQty`,sum(`Trans_main_table`.`TalFAmount`) AS `TalFAmount` from `Trans_main_table` where ((`Trans_main_table`.`FSaleStyle` <> '2') and (`Trans_main_table`.`FTranType` <> 'PUR') and (not((`Trans_main_table`.`FDate` like '1970%'))) and (`Trans_main_table`.`FCancellation` = '1') and (`Trans_main_table`.`FCorrent` = '1')) group by `Trans_main_table`.`FSupplyID`,date_format(`Trans_main_table`.`FDate`,'%Y-%m');

-- ----------------------------
-- View structure for Datawall_carbonParm
-- ----------------------------
DROP VIEW IF EXISTS `Datawall_carbonParm`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Datawall_carbonParm` AS select `aa`.`branch_id` AS `branch_id`,round((sum((`aa`.`FQty` * `test_lvhuan`.`uct_waste_cate`.`carbon_parm`)) / 1000),3) AS `carbon_parm`,date_format(`aa`.`FDCTime`,'%Y-%m-%d') AS `FDCTime` from (((select `test_lvhuan`.`uct_waste_cate`.`branch_id` AS `branch_id`,`test_lvhuan`.`uct_waste_cate`.`parent_id` AS `parent_id`,`test_lvhuan`.`Trans_assist_table`.`FQty` AS `FQty`,`test_lvhuan`.`Trans_assist_table`.`FDCTime` AS `FDCTime` from (`test_lvhuan`.`Trans_assist_table` join `test_lvhuan`.`uct_waste_cate`) where ((`test_lvhuan`.`Trans_assist_table`.`FTranType` = 'SOR') and (`test_lvhuan`.`Trans_assist_table`.`FItemID` = `test_lvhuan`.`uct_waste_cate`.`id`)))) `aa` join `test_lvhuan`.`uct_waste_cate`) where ((`test_lvhuan`.`uct_waste_cate`.`id` = `aa`.`parent_id`) and (date_format(`aa`.`FDCTime`,'%Y-%m-%d') >= (curdate() - interval 6 day))) group by date_format(`aa`.`FDCTime`,'%Y-%m-%d'),`aa`.`branch_id`;

-- ----------------------------
-- View structure for Save_mysqlorder_1
-- ----------------------------
DROP VIEW IF EXISTS `Save_mysqlorder_1`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Save_mysqlorder_1` AS select `test_lvhuan`.`Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,(case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`FDCStockID` when 'SEL' then `test_lvhuan`.`Trans_main_table`.`FSCStockID` else NULL end) AS `FStockID`,`test_lvhuan`.`Trans_assist_table`.`FItemID` AS `FItemID`,round(ifnull((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_assist_table`.`FQty` else 0 end),0),1) AS `FDCQty`,round(ifnull((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SEL' then `test_lvhuan`.`Trans_assist_table`.`FQty` else 0 end),0),1) AS `FSCQty`,'0' AS `FdifQty`,date_format(`test_lvhuan`.`Trans_assist_table`.`FDCTime`,'%Y-%m-%d %H:%i:%s') AS `FDCTime` from (`test_lvhuan`.`Trans_assist_table` join `test_lvhuan`.`Trans_main_table`) where ((`test_lvhuan`.`Trans_main_table`.`FSaleStyle` <> 1) and (`test_lvhuan`.`Trans_main_table`.`FCancellation` = 1) and (`test_lvhuan`.`Trans_assist_table`.`FinterID` = `test_lvhuan`.`Trans_main_table`.`FInterID`) and (`test_lvhuan`.`Trans_assist_table`.`FTranType` = `test_lvhuan`.`Trans_main_table`.`FTranType`) and (`test_lvhuan`.`Trans_assist_table`.`FDCTime` >= curdate())) union all select `test_lvhuan`.`uct_cate_account`.`branch_id` AS `FRelateBrID`,concat('LH',`test_lvhuan`.`uct_cate_account`.`warehouse_id`) AS `FStockID`,`test_lvhuan`.`uct_cate_account`.`cate_id` AS `FItemID`,'0' AS `FDCQty`,'0' AS `FSCQty`,(`test_lvhuan`.`uct_cate_account`.`before_account_num` - `test_lvhuan`.`uct_cate_account`.`account_num`) AS `FdifQty`,date_format(from_unixtime(`test_lvhuan`.`uct_cate_account`.`createtime`),'%Y-%m-%d %H:%i:%s') AS `FDCTime` from `test_lvhuan`.`uct_cate_account` union all select `base`.`FRelateBrID` AS `FRelateBrID`,`base`.`FStockID` AS `FStockID`,`base`.`FItemID` AS `FItemID`,round(sum(ifnull(`base`.`FDCQty`,0)),1) AS `FDCQty`,round(sum(ifnull(`base`.`FSCQty`,0)),1) AS `FSCQty`,'0' AS `FdifQty`,date_format(concat(date_format(`base`.`FDCTime`,'%Y-%m-%d'),' 23:59:59'),'%Y-%m-%d %H:%i:%s') AS `FDCTime` from (select `test_lvhuan`.`Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,(case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`FDCStockID` when 'SEL' then `test_lvhuan`.`Trans_main_table`.`FSCStockID` else NULL end) AS `FStockID`,`test_lvhuan`.`Trans_assist_table`.`FItemID` AS `FItemID`,(case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_assist_table`.`FQty` else 0 end) AS `FDCQty`,(case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SEL' then `test_lvhuan`.`Trans_assist_table`.`FQty` else 0 end) AS `FSCQty`,`test_lvhuan`.`Trans_assist_table`.`FDCTime` AS `FDCTime` from (`test_lvhuan`.`Trans_assist_table` join `test_lvhuan`.`Trans_main_table`) where ((`test_lvhuan`.`Trans_assist_table`.`FinterID` = `test_lvhuan`.`Trans_main_table`.`FInterID`) and (`test_lvhuan`.`Trans_assist_table`.`FTranType` = `test_lvhuan`.`Trans_main_table`.`FTranType`) and (`test_lvhuan`.`Trans_main_table`.`FSaleStyle` <> 1) and (`test_lvhuan`.`Trans_main_table`.`FCancellation` = 1) and (`test_lvhuan`.`Trans_assist_table`.`FDCTime` < curdate()))) `base` group by `base`.`FStockID`,`base`.`FItemID`,date_format(`base`.`FDCTime`,'%Y-%m-%d') having (`base`.`FStockID` is not null);

-- ----------------------------
-- View structure for test
-- ----------------------------
DROP VIEW IF EXISTS `test`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test` AS select `Plog`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,max((case `Plog`.`state_value` when 'draft' then `Plog`.`createtime` end)) AS `TCreate`,max((case `Plog`.`state_value` when 'draft' then `Plog`.`admin_id` end)) AS `TCreatePerson`,max((case `Plog`.`state_value` when 'wait_allot' then '1' else '0' end)) AS `TallotOver`,max((case `Plog`.`state_value` when 'wait_allot' then `Plog`.`admin_id` end)) AS `TallotPerson`,max((case `Plog`.`state_value` when 'wait_allot' then `Plog`.`createtime` end)) AS `Tallot`,max((case `Slog`.`state_value` when 'wait_commit_order' then '1' else '0' end)) AS `TgetorderOver`,max((case `Slog`.`state_value` when 'wait_commit_order' then `Slog`.`admin_id` end)) AS `TgetorderPerson`,max((case `Slog`.`state_value` when 'wait_commit_order' then `Slog`.`createtime` end)) AS `Tgetorder`,max((case `Plog`.`state_value` when 'wait_receive_order' then '1' else '0' end)) AS `TmaterialOver`,max((case `Plog`.`state_value` when 'wait_receive_order' then `Plog`.`admin_id` end)) AS `TmaterialPerson`,max((case `Plog`.`state_value` when 'wait_receive_order' then `Plog`.`createtime` end)) AS `Tmaterial`,max((case `Slog`.`state_value` when 'wait_pick_cargo' then '1' else '0' end)) AS `TpurchaseOver`,max((case `Slog`.`state_value` when 'wait_pick_cargo' then `Slog`.`admin_id` else '' end)) AS `TpurchasePerson`,max((case `Slog`.`state_value` when 'wait_pick_cargo' then `Slog`.`createtime` else '' end)) AS `Tpurchase`,max((case `Slog`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TpayOver`,max((case `Slog`.`state_value` when 'wait_pay' then `Slog`.`admin_id` else '' end)) AS `TpayPerson`,max((case `Slog`.`state_value` when 'wait_pay' then `Slog`.`createtime` else '' end)) AS `Tpay`,max((case `Slog`.`state_value` when 'finish' then '1' else '0' end)) AS `TchangeOver`,max((case `Slog`.`state_value` when 'finish' then `Slog`.`admin_id` end)) AS `TchangePerson`,max((case `Slog`.`state_value` when 'finish' then `Slog`.`createtime` end)) AS `Tchange`,max((case `Plog`.`state_value` when 'wait_return_fee' then '1' else '0' end)) AS `TexpenseOver`,max((case `Plog`.`state_value` when 'wait_return_fee' then `Plog`.`admin_id` end)) AS `TexpensePerson`,max((case `Plog`.`state_value` when 'wait_return_fee' then `Plog`.`createtime` end)) AS `Texpense`,'' AS `TsortOver`,'' AS `TsortPerson`,'' AS `Tsort`,'' AS `TallowOver`,'' AS `TallowPerson`,'' AS `Tallow`,max((case `Plog`.`state_value` when 'finish' then '1' else '0' end)) AS `TcheckOver`,max((case `Plog`.`state_value` when 'finish' then `Plog`.`admin_id` else '' end)) AS `TcheckPerson`,max((case `Plog`.`state_value` when 'finish' then `Plog`.`createtime` else '' end)) AS `Tcheck`,`P`.`state` AS `NowState` from (((`uct_waste_sell` `S` join `uct_waste_sell_log` `Slog`) join `uct_waste_purchase` `P`) join `uct_waste_purchase_log` `Plog`) where ((`S`.`id` = `Slog`.`sell_id`) and (`S`.`order_id` = `P`.`order_id`) and (`P`.`id` = `Plog`.`purchase_id`) and (`Slog`.`is_timeline_data` = '1')) group by `P`.`order_id`;

-- ----------------------------
-- View structure for test_1
-- ----------------------------
DROP VIEW IF EXISTS `test_1`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_1` AS select `send`.`branch_id` AS `branch_id`,`send`.`send_count` AS `send_count`,ifnull(`get`.`get_count`,0) AS `get_count`,ifnull(`get`.`item1`,0) AS `item1`,ifnull(`get`.`item2`,0) AS `item2`,ifnull(`get`.`item3`,0) AS `item3`,ifnull(`get`.`item4`,0) AS `item4`,ifnull(`get`.`item5`,0) AS `item5`,ifnull(`get`.`item6`,0) AS `item6`,ifnull(`get`.`item7`,0) AS `item7`,ifnull(`get`.`csi`,0) AS `CSI` from (((select `cq`.`branch_id` AS `branch_id`,count(distinct `cq`.`phone`) AS `send_count` from `test_lvhuan`.`uct_customer_question` `cq` where ((`cq`.`branch_id` <> 7) and (`cq`.`branch_id` <> 0)) group by `cq`.`branch_id`)) `send` left join ((select `cq`.`branch_id` AS `branch_id`,count(distinct `cq`.`phone`) AS `get_count`,round((sum(`cqg`.`item1`) / count(`cqg`.`question_id`)),2) AS `item1`,round((sum(`cqg`.`item2`) / count(`cqg`.`question_id`)),2) AS `item2`,round((sum(`cqg`.`item3`) / count(`cqg`.`question_id`)),2) AS `item3`,round((sum(`cqg`.`item4`) / count(`cqg`.`question_id`)),2) AS `item4`,round((sum(`cqg`.`item5`) / count(`cqg`.`question_id`)),2) AS `item5`,round((sum(`cqg`.`item6`) / count(`cqg`.`question_id`)),2) AS `item6`,round((sum(`cqg`.`item7`) / count(`cqg`.`question_id`)),2) AS `item7`,round((sum(`cqg`.`csi`) / count(`cqg`.`question_id`)),2) AS `csi` from ((`test_lvhuan`.`uct_customer_question` `cq` join `test_lvhuan`.`uct_customer_question_item` `cqi`) join `test_lvhuan`.`uct_customer_question_grade` `cqg`) where ((`cq`.`branch_id` <> 7) and (`cq`.`branch_id` <> 0) and (`cq`.`id` = `cqi`.`question_id`) and (`cq`.`id` = `cqg`.`question_id`)) group by `cq`.`branch_id`)) `get` on((`send`.`branch_id` = `get`.`branch_id`)));

-- ----------------------------
-- View structure for test_2
-- ----------------------------
DROP VIEW IF EXISTS `test_2`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_2` AS select `uct_admin`.`id` AS `id`,`uct_admin`.`branch_id` AS `branch_id`,`uct_admin`.`crmid` AS `crmid`,`uct_admin`.`username` AS `username`,`uct_admin`.`nickname` AS `nickname`,`uct_admin`.`password` AS `password`,`uct_admin`.`salt` AS `salt`,`uct_admin`.`avatar` AS `avatar`,`uct_admin`.`mobile` AS `mobile`,`uct_admin`.`email` AS `email`,`uct_admin`.`loginfailure` AS `loginfailure`,`uct_admin`.`logintime` AS `logintime`,`uct_admin`.`createtime` AS `createtime`,`uct_admin`.`updatetime` AS `updatetime`,`uct_admin`.`token` AS `token`,`uct_admin`.`last_appletid` AS `last_appletid`,`uct_admin`.`status` AS `status` from (`uct_admin` join `uct_waste_customer`) where ((find_in_set(`uct_admin`.`id`,`uct_waste_customer`.`admin_id`) > 0) and (`uct_waste_customer`.`customer_type` = 'up'));

-- ----------------------------
-- View structure for test_3
-- ----------------------------
DROP VIEW IF EXISTS `test_3`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_3` AS select `cq`.`id` AS `id`,`cq`.`admin_id` AS `admin_id`,`cq`.`branch_id` AS `branch_id`,`cq`.`company_name` AS `company_name`,`cq`.`liasion` AS `liasion`,`cq`.`location_name` AS `location_name`,`cq`.`position` AS `position`,`cq`.`createtime` AS `createtime`,`cq`.`updatetime` AS `updatetime` from (((select `cq`.`id` AS `id`,`cq`.`admin_id` AS `admin_id`,`cq`.`branch_id` AS `branch_id`,`cq`.`company_name` AS `company_name`,`cq`.`phone` AS `phone`,`cq`.`liasion` AS `liasion`,max(`cq`.`location_name`) AS `location_name`,`cq`.`position` AS `position`,`cq`.`createtime` AS `createtime`,`cq`.`updatetime` AS `updatetime` from `test_lvhuan`.`uct_customer_question` `cq` where ((`cq`.`branch_id` <> 7) and (`cq`.`branch_id` <> 0)) group by `cq`.`phone`)) `cq` join `test_lvhuan`.`uct_customer_question_item` `item`) where (`cq`.`id` = `item`.`question_id`);

-- ----------------------------
-- View structure for test_4
-- ----------------------------
DROP VIEW IF EXISTS `test_4`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_4` AS select `cus`.`branch_id` AS `branch_id`,`cus`.`company_name` AS `company_name`,`cus`.`liasion` AS `liasion`,`item`.`shipment_ask` AS `shipment_ask`,`item`.`shipment_answer` AS `shipment_answer`,`item`.`staff_cooperate` AS `staff_cooperate`,`item`.`civilized_operation` AS `civilized_operation`,`item`.`customer_stipulate` AS `customer_stipulate`,`item`.`now_settle` AS `now_settle`,`item`.`settle_accuracy` AS `settle_accuracy`,`item`.`handle_rationality` AS `handle_rationality`,`item`.`receipts_timeliness` AS `receipts_timeliness`,`item`.`report_accuracy` AS `report_accuracy`,`item`.`communicate_smooth` AS `communicate_smooth`,`item`.`complaint_timeliness` AS `complaint_timeliness`,`item`.`verify_track` AS `verify_track`,`item`.`regular_visits` AS `regular_visits`,`item`.`report_to_duty` AS `report_to_duty`,`item`.`working_attitude` AS `working_attitude`,`item`.`packaging_work` AS `packaging_work`,`item`.`shipshape` AS `shipshape`,`item`.`qualifications_update` AS `qualifications_update`,`item`.`assess_support` AS `assess_support`,`item`.`emergency_container` AS `emergency_container`,`item`.`environmental_consultation` AS `environmental_consultation`,`gra`.`item1` AS `item1`,`gra`.`item2` AS `item2`,`gra`.`item3` AS `item3`,`gra`.`item4` AS `item4`,`gra`.`item5` AS `item5`,`gra`.`item6` AS `item6`,`gra`.`item7` AS `item7`,`gra`.`csi` AS `csi`,`item`.`extend_service` AS `extend_service`,`item`.`propose` AS `propose` from ((`uct_customer_question_item` `item` join `uct_customer_question` `cus`) join `uct_customer_question_grade` `gra`) where ((`item`.`question_id` = `cus`.`id`) and (`cus`.`branch_id` <> 7) and (`cus`.`branch_id` <> 0) and (`gra`.`question_id` = `cus`.`id`)) group by `cus`.`phone`;

-- ----------------------------
-- View structure for test_5
-- ----------------------------
DROP VIEW IF EXISTS `test_5`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_5` AS select `main`.`FRelateBrID` AS `FRelateBrID`,max((case `main`.`FTranType` when 'SOR' then `main`.`FDate` when 'SEL' then `main`.`FDate` else '1970-01-01 00:00:00' end)) AS `FDate`,`main`.`FBillNo` AS `FBillNo`,max((case `main`.`FTranType` when 'PUR' then `main`.`FSupplyID` else '0' end)) AS `FSupplyID`,max((case `main`.`FTranType` when 'PUR' then `main`.`FDeptID` else '0' end)) AS `FDeptID`,max((case `main`.`FTranType` when 'PUR' then `main`.`FEmpID` else '0' end)) AS `FEmpID`,sum((case `main`.`FTranType` when 'PUR' then '0' else `main`.`TalFQty` end)) AS `TalFQty`,sum((case `main`.`FTranType` when 'PUR' then ((((-(`main`.`TalFAmount`) - `main`.`TalFrist`) - `main`.`TalSecond`) - `main`.`TalThird`) - `main`.`TalForth`) when 'SOR' then (((`main`.`TalFAmount` - `main`.`TalFrist`) - `main`.`TalSecond`) - `main`.`TalThird`) when 'SEL' then ((`main`.`TalFAmount` - `main`.`TalFrist`) - `main`.`TalSecond`) else '0' end)) AS `TalProfit` from `Trans_main_table` `main` where ((`main`.`FCancellation` = 1) and (`main`.`FCorrent` = 1) and (`main`.`FSaleStyle` <> 2)) group by `main`.`FBillNo`;

-- ----------------------------
-- View structure for test_6
-- ----------------------------
DROP VIEW IF EXISTS `test_6`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_6` AS select `uct_waste_customer`.`id` AS `id`,`uct_waste_customer`.`admin_id` AS `admin_id`,`uct_waste_customer`.`branch_id` AS `branch_id`,`uct_waste_customer`.`name` AS `name`,group_concat(distinct `uct_waste_purchase`.`seller_id` separator ',') AS `admin_user`,max(`uct_waste_purchase`.`createtime`) AS `new_time` from (`uct_waste_customer` join `uct_waste_purchase`) where ((`uct_waste_customer`.`customer_type` = 'up') and (`uct_waste_customer`.`state` = 'enabled') and (`uct_waste_purchase`.`customer_id` = `uct_waste_customer`.`id`) and (`uct_waste_customer`.`branch_id` <> 7) and (`uct_waste_customer`.`branch_id` <> 11) and (`uct_waste_customer`.`branch_id` <> 14) and (`uct_waste_customer`.`branch_id` <> 12) and (`uct_waste_customer`.`branch_id` <> 6)) group by `uct_waste_customer`.`id`;

-- ----------------------------
-- View structure for test_7
-- ----------------------------
DROP VIEW IF EXISTS `test_7`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_7` AS select `ad`.`id` AS `id`,`ad`.`crmid` AS `crmid`,`ad`.`username` AS `username`,`ad`.`nickname` AS `nickname`,`cus`.`name` AS `name` from (((select `test_lvhuan`.`uct_admin`.`id` AS `id`,`test_lvhuan`.`uct_admin`.`crmid` AS `crmid`,`test_lvhuan`.`uct_admin`.`username` AS `username`,`test_lvhuan`.`uct_admin`.`nickname` AS `nickname` from `test_lvhuan`.`uct_admin`)) `ad` join (select `test_lvhuan`.`uct_waste_customer`.`id` AS `id`,`test_lvhuan`.`uct_waste_customer`.`admin_id` AS `admin_id`,`test_lvhuan`.`uct_waste_customer`.`name` AS `name`,`test_lvhuan`.`uct_waste_customer`.`customer_type` AS `customer_type` from `test_lvhuan`.`uct_waste_customer`) `cus`) where ((`ad`.`id` = `cus`.`admin_id`) and (`cus`.`customer_type` = 'up'));

-- ----------------------------
-- View structure for test_8
-- ----------------------------
DROP VIEW IF EXISTS `test_8`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_8` AS select `pur`.`branch_id` AS `branch_id`,`pur`.`hand_mouth_data` AS `hand_mouth_data`,`pur`.`order_id` AS `order_id`,`pur`.`purchase_incharge` AS `purchase_incharge` from (`uct_waste_purchase` `pur` join `Trans_log_table` `log`) where ((`pur`.`id` = `log`.`FInterID`) and ((`log`.`TpurchaseOver` - `log`.`TpayOver`) >= '1'));

-- ----------------------------
-- View structure for test_9
-- ----------------------------
DROP VIEW IF EXISTS `test_9`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_9` AS select `test_lvhuan`.`uct_branch`.`name` AS `分部归属`,concat(`test_lvhuan`.`uct_waste_customer`.`customer_code`,'#',`er`.`FBillNo`) AS `订单号`,`er`.`FDate` AS `采购日期`,(case `er`.`FSaleStyle` when '1' then '直销' when '0' then '采购回库' when '3' then '送框' end) AS `采购类型`,`ad1`.`nickname` AS `采购负责人`,`er`.`pur_FQty` AS `采购总净重`,`er`.`sor_FQty` AS `分拣总净重`,(case `er`.`FCorrent` when '1' then '已完成' when '0' then '未完成' end) AS `订单状态`,(case `er`.`FNowState` when 'draft' then '草稿' when 'wait_allot' then '待分配' when 'wait_receive_order' then '待接单' when 'wait_apply_materiel' then '待申请辅材' when 'wait_pick_materiel' then '待提取辅材' when 'wait_signin_materiel' then '待签收辅材' when 'wait_pick_cargo' then '待提货' when 'wait_pay' then '待付款' when 'wait_storage_connect' then '待入库交接' when 'wait_storage_connect_confirm' then '待确认交接' when 'wait_storage_sort' then '待分拣入库' when 'wait_storage_confirm' then '待入库确认' when 'wait_return_fee' then '待订单报销' when 'wait_confirm_return_fee' then '待审核订单' when 'finish' then '交易完成' end) AS `订单具体状态`,(case `er`.`FNowState` when 'wait_receive_order' then `ad1`.`nickname` when 'wait_apply_materiel' then `ad1`.`nickname` when 'wait_signin_materiel' then `ad1`.`nickname` when 'wait_pick_cargo' then `ad1`.`nickname` when 'wait_storage_connect_confirm' then `ad1`.`nickname` when 'wait_storage_confirm' then `ad1`.`nickname` when 'wait_return_fee' then `ad1`.`nickname` when 'wait_storage_connect' then '仓库主管' when 'wait_pick_materiel' then '仓库主管' when 'wait_confirm_return_fee' then '财务' when 'wait_storage_sort' then `ad2`.`nickname` else '' end) AS `责任部门／人` from ((((((select max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`FDate` else '1970-01-01' end)) AS `FDate`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`FDate` else '1970-01-01' end)) AS `FDate2`,`test_lvhuan`.`Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,`test_lvhuan`.`Trans_main_table`.`FBillNo` AS `FBillNo`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`FSupplyID` else '0' end)) AS `FSupplyID`,`test_lvhuan`.`Trans_main_table`.`FSaleStyle` AS `FSaleStyle`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`FEmpID` else '0' end)) AS `FEmpID`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`FEmpID` else '0' end)) AS `FSmpID`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`TalFQty` else '0' end)) AS `pur_FQty`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`TalFAmount` else '0' end)) AS `pur_TalFAmount`,sum((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'PUR' then `test_lvhuan`.`Trans_main_table`.`TalFrist` else '0' end)) AS `pur_expense`,max((case `test_lvhuan`.`Trans_main_table`.`FTranType` when 'SOR' then `test_lvhuan`.`Trans_main_table`.`TalFQty` when 'SEL' then `test_lvhuan`.`Trans_main_table`.`TalFQty` else '0' end)) AS `sor_FQty`,`test_lvhuan`.`Trans_main_table`.`FCorrent` AS `FCorrent`,`test_lvhuan`.`Trans_main_table`.`FCancellation` AS `FCancellation`,`test_lvhuan`.`Trans_main_table`.`FNowState` AS `FNowState` from `test_lvhuan`.`Trans_main_table` where (`test_lvhuan`.`Trans_main_table`.`FSaleStyle` <> 2) group by `test_lvhuan`.`Trans_main_table`.`FBillNo`)) `er` join `test_lvhuan`.`uct_branch`) join `test_lvhuan`.`uct_waste_customer`) join `test_lvhuan`.`uct_admin` `ad1`) left join `test_lvhuan`.`uct_admin` `ad2` on((`ad2`.`id` = `er`.`FSmpID`))) where ((`test_lvhuan`.`uct_branch`.`centre_branch_id` = 2) and (`er`.`FRelateBrID` = `test_lvhuan`.`uct_branch`.`setting_key`) and (`test_lvhuan`.`uct_waste_customer`.`id` = `er`.`FSupplyID`) and (`ad1`.`id` = `er`.`FEmpID`) and ((`test_lvhuan`.`uct_branch`.`centre_switch` = 0) or ((`test_lvhuan`.`uct_branch`.`centre_switch` = 1) and (`er`.`FDate` >= convert(date_format('2018-01-01 00:00:00','%Y-%m-%d %H:%i:%s') using utf8)))) and ((`er`.`FCorrent` = 1) or (`er`.`FCorrent` = 0)) and (`er`.`FCancellation` = 1)) order by `er`.`FCorrent` desc,`er`.`FNowState`;

-- ----------------------------
-- View structure for test_fee_view
-- ----------------------------
DROP VIEW IF EXISTS `test_fee_view`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_fee_view` AS select `baseP`.`id` AS `FInterID`,ifnull(`pf`.`pick_fee`,'') AS `PickFee`,ifnull(`rf`.`car_fee`,'') AS `CarFee`,ifnull(`rf`.`man_fee`,'') AS `ManFee`,ifnull(`sg`.`sort_fee`,'') AS `SortFee`,ifnull(`sg`.`other_sort_fee`,'') AS `OtherSortfee` from (((`test_lvhuan`.`uct_waste_purchase` `baseP` left join `test_lvhuan`.`Trans_total_fee_rf` `rf` on((`baseP`.`id` = `rf`.`purchase_id`))) left join `test_lvhuan`.`Trans_total_fee_sg` `sg` on((`baseP`.`id` = `sg`.`purchase_id`))) left join `test_lvhuan`.`Trans_total_fee_pf` `pf` on((`baseP`.`id` = `pf`.`purchase_id`)));

-- ----------------------------
-- View structure for test_test_1
-- ----------------------------
DROP VIEW IF EXISTS `test_test_1`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_test_1` AS select `main`.`FRelateBrID` AS `分部id`,`bra`.`name` AS `分部名称`,`main`.`FBillNo` AS `订单号`,`main`.`Date` AS `年月日`,`fee`.`FFeeID` AS `费用种类`,`fee`.`FFeeAmount` AS `费用金额`,`main`.`TalFQty` AS `货品合计净重`,`main`.`TalFAmount` AS `货品合计金额` from ((`Trans_main_table` `main` join `Trans_fee_table` `fee`) join `uct_branch` `bra`) where ((`main`.`FInterID` = `fee`.`FInterID`) and (`main`.`FRelateBrID` = `bra`.`id`) and (`main`.`FTranType` = `fee`.`FTranType`)) group by `main`.`FBillNo`;

-- ----------------------------
-- View structure for test_user
-- ----------------------------
DROP VIEW IF EXISTS `test_user`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_user` AS select `uct_waste_customer`.`name` AS `name`,count(`uct_waste_customer`.`id`) AS `count(id)`,`uct_waste_customer`.`id` AS `id`,`uct_waste_customer`.`admin_id` AS `admin_id` from `uct_waste_customer` where (`uct_waste_customer`.`customer_type` = 'down') group by `uct_waste_customer`.`name` having (count(`uct_waste_customer`.`id`) > 1);

-- ----------------------------
-- View structure for test_views
-- ----------------------------
DROP VIEW IF EXISTS `test_views`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `test_views` AS select `pe`.`purchase_id` AS `purchase_id`,ifnull(`pe`.`usage`,'') AS `usage`,ifnull(`pe`.`price`,'') AS `price`,ifnull(`p`.`purchase_time`,'') AS `purchase_time`,ifnull(`p`.`cargo_price`,'') AS `cargo_price`,ifnull(`p`.`cargo_weight`,'') AS `cargo_weight`,ifnull(`p`.`sort_expense`,'') AS `sort_expense` from (`uct_waste_purchase_expense` `pe` left join `uct_waste_purchase` `p` on((`pe`.`purchase_id` = `p`.`purchase_id`)));

-- ----------------------------
-- View structure for Trans_assist
-- ----------------------------
DROP VIEW IF EXISTS `Trans_assist`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_assist` AS select `uct_waste_purchase_cargo`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,`uct_waste_purchase_cargo`.`id` AS `FEntryID`,`uct_waste_purchase_cargo`.`cate_id` AS `FItemID`,'1' AS `FUnitID`,`uct_waste_purchase_cargo`.`net_weight` AS `FQty`,`uct_waste_purchase_cargo`.`unit_price` AS `FPrice`,round(`uct_waste_purchase_cargo`.`total_price`,2) AS `FAmount`,'' AS `disposal_way`,`uct_waste_cate`.`value_type` AS `value_type`,'' AS `FbasePrice`,'' AS `FbaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(`uct_waste_purchase_cargo`.`createtime`),'%Y-%m-%d %H:%i:%S') AS `FDCTime`,'' AS `FSourceInterID`,'' AS `FSourceTranType` from (`uct_waste_purchase_cargo` join `uct_waste_cate`) where (`uct_waste_purchase_cargo`.`cate_id` = `uct_waste_cate`.`id`) union all select `uct_waste_storage_sort`.`purchase_id` AS `FInterID`,'SOR' AS `FTranType`,`uct_waste_storage_sort`.`id` AS `FEntryID`,`uct_waste_storage_sort`.`cargo_sort` AS `FItemID`,'1' AS `FUnitID`,`uct_waste_storage_sort`.`net_weight` AS `FQty`,`uct_waste_storage_sort`.`presell_price` AS `FPrice`,round((`uct_waste_storage_sort`.`presell_price` * `uct_waste_storage_sort`.`net_weight`),2) AS `FAmount`,`uct_waste_storage_sort`.`disposal_way` AS `disposal_way`,`uct_waste_storage_sort`.`value_type` AS `value_type`,'' AS `FbasePrice`,'' AS `FbaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(if((`uct_waste_storage_sort`.`sort_time` > `uct_waste_storage_sort`.`createtime`),`uct_waste_storage_sort`.`sort_time`,`uct_waste_storage_sort`.`createtime`)),'%Y-%m-%d %H:%i:%S') AS `FDCTime`,`uct_waste_storage_sort`.`purchase_id` AS `FSourceInterID`,'PUR' AS `FSourceTranType` from `uct_waste_storage_sort` union all select `uct_waste_sell_cargo`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,`uct_waste_sell_cargo`.`id` AS `FEntryID`,`uct_waste_sell_cargo`.`cate_id` AS `FItemID`,'1' AS `FUnitID`,`uct_waste_sell_cargo`.`net_weight` AS `FQty`,`uct_waste_sell_cargo`.`unit_price` AS `FPrice`,round((`uct_waste_sell_cargo`.`unit_price` * `uct_waste_sell_cargo`.`net_weight`),2) AS `FAmount`,'' AS `disposal_way`,`uct_waste_cate`.`value_type` AS `value_type`,'' AS `FbasePrice`,'' AS `FbaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(`uct_waste_sell_cargo`.`createtime`),'%Y-%m-%d %H:%i:%S') AS `FDCTime`,if((`uct_waste_sell`.`purchase_id` > 0),`uct_waste_sell`.`purchase_id`,'') AS `FSourceInterID`,if((`uct_waste_sell`.`purchase_id` > 0),'PUR','') AS `FSourceTranType` from ((`uct_waste_sell_cargo` join `uct_waste_sell`) join `uct_waste_cate`) where ((`uct_waste_sell_cargo`.`sell_id` = `uct_waste_sell`.`id`) and (`uct_waste_cate`.`id` = `uct_waste_sell_cargo`.`cate_id`));

-- ----------------------------
-- View structure for Trans_fee
-- ----------------------------
DROP VIEW IF EXISTS `Trans_fee`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_fee` AS select `uct_waste_purchase_expense`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,'PC' AS `Ffeesence`,`uct_waste_purchase_expense`.`id` AS `FEntryID`,`uct_waste_purchase_expense`.`usage` AS `FFeeID`,`uct_waste_purchase_expense`.`type` AS `FFeeType`,`uct_waste_purchase_expense`.`receiver` AS `FFeePerson`,`uct_waste_purchase_expense`.`remark` AS `FFeeExplain`,`uct_waste_purchase_expense`.`price` AS `FFeeAmount`,'' AS `FFeebaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(`uct_waste_purchase_expense`.`createtime`),'%Y-%m-%d %H:%i:%S') AS `FFeetime` from `uct_waste_purchase_expense` union all select `uct_waste_storage_return_fee`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,'RF' AS `Ffeesence`,`uct_waste_storage_return_fee`.`id` AS `FEntryID`,`uct_waste_storage_return_fee`.`usage` AS `FFeeID`,'out' AS `FFeeType`,`uct_waste_storage_return_fee`.`receiver` AS `FFeePerson`,`uct_waste_storage_return_fee`.`remark` AS `FFeeExplain`,`uct_waste_storage_return_fee`.`price` AS `FFeeAmount`,'' AS `FFeebaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(`uct_waste_storage_return_fee`.`createtime`),'%Y-%m-%d %H:%i:%S') AS `FFeetime` from `uct_waste_storage_return_fee` union all select `uct_waste_storage_expense`.`purchase_id` AS `FInterID`,'SOR' AS `FTranType`,'SO' AS `Ffeesence`,`uct_waste_storage_expense`.`id` AS `FEntryID`,`uct_waste_storage_expense`.`usage` AS `FFeeID`,'out' AS `FFeeType`,`uct_waste_storage_expense`.`receiver` AS `FFeePerson`,`uct_waste_storage_expense`.`remark` AS `FFeeExplain`,`uct_waste_storage_expense`.`price` AS `FFeeAmount`,'' AS `FFeebaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(`uct_waste_storage_expense`.`createtime`),'%Y-%m-%d %H:%i:%S') AS `FFeetime` from `uct_waste_storage_expense` union all select `uct_waste_storage_sort_expense`.`purchase_id` AS `FInterID`,'SOR' AS `FTranType`,'SS' AS `Ffeesence`,`uct_waste_storage_sort_expense`.`id` AS `FEntryID`,`uct_waste_storage_sort_expense`.`usage` AS `FFeeID`,'out' AS `FFeeType`,`uct_waste_storage_sort_expense`.`receiver` AS `FFeePerson`,`uct_waste_storage_sort_expense`.`remark` AS `FFeeExplain`,`uct_waste_storage_sort_expense`.`price` AS `FFeeAmount`,'' AS `FFeebaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(`uct_waste_storage_sort_expense`.`createtime`),'%Y-%m-%d %H:%i:%S') AS `FFeetime` from `uct_waste_storage_sort_expense` union all select `uct_waste_sell_other_price`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,'SL' AS `Ffeesence`,`uct_waste_sell_other_price`.`id` AS `FEntryID`,`uct_waste_sell_other_price`.`usage` AS `FFeeID`,`uct_waste_sell_other_price`.`type` AS `FFeeType`,`uct_waste_sell_other_price`.`receiver` AS `FFeePerson`,`uct_waste_sell_other_price`.`remark` AS `FFeeExplain`,`uct_waste_sell_other_price`.`price` AS `FFeeAmount`,'' AS `FFeebaseAmount`,'' AS `Ftaxrate`,'' AS `Fbasetax`,'' AS `Fbasetaxamount`,'' AS `FPriceRef`,date_format(from_unixtime(`uct_waste_sell_other_price`.`createtime`),'%Y-%m-%d %H:%i:%S') AS `FFeetime` from `uct_waste_sell_other_price`;

-- ----------------------------
-- View structure for Trans_finishCount
-- ----------------------------
DROP VIEW IF EXISTS `Trans_finishCount`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_finishCount` AS select `Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,`Trans_main_table`.`FDeptID` AS `FDeptID`,`Trans_main_table`.`FEmpID` AS `FEmpID`,(sum(`Trans_main_table`.`FCancellation`) - sum(`Trans_main_table`.`FCorrent`)) AS `Unfinished` from `Trans_main_table` where ((date_format(`Trans_main_table`.`FDate`,'%Y-%m-%d') >= date_format('2019-01-01','%Y-%m-%d')) and (`Trans_main_table`.`FTranType` = 'PUR')) group by `Trans_main_table`.`FRelateBrID`,`Trans_main_table`.`FDeptID`,`Trans_main_table`.`FEmpID` union all select `Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,'3' AS `FDeptID`,'-' AS `FEmpID`,(sum(`Trans_main_table`.`FCancellation`) - sum(`Trans_main_table`.`FUpStockWhenSave`)) AS `Unfinished` from `Trans_main_table` where ((`Trans_main_table`.`FTranType` = 'SOR') and (`Trans_main_table`.`FCancellation` = 1)) group by `Trans_main_table`.`FRelateBrID`;

-- ----------------------------
-- View structure for Trans_log
-- ----------------------------
DROP VIEW IF EXISTS `Trans_log`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_log` AS select `log`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,max((case `log`.`state_value` when 'draft' then `log`.`createtime` end)) AS `TCreate`,max((case `log`.`state_value` when 'draft' then `log`.`admin_id` end)) AS `TCreatePerson`,max((case `log`.`state_value` when 'wait_allot' then '1' else '0' end)) AS `TallotOver`,max((case `log`.`state_value` when 'wait_allot' then `log`.`admin_id` else NULL end)) AS `TallotPerson`,max((case `log`.`state_value` when 'wait_allot' then `log`.`createtime` else NULL end)) AS `Tallot`,max((case `log`.`state_value` when 'wait_receive_order' then '1' else '0' end)) AS `TgetorderOver`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`admin_id` else NULL end)) AS `TgetorderPerson`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`createtime` else NULL end)) AS `Tgetorder`,max((case `log`.`state_value` when 'wait_signin_materiel' then '1' else '0' end)) AS `TmaterialOver`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`admin_id` else NULL end)) AS `TmaterialPerson`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`createtime` else NULL end)) AS `Tmaterial`,max((case `log`.`state_value` when 'wait_pick_cargo' then '1' else '0' end)) AS `TpurchaseOver`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`admin_id` else NULL end)) AS `TpurchasePerson`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`createtime` else NULL end)) AS `Tpurchase`,max((case `log`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TpayOver`,max((case `log`.`state_value` when 'wait_pay' then `log`.`admin_id` else NULL end)) AS `TpayPerson`,max((case `log`.`state_value` when 'wait_pay' then `log`.`createtime` else NULL end)) AS `Tpay`,max((case `log`.`state_value` when 'wait_storage_connect' then '1' else '0' end)) AS `TchangeOver`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`admin_id` else NULL end)) AS `TchangePerson`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`createtime` else NULL end)) AS `Tchange`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then '1' else '0' end)) AS `TexpenseOver`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`admin_id` else NULL end)) AS `TexpensePerson`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`createtime` else NULL end)) AS `Texpense`,max((case `log`.`state_value` when 'wait_storage_sort' then '1' else '0' end)) AS `TsortOver`,max((case `log`.`state_value` when 'wait_storage_sort' then `log`.`admin_id` else NULL end)) AS `TsortPerson`,max((case `log`.`state_value` when 'wait_storage_sort' then `log`.`createtime` else NULL end)) AS `Tsort`,max((case `log`.`state_value` when 'wait_storage_confirm' then '1' else '0' end)) AS `TallowOver`,max((case `log`.`state_value` when 'wait_storage_confirm' then `log`.`admin_id` else NULL end)) AS `TallowPerson`,max((case `log`.`state_value` when 'wait_storage_confirm' then `log`.`createtime` else NULL end)) AS `Tallow`,max((case `log`.`state_value` when 'finish' then '1' else '0' end)) AS `TcheckOver`,max((case `log`.`state_value` when 'finish' then `log`.`admin_id` else NULL end)) AS `TcheckPerson`,max((case `log`.`state_value` when 'finish' then `log`.`createtime` else '0' end)) AS `Tcheck`,`uct_waste_purchase`.`state` AS `State` from (`uct_waste_purchase` join `uct_waste_purchase_log` `log`) where ((`uct_waste_purchase`.`id` = `log`.`purchase_id`) and (`uct_waste_purchase`.`hand_mouth_data` = '0') and (`uct_waste_purchase`.`give_frame` = '0')) group by `uct_waste_purchase`.`id` union all select `log`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,max((case `log`.`state_value` when 'draft' then `log`.`createtime` end)) AS `TCreate`,max((case `log`.`state_value` when 'draft' then `log`.`admin_id` end)) AS `TCreatePerson`,max((case `log`.`state_value` when 'wait_allot' then '1' else '0' end)) AS `TallotOver`,max((case `log`.`state_value` when 'wait_allot' then `log`.`admin_id` else NULL end)) AS `TallotPerson`,max((case `log`.`state_value` when 'wait_allot' then `log`.`createtime` else NULL end)) AS `Tallot`,max((case `log`.`state_value` when 'wait_receive_order' then '1' else '0' end)) AS `TgetorderOver`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`admin_id` else NULL end)) AS `TgetorderPerson`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`createtime` else NULL end)) AS `Tgetorder`,max((case `log`.`state_value` when 'wait_signin_materiel' then '1' else '0' end)) AS `TmaterialOver`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`admin_id` else NULL end)) AS `TmaterialPerson`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`createtime` else NULL end)) AS `Tmaterial`,max((case `log`.`state_value` when 'wait_pick_cargo' then '1' else '0' end)) AS `TpurchaseOver`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`admin_id` else NULL end)) AS `TpurchasePerson`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`createtime` else NULL end)) AS `Tpurchase`,max((case `log`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TpayOver`,max((case `log`.`state_value` when 'wait_pay' then `log`.`admin_id` else NULL end)) AS `TpayPerson`,max((case `log`.`state_value` when 'wait_pay' then `log`.`createtime` else NULL end)) AS `Tpay`,max((case `log`.`state_value` when 'wait_storage_connect' then '1' else '0' end)) AS `TchangeOver`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`admin_id` else NULL end)) AS `TchangePerson`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`createtime` else NULL end)) AS `Tchange`,NULL AS `TexpenseOver`,NULL AS `TexpensePerson`,NULL AS `Texpense`,NULL AS `TsortOver`,NULL AS `TsortPerson`,NULL AS `Tsort`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then '1' else '0' end)) AS `TallowOver`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`admin_id` else NULL end)) AS `TallowPerson`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`createtime` else NULL end)) AS `Tallow`,max((case `log`.`state_value` when 'finish' then '1' else '0' end)) AS `TcheckOver`,max((case `log`.`state_value` when 'finish' then `log`.`admin_id` else NULL end)) AS `TcheckPerson`,max((case `log`.`state_value` when 'finish' then `log`.`createtime` else '0' end)) AS `Tcheck`,`uct_waste_purchase`.`state` AS `State` from (`uct_waste_purchase` join `uct_waste_purchase_log` `log`) where ((`uct_waste_purchase`.`id` = `log`.`purchase_id`) and (`uct_waste_purchase`.`hand_mouth_data` = '0') and (`uct_waste_purchase`.`give_frame` = '1')) group by `uct_waste_purchase`.`id` union all select `log`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,max((case `log`.`state_value` when 'draft' then `log`.`createtime` end)) AS `TCreate`,max((case `log`.`state_value` when 'draft' then `log`.`admin_id` end)) AS `TCreatePerson`,NULL AS `TallotOver`,NULL AS `TallotPerson`,NULL AS `Tallot`,NULL AS `TgetorderOver`,NULL AS `TgetorderPerson`,NULL AS `Tgetorder`,NULL AS `TmaterialOver`,NULL AS `TmaterialPerson`,NULL AS `Tmaterial`,max((case `log`.`state_value` when 'wait_weigh' then '1' else '0' end)) AS `TpurchaseOver`,max((case `log`.`state_value` when 'wait_weigh' then `log`.`admin_id` else NULL end)) AS `TpurchasePerson`,max((case `log`.`state_value` when 'wait_weigh' then `log`.`createtime` else NULL end)) AS `Tpurchase`,NULL AS `TpayOver`,NULL AS `TpayPerson`,NULL AS `Tpay`,NULL AS `TchangeOver`,NULL AS `TchangePerson`,NULL AS `Tchange`,NULL AS `TexpenseOver`,NULL AS `TexpensePerson`,NULL AS `Texpense`,NULL AS `TsortOver`,NULL AS `TsortPerson`,NULL AS `Tsort`,max((case `log`.`state_value` when 'wait_confirm_order' then '1' else '0' end)) AS `TallowOver`,max((case `log`.`state_value` when 'wait_confirm_order' then `log`.`admin_id` else NULL end)) AS `TallowPerson`,max((case `log`.`state_value` when 'wait_confirm_order' then `log`.`createtime` else NULL end)) AS `Tallow`,max((case `log`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TcheckOver`,max((case `log`.`state_value` when 'wait_pay' then `log`.`admin_id` else NULL end)) AS `TcheckPerson`,max((case `log`.`state_value` when 'wait_pay' then `log`.`createtime` else '0' end)) AS `Tcheck`,`uct_waste_sell`.`state` AS `State` from (`uct_waste_sell` join `uct_waste_sell_log` `log`) where ((`uct_waste_sell`.`id` = `log`.`sell_id`) and isnull(`uct_waste_sell`.`purchase_id`)) group by `uct_waste_sell`.`id` union all select `Plog`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,max((case `Plog`.`state_value` when 'draft' then `Plog`.`createtime` end)) AS `TCreate`,max((case `Plog`.`state_value` when 'draft' then `Plog`.`admin_id` end)) AS `TCreatePerson`,max((case `Plog`.`state_value` when 'wait_allot' then '1' else '0' end)) AS `TallotOver`,max((case `Plog`.`state_value` when 'wait_allot' then `Plog`.`admin_id` end)) AS `TallotPerson`,max((case `Plog`.`state_value` when 'wait_allot' then `Plog`.`createtime` end)) AS `Tallot`,max((case `Slog`.`state_value` when 'wait_commit_order' then '1' else '0' end)) AS `TgetorderOver`,max((case `Slog`.`state_value` when 'wait_commit_order' then `Slog`.`admin_id` end)) AS `TgetorderPerson`,max((case `Slog`.`state_value` when 'wait_commit_order' then `Slog`.`createtime` end)) AS `Tgetorder`,max((case `Plog`.`state_value` when 'wait_receive_order' then '1' else '0' end)) AS `TmaterialOver`,max((case `Plog`.`state_value` when 'wait_receive_order' then `Plog`.`admin_id` end)) AS `TmaterialPerson`,max((case `Plog`.`state_value` when 'wait_receive_order' then `Plog`.`createtime` end)) AS `Tmaterial`,max((case `Plog`.`state_value` when 'wait_pick_cargo' then '1' else '0' end)) AS `TpurchaseOver`,max((case `Plog`.`state_value` when 'wait_pick_cargo' then `Plog`.`admin_id` else NULL end)) AS `TpurchasePerson`,max((case `Plog`.`state_value` when 'wait_pick_cargo' then `Plog`.`createtime` else NULL end)) AS `Tpurchase`,max((case `Slog`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TpayOver`,max((case `Slog`.`state_value` when 'wait_pay' then `Slog`.`admin_id` else NULL end)) AS `TpayPerson`,max((case `Slog`.`state_value` when 'wait_pay' then `Slog`.`createtime` else NULL end)) AS `Tpay`,max((case `Slog`.`state_value` when 'finish' then '1' else '0' end)) AS `TchangeOver`,max((case `Slog`.`state_value` when 'finish' then `Slog`.`admin_id` end)) AS `TchangePerson`,max((case `Slog`.`state_value` when 'finish' then `Slog`.`createtime` end)) AS `Tchange`,NULL AS `TexpenseOver`,NULL AS `TexpensePerson`,NULL AS `Texpense`,NULL AS `TsortOver`,NULL AS `TsortPerson`,NULL AS `Tsort`,max((case `Plog`.`state_value` when 'wait_return_fee' then '1' else '0' end)) AS `TallowOver`,max((case `Plog`.`state_value` when 'wait_return_fee' then `Plog`.`admin_id` end)) AS `TallowPerson`,max((case `Plog`.`state_value` when 'wait_return_fee' then `Plog`.`createtime` end)) AS `Tallow`,max((case `Plog`.`state_value` when 'finish' then '1' else '0' end)) AS `TcheckOver`,max((case `Plog`.`state_value` when 'finish' then `Plog`.`admin_id` else NULL end)) AS `TcheckPerson`,max((case `Plog`.`state_value` when 'finish' then `Plog`.`createtime` else '0' end)) AS `Tcheck`,`P`.`state` AS `State` from (((`uct_waste_sell` `S` join `uct_waste_sell_log` `Slog`) join `uct_waste_purchase` `P`) join `uct_waste_purchase_log` `Plog`) where ((`S`.`id` = `Slog`.`sell_id`) and (`S`.`order_id` = `P`.`order_id`) and (`P`.`id` = `Plog`.`purchase_id`) and (`Slog`.`is_timeline_data` = '1')) group by `P`.`order_id`;

-- ----------------------------
-- View structure for Trans_log_new
-- ----------------------------
DROP VIEW IF EXISTS `Trans_log_new`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_log_new` AS select `log`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,max((case `log`.`state_value` when 'draft' then `log`.`createtime` end)) AS `TCreate`,max((case `log`.`state_value` when 'draft' then `log`.`admin_id` end)) AS `TCreatePerson`,max((case `log`.`state_value` when 'wait_allot' then '1' else '0' end)) AS `TallotOver`,max((case `log`.`state_value` when 'wait_allot' then `log`.`admin_id` else '' end)) AS `TallotPerson`,max((case `log`.`state_value` when 'wait_allot' then `log`.`createtime` else '' end)) AS `Tallot`,max((case `log`.`state_value` when 'wait_receive_order' then '1' else '0' end)) AS `TgetorderOver`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`admin_id` else '' end)) AS `TgetorderPerson`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`createtime` else '' end)) AS `Tgetorder`,max((case `log`.`state_value` when 'wait_signin_materiel' then '1' else '0' end)) AS `TmaterialOver`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`admin_id` else '' end)) AS `TmaterialPerson`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`createtime` else '' end)) AS `Tmaterial`,max((case `log`.`state_value` when 'wait_pick_cargo' then '1' else '0' end)) AS `TpurchaseOver`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`admin_id` else '' end)) AS `TpurchasePerson`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`createtime` else '' end)) AS `Tpurchase`,max((case `log`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TpayOver`,max((case `log`.`state_value` when 'wait_pay' then `log`.`admin_id` else '' end)) AS `TpayPerson`,max((case `log`.`state_value` when 'wait_pay' then `log`.`createtime` else '' end)) AS `Tpay`,max((case `log`.`state_value` when 'wait_storage_connect' then '1' else '0' end)) AS `TchangeOver`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`admin_id` else '' end)) AS `TchangePerson`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`createtime` else '' end)) AS `Tchange`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then '1' else '0' end)) AS `TexpenseOver`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`admin_id` else '' end)) AS `TexpensePerson`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`createtime` else '' end)) AS `Texpense`,max((case `log`.`state_value` when 'wait_storage_sort' then '1' else '0' end)) AS `TsortOver`,max((case `log`.`state_value` when 'wait_storage_sort' then `log`.`admin_id` else '' end)) AS `TsortPerson`,max((case `log`.`state_value` when 'wait_storage_sort' then `log`.`createtime` else '' end)) AS `Tsort`,max((case `log`.`state_value` when 'wait_storage_confirm' then '1' else '0' end)) AS `TallowOver`,max((case `log`.`state_value` when 'wait_storage_confirm' then `log`.`admin_id` else '' end)) AS `TallowPerson`,max((case `log`.`state_value` when 'wait_storage_confirm' then `log`.`createtime` else '' end)) AS `Tallow`,max((case `log`.`state_value` when 'finish' then '1' else '0' end)) AS `TcheckOver`,max((case `log`.`state_value` when 'finish' then `log`.`admin_id` else '' end)) AS `TcheckPerson`,max((case `log`.`state_value` when 'finish' then `log`.`createtime` else '' end)) AS `Tcheck`,`uct_waste_purchase`.`state` AS `NowState` from (`uct_waste_purchase` join `uct_waste_purchase_log` `log`) where ((`uct_waste_purchase`.`id` = `log`.`purchase_id`) and (`uct_waste_purchase`.`hand_mouth_data` = '0') and (`uct_waste_purchase`.`give_frame` = '0')) group by `uct_waste_purchase`.`id` union all select `log`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,max((case `log`.`state_value` when 'draft' then `log`.`createtime` end)) AS `TCreate`,max((case `log`.`state_value` when 'draft' then `log`.`admin_id` end)) AS `TCreatePerson`,max((case `log`.`state_value` when 'wait_allot' then '1' else '0' end)) AS `TallotOver`,max((case `log`.`state_value` when 'wait_allot' then `log`.`admin_id` else '' end)) AS `TallotPerson`,max((case `log`.`state_value` when 'wait_allot' then `log`.`createtime` else '' end)) AS `Tallot`,max((case `log`.`state_value` when 'wait_receive_order' then '1' else '0' end)) AS `TgetorderOver`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`admin_id` else '' end)) AS `TgetorderPerson`,max((case `log`.`state_value` when 'wait_receive_order' then `log`.`createtime` else '' end)) AS `Tgetorder`,max((case `log`.`state_value` when 'wait_signin_materiel' then '1' else '0' end)) AS `TmaterialOver`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`admin_id` else '' end)) AS `TmaterialPerson`,max((case `log`.`state_value` when 'wait_signin_materiel' then `log`.`createtime` else '' end)) AS `Tmaterial`,max((case `log`.`state_value` when 'wait_pick_cargo' then '1' else '0' end)) AS `TpurchaseOver`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`admin_id` else '' end)) AS `TpurchasePerson`,max((case `log`.`state_value` when 'wait_pick_cargo' then `log`.`createtime` else '' end)) AS `Tpurchase`,max((case `log`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TpayOver`,max((case `log`.`state_value` when 'wait_pay' then `log`.`admin_id` else '' end)) AS `TpayPerson`,max((case `log`.`state_value` when 'wait_pay' then `log`.`createtime` else '' end)) AS `Tpay`,max((case `log`.`state_value` when 'wait_storage_connect' then '1' else '0' end)) AS `TchangeOver`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`admin_id` else '' end)) AS `TchangePerson`,max((case `log`.`state_value` when 'wait_storage_connect' then `log`.`createtime` else '' end)) AS `Tchange`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then '1' else '0' end)) AS `TexpenseOver`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`admin_id` else '' end)) AS `TexpensePerson`,max((case `log`.`state_value` when 'wait_storage_connect_confirm' then `log`.`createtime` else '' end)) AS `Texpense`,'' AS `TsortOver`,'' AS `TsortPerson`,'' AS `Tsort`,'' AS `TallowOver`,'' AS `TallowPerson`,max((case `log`.`state_value` when 'wait_storage_confirm' then `log`.`createtime` else '' end)) AS `Tallow`,max((case `log`.`state_value` when 'finish' then '1' else '0' end)) AS `TcheckOver`,max((case `log`.`state_value` when 'finish' then `log`.`admin_id` else '' end)) AS `TcheckPerson`,max((case `log`.`state_value` when 'finish' then `log`.`createtime` else '' end)) AS `Tcheck`,`uct_waste_purchase`.`state` AS `NowState` from (`uct_waste_purchase` join `uct_waste_purchase_log` `log`) where ((`uct_waste_purchase`.`id` = `log`.`purchase_id`) and (`uct_waste_purchase`.`hand_mouth_data` = '0') and (`uct_waste_purchase`.`give_frame` = '1')) group by `uct_waste_purchase`.`id` union all select `log`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,max((case `log`.`state_value` when 'draft' then `log`.`createtime` end)) AS `TCreate`,max((case `log`.`state_value` when 'draft' then `log`.`admin_id` end)) AS `TCreatePerson`,'' AS `TallotOver`,'' AS `TallotPerson`,'' AS `Tallot`,'' AS `TgetorderOver`,'' AS `TgetorderPerson`,'' AS `Tgetorder`,'' AS `TmaterialOver`,'' AS `TmaterialPerson`,'' AS `Tmaterial`,max((case `log`.`state_value` when 'wait_weigh' then '1' else '0' end)) AS `TpurchaseOver`,max((case `log`.`state_value` when 'wait_weigh' then `log`.`admin_id` else '' end)) AS `TpurchasePerson`,max((case `log`.`state_value` when 'wait_weigh' then `log`.`createtime` else '' end)) AS `Tpurchase`,max((case `log`.`state_value` when 'wait_confirm_order' then '1' else '0' end)) AS `TpayOver`,max((case `log`.`state_value` when 'wait_confirm_order' then `log`.`admin_id` else '' end)) AS `TpayPerson`,max((case `log`.`state_value` when 'wait_confirm_order' then `log`.`createtime` else '' end)) AS `Tpay`,'' AS `TchangeOver`,'' AS `TchangePerson`,'' AS `Tchange`,'' AS `TexpenseOver`,'' AS `TexpensePerson`,'' AS `Texpense`,'' AS `TsortOver`,'' AS `TsortPerson`,'' AS `Tsort`,'' AS `TallowOver`,'' AS `TallowPerson`,'' AS `Tallow`,max((case `log`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TcheckOver`,max((case `log`.`state_value` when 'wait_pay' then `log`.`admin_id` else '' end)) AS `TcheckPerson`,max((case `log`.`state_value` when 'wait_pay' then `log`.`createtime` else '' end)) AS `Tcheck`,`uct_waste_sell`.`state` AS `NowState` from (`uct_waste_sell` join `uct_waste_sell_log` `log`) where ((`uct_waste_sell`.`id` = `log`.`sell_id`) and isnull(`uct_waste_sell`.`purchase_id`)) group by `uct_waste_sell`.`id` union all select `Plog`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,max((case `Plog`.`state_value` when 'draft' then `Plog`.`createtime` end)) AS `TCreate`,max((case `Plog`.`state_value` when 'draft' then `Plog`.`admin_id` end)) AS `TCreatePerson`,max((case `Plog`.`state_value` when 'wait_allot' then '1' else '0' end)) AS `TallotOver`,max((case `Plog`.`state_value` when 'wait_allot' then `Plog`.`admin_id` end)) AS `TallotPerson`,max((case `Plog`.`state_value` when 'wait_allot' then `Plog`.`createtime` end)) AS `Tallot`,max((case `Slog`.`state_value` when 'wait_commit_order' then '1' else '0' end)) AS `TgetorderOver`,max((case `Slog`.`state_value` when 'wait_commit_order' then `Slog`.`admin_id` end)) AS `TgetorderPerson`,max((case `Slog`.`state_value` when 'wait_commit_order' then `Slog`.`createtime` end)) AS `Tgetorder`,max((case `Plog`.`state_value` when 'wait_receive_order' then '1' else '0' end)) AS `TmaterialOver`,max((case `Plog`.`state_value` when 'wait_receive_order' then `Plog`.`admin_id` end)) AS `TmaterialPerson`,max((case `Plog`.`state_value` when 'wait_receive_order' then `Plog`.`createtime` end)) AS `Tmaterial`,max((case `Slog`.`state_value` when 'wait_pick_cargo' then '1' else '0' end)) AS `TpurchaseOver`,max((case `Slog`.`state_value` when 'wait_pick_cargo' then `Slog`.`admin_id` else '' end)) AS `TpurchasePerson`,max((case `Slog`.`state_value` when 'wait_pick_cargo' then `Slog`.`createtime` else '' end)) AS `Tpurchase`,max((case `Slog`.`state_value` when 'wait_pay' then '1' else '0' end)) AS `TpayOver`,max((case `Slog`.`state_value` when 'wait_pay' then `Slog`.`admin_id` else '' end)) AS `TpayPerson`,max((case `Slog`.`state_value` when 'wait_pay' then `Slog`.`createtime` else '' end)) AS `Tpay`,max((case `Slog`.`state_value` when 'finish' then '1' else '0' end)) AS `TchangeOver`,max((case `Slog`.`state_value` when 'finish' then `Slog`.`admin_id` end)) AS `TchangePerson`,max((case `Slog`.`state_value` when 'finish' then `Slog`.`createtime` end)) AS `Tchange`,max((case `Plog`.`state_value` when 'wait_return_fee' then '1' else '0' end)) AS `TexpenseOver`,max((case `Plog`.`state_value` when 'wait_return_fee' then `Plog`.`admin_id` end)) AS `TexpensePerson`,max((case `Plog`.`state_value` when 'wait_return_fee' then `Plog`.`createtime` end)) AS `Texpense`,'' AS `TsortOver`,'' AS `TsortPerson`,'' AS `Tsort`,'' AS `TallowOver`,'' AS `TallowPerson`,'' AS `Tallow`,max((case `Plog`.`state_value` when 'finish' then '1' else '0' end)) AS `TcheckOver`,max((case `Plog`.`state_value` when 'finish' then `Plog`.`admin_id` else '' end)) AS `TcheckPerson`,max((case `Plog`.`state_value` when 'finish' then `Plog`.`createtime` else '' end)) AS `Tcheck`,`P`.`state` AS `NowState` from (((`uct_waste_sell` `S` join `uct_waste_sell_log` `Slog`) join `uct_waste_purchase` `P`) join `uct_waste_purchase_log` `Plog`) where ((`S`.`id` = `Slog`.`sell_id`) and (`S`.`order_id` = `P`.`order_id`) and (`P`.`id` = `Plog`.`purchase_id`) and (`Slog`.`is_timeline_data` = '1')) group by `P`.`order_id`;

-- ----------------------------
-- View structure for Trans_main
-- ----------------------------
DROP VIEW IF EXISTS `Trans_main`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_main` AS select `test_lvhuan`.`uct_waste_purchase`.`branch_id` AS `FRelateBrID`,`test_lvhuan`.`uct_waste_purchase`.`id` AS `FInterID`,'PUR' AS `FTranType`,(case `test_lvhuan`.`Trans_log_table`.`TpurchaseOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d %H:%i:%S') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tpurchase`),'%Y-%m-%d %H:%i:%S') end) AS `FDate`,(case `test_lvhuan`.`Trans_log_table`.`TpurchaseOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tpurchase`),'%Y-%m-%d') end) AS `Date`,`test_lvhuan`.`uct_waste_purchase`.`train_number` AS `FTrainNum`,`test_lvhuan`.`uct_waste_purchase`.`order_id` AS `FBillNo`,`test_lvhuan`.`uct_waste_purchase`.`customer_id` AS `FSupplyID`,`test_lvhuan`.`uct_waste_purchase`.`manager_id` AS `Fbusiness`,concat('AD',`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge`) AS `FDCStockID`,concat('CU',`test_lvhuan`.`uct_waste_purchase`.`customer_id`) AS `FSCStockID`,(case `test_lvhuan`.`uct_waste_purchase`.`state` when 'cancel' then '0' else '1' end) AS `FCancellation`,'0' AS `FROB`,`test_lvhuan`.`Trans_log_table`.`TallowOver` AS `FCorrent`,`test_lvhuan`.`Trans_log_table`.`TcheckOver` AS `FStatus`,'' AS `FUpStockWhenSave`,'' AS `FExplanation`,`test_lvhuan`.`uct_waste_customer`.`service_department` AS `FDeptID`,`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FEmpID`,`test_lvhuan`.`Trans_log_table`.`TcheckPerson` AS `FCheckerID`,(case `test_lvhuan`.`Trans_log_table`.`TcheckOver` when '0' then 'null' else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tcheck`),'%Y-%m-%d %H:%i:%S') end) AS `FCheckDate`,`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FFManagerID`,`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FSManagerID`,`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FBillerID`,'1' AS `FCurrencyID`,`test_lvhuan`.`Trans_log_table`.`state` AS `FNowState`,((case `test_lvhuan`.`uct_waste_purchase`.`hand_mouth_data` when '1' then '1' else '0' end) + (case `test_lvhuan`.`uct_waste_purchase`.`give_frame` when '1' then '3' else 0 end)) AS `FSaleStyle`,`test_lvhuan`.`uct_waste_customer`.`settle_way` AS `FPOStyle`,`test_lvhuan`.`uct_waste_customer`.`back_percent` AS `FPOPrecent`,round(`test_lvhuan`.`uct_waste_purchase`.`cargo_weight`,1) AS `TalFQty`,round(`test_lvhuan`.`uct_waste_purchase`.`cargo_price`,2) AS `TalFAmount`,`test_lvhuan`.`uct_waste_purchase`.`purchase_expense` AS `TalFeeFrist`,`Trans_total_fee_rf`.`car_fee` AS `TalFeeSecond`,`Trans_total_fee_rf`.`man_fee` AS `TalFeeThird`,`Trans_total_fee_rf`.`other_return_fee` AS `TalFeeForth`,0 AS `TalFeeFifth` from (((`test_lvhuan`.`uct_waste_purchase` join `test_lvhuan`.`uct_waste_customer`) join `test_lvhuan`.`Trans_log_table`) left join `test_lvhuan`.`Trans_total_fee_rf` on((`Trans_total_fee_rf`.`purchase_id` = `test_lvhuan`.`uct_waste_purchase`.`id`))) where ((`test_lvhuan`.`uct_waste_purchase`.`customer_id` = `test_lvhuan`.`uct_waste_customer`.`id`) and (`test_lvhuan`.`uct_waste_purchase`.`id` = `test_lvhuan`.`Trans_log_table`.`FInterID`) and (`test_lvhuan`.`Trans_log_table`.`FTranType` = 'PUR') and (`test_lvhuan`.`uct_waste_purchase`.`order_id` > 201806300000000000)) union all select `test_lvhuan`.`uct_waste_sell`.`branch_id` AS `FRelateBrID`,`test_lvhuan`.`uct_waste_sell`.`id` AS `FInterID`,'SEL' AS `FTranType`,(case `test_lvhuan`.`Trans_log_table`.`TallowOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d %H:%i:%S') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tallow`),'%Y-%m-%d %H:%i:%S') end) AS `FDate`,(case `test_lvhuan`.`Trans_log_table`.`TallowOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tallow`),'%Y-%m-%d') end) AS `Date`,`test_lvhuan`.`uct_waste_purchase`.`train_number` AS `FTrainNum`,`test_lvhuan`.`uct_waste_sell`.`order_id` AS `FBillNo`,`test_lvhuan`.`uct_waste_sell`.`customer_id` AS `FSupplyID`,'' AS `Fbusiness`,concat('DC',`test_lvhuan`.`uct_waste_sell`.`customer_id`) AS `FDCStockID`,if(((`test_lvhuan`.`uct_waste_sell`.`purchase_id` is not null) = 0),concat('LH',`test_lvhuan`.`uct_waste_sell`.`warehouse_id`),concat('AD',`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge`)) AS `FSCStockID`,(case `test_lvhuan`.`uct_waste_sell`.`state` when 'cancel' then '0' else '1' end) AS `FCancellation`,'0' AS `FROB`,`test_lvhuan`.`Trans_log_table`.`TallowOver` AS `FCorrent`,`test_lvhuan`.`Trans_log_table`.`TcheckOver` AS `FStatus`,'0' AS `FUpStockWhenSave`,'' AS `FExplanation`,'4' AS `FDeptID`,`test_lvhuan`.`uct_waste_sell`.`seller_id` AS `FEmpID`,`test_lvhuan`.`Trans_log_table`.`TcheckPerson` AS `FCheckerID`,(case `test_lvhuan`.`Trans_log_table`.`TcheckOver` when '0' then 'null' else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tcheck`),'%Y-%m-%d %H:%i:%S') end) AS `FCheckDate`,`test_lvhuan`.`uct_waste_sell`.`customer_linkman_id` AS `FFManagerID`,`test_lvhuan`.`uct_waste_sell`.`customer_linkman_id` AS `FSManagerID`,`test_lvhuan`.`uct_waste_sell`.`seller_id` AS `FBillerID`,'1' AS `FCurrencyID`,`test_lvhuan`.`Trans_log_table`.`state` AS `FNowState`,if(((`test_lvhuan`.`uct_waste_sell`.`purchase_id` is not null) = 1),'1','2') AS `FSaleStyle`,'' AS `FPOStyle`,'' AS `FPOPrecent`,round(`test_lvhuan`.`uct_waste_sell`.`cargo_weight`,1) AS `TalFQty`,round(`test_lvhuan`.`uct_waste_sell`.`cargo_price`,2) AS `TalFAmount`,`test_lvhuan`.`uct_waste_sell`.`materiel_price` AS `TalFeeFrist`,`test_lvhuan`.`uct_waste_sell`.`other_price` AS `TalFeeSecond`,0 AS `TalFeeThird`,0 AS `TalFeeForth`,0 AS `TalFeeFifth` from (((`test_lvhuan`.`uct_waste_sell` join `test_lvhuan`.`uct_waste_customer`) join `test_lvhuan`.`Trans_log_table`) join `test_lvhuan`.`uct_waste_purchase`) where ((`test_lvhuan`.`uct_waste_sell`.`customer_id` = `test_lvhuan`.`uct_waste_customer`.`id`) and (`test_lvhuan`.`uct_waste_sell`.`purchase_id` = `test_lvhuan`.`Trans_log_table`.`FInterID`) and (`test_lvhuan`.`Trans_log_table`.`FTranType` = 'PUR') and (`test_lvhuan`.`uct_waste_sell`.`purchase_id` = `test_lvhuan`.`uct_waste_purchase`.`id`) and (`test_lvhuan`.`uct_waste_sell`.`order_id` > 201806300000000000)) union all select `test_lvhuan`.`uct_waste_sell`.`branch_id` AS `FRelateBrID`,`test_lvhuan`.`uct_waste_sell`.`id` AS `FInterID`,'SEL' AS `FTranType`,(case `test_lvhuan`.`Trans_log_table`.`TallowOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d %H:%i:%S') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tallow`),'%Y-%m-%d %H:%i:%S') end) AS `FDate`,(case `test_lvhuan`.`Trans_log_table`.`TallowOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tallow`),'%Y-%m-%d') end) AS `Date`,'1' AS `FTrainNum`,`test_lvhuan`.`uct_waste_sell`.`order_id` AS `FBillNo`,`test_lvhuan`.`uct_waste_sell`.`customer_id` AS `FSupplyID`,'' AS `Fbusiness`,concat('DC',`test_lvhuan`.`uct_waste_sell`.`customer_id`) AS `FDCStockID`,if(((`test_lvhuan`.`uct_waste_sell`.`purchase_id` is not null) = 0),concat('LH',`test_lvhuan`.`uct_waste_sell`.`warehouse_id`),'') AS `FSCStockID`,(case `test_lvhuan`.`uct_waste_sell`.`state` when 'cancel' then '0' else '1' end) AS `FCancellation`,'0' AS `FROB`,`test_lvhuan`.`Trans_log_table`.`TallowOver` AS `FCorrent`,`test_lvhuan`.`Trans_log_table`.`TcheckOver` AS `FStatus`,`test_lvhuan`.`Trans_log_table`.`TallowOver` AS `FUpStockWhenSave`,'' AS `FExplanation`,'4' AS `FDeptID`,`test_lvhuan`.`uct_waste_sell`.`seller_id` AS `FEmpID`,`test_lvhuan`.`Trans_log_table`.`TcheckPerson` AS `FCheckerID`,(case `test_lvhuan`.`Trans_log_table`.`TcheckOver` when '0' then 'null' else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tcheck`),'%Y-%m-%d %H:%i:%S') end) AS `FCheckDate`,`test_lvhuan`.`uct_waste_sell`.`customer_linkman_id` AS `FFManagerID`,`test_lvhuan`.`uct_waste_sell`.`customer_linkman_id` AS `FSManagerID`,`test_lvhuan`.`uct_waste_sell`.`seller_id` AS `FBillerID`,'1' AS `FCurrencyID`,`test_lvhuan`.`Trans_log_table`.`state` AS `FNowState`,if(((`test_lvhuan`.`uct_waste_sell`.`purchase_id` is not null) = 1),'1','2') AS `FSaleStyle`,'' AS `FPOStyle`,'' AS `FPOPrecent`,round(`test_lvhuan`.`uct_waste_sell`.`cargo_weight`,1) AS `TalFQty`,round(`test_lvhuan`.`uct_waste_sell`.`cargo_price`,2) AS `TalFAmount`,`test_lvhuan`.`uct_waste_sell`.`materiel_price` AS `TalFeeFrist`,`test_lvhuan`.`uct_waste_sell`.`other_price` AS `TalFeeSecond`,0 AS `TalFeeThird`,0 AS `TalFeeForth`,0 AS `TalFeeFifth` from ((`test_lvhuan`.`uct_waste_sell` join `test_lvhuan`.`uct_waste_customer`) join `test_lvhuan`.`Trans_log_table`) where ((`test_lvhuan`.`uct_waste_sell`.`customer_id` = `test_lvhuan`.`uct_waste_customer`.`id`) and (`test_lvhuan`.`uct_waste_sell`.`id` = `test_lvhuan`.`Trans_log_table`.`FInterID`) and (`test_lvhuan`.`Trans_log_table`.`FTranType` = 'SEL') and ((`test_lvhuan`.`uct_waste_sell`.`purchase_id` is not null) = 0) and (`test_lvhuan`.`uct_waste_sell`.`order_id` > 201806300000000000)) union all select `test_lvhuan`.`uct_waste_purchase`.`branch_id` AS `FRelateBrID`,`test_lvhuan`.`uct_waste_purchase`.`id` AS `FInterID`,'SOR' AS `FTranType`,(case `test_lvhuan`.`Trans_log_table`.`TallowOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d %H:%i:%S') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tallow`),'%Y-%m-%d %H:%i:%S') end) AS `FDate`,(case `test_lvhuan`.`Trans_log_table`.`TallowOver` when '0' then date_format(from_unixtime(1),'%Y-%m-%d') else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tallow`),'%Y-%m-%d') end) AS `Date`,`test_lvhuan`.`uct_waste_purchase`.`train_number` AS `FTrainNum`,`test_lvhuan`.`uct_waste_purchase`.`order_id` AS `FBillNo`,`test_lvhuan`.`uct_waste_purchase`.`customer_id` AS `FSupplyID`,`test_lvhuan`.`uct_waste_purchase`.`manager_id` AS `Fbusiness`,concat('LH',`test_lvhuan`.`uct_waste_warehouse`.`parent_id`) AS `FDCStockID`,concat('AD',`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge`) AS `FSCStockID`,(case `test_lvhuan`.`uct_waste_purchase`.`state` when 'cancel' then '0' else '1' end) AS `FCancellation`,'0' AS `FROB`,`test_lvhuan`.`Trans_log_table`.`TallowOver` AS `FCorrent`,`test_lvhuan`.`Trans_log_table`.`TcheckOver` AS `FStatus`,`test_lvhuan`.`Trans_log_table`.`TsortOver` AS `FUpStockWhenSave`,'' AS `FExplanation`,`test_lvhuan`.`uct_waste_customer`.`service_department` AS `FDeptID`,`test_lvhuan`.`uct_waste_warehouse`.`admin_id` AS `FEmpID`,`test_lvhuan`.`Trans_log_table`.`TcheckPerson` AS `FCheckerID`,(case `test_lvhuan`.`Trans_log_table`.`TcheckOver` when '0' then 'null' else date_format(from_unixtime(`test_lvhuan`.`Trans_log_table`.`Tcheck`),'%Y-%m-%d %H:%i:%S') end) AS `FCheckDate`,`test_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FFManagerID`,`test_lvhuan`.`uct_waste_warehouse`.`admin_id` AS `FSManagerID`,`test_lvhuan`.`uct_waste_warehouse`.`admin_id` AS `FBillerID`,'1' AS `FCurrencyID`,`test_lvhuan`.`Trans_log_table`.`state` AS `FNowState`,('0' + (case `test_lvhuan`.`uct_waste_purchase`.`give_frame` when '1' then '3' else 0 end)) AS `FSaleStyle`,`test_lvhuan`.`uct_waste_customer`.`settle_way` AS `FPOStyle`,`test_lvhuan`.`uct_waste_customer`.`back_percent` AS `FPOPrecent`,round(`test_lvhuan`.`uct_waste_purchase`.`storage_weight`,1) AS `TalFQty`,round(`test_lvhuan`.`uct_waste_purchase`.`storage_cargo_price`,2) AS `TalFAmount`,`Trans_total_fee_sg`.`sort_fee` AS `TalFeeFrist`,`Trans_total_fee_sg`.`materiel_fee` AS `TalFeeSecond`,`Trans_total_fee_sg`.`other_sort_fee` AS `TalFeeThird`,`test_lvhuan`.`uct_waste_purchase`.`total_cargo_price` AS `TalFeeForth`,`test_lvhuan`.`uct_waste_purchase`.`total_labor_price` AS `TalFeeFifth` from ((((`test_lvhuan`.`uct_waste_purchase` join `test_lvhuan`.`uct_waste_customer`) join `test_lvhuan`.`Trans_log_table`) join `test_lvhuan`.`uct_waste_warehouse`) left join `test_lvhuan`.`Trans_total_fee_sg` on((`Trans_total_fee_sg`.`purchase_id` = `test_lvhuan`.`uct_waste_purchase`.`id`))) where ((`test_lvhuan`.`uct_waste_purchase`.`customer_id` = `test_lvhuan`.`uct_waste_customer`.`id`) and (`test_lvhuan`.`uct_waste_purchase`.`id` = `test_lvhuan`.`Trans_log_table`.`FInterID`) and (`test_lvhuan`.`Trans_log_table`.`FTranType` = 'PUR') and (`test_lvhuan`.`uct_waste_warehouse`.`id` = `test_lvhuan`.`uct_waste_purchase`.`sort_point`) and (`test_lvhuan`.`uct_waste_purchase`.`order_id` > 201806300000000000));

-- ----------------------------
-- View structure for Trans_materiel
-- ----------------------------
DROP VIEW IF EXISTS `Trans_materiel`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_materiel` AS select `mel`.`FInterID` AS `FInterID`,`mel`.`FTranType` AS `FTranType`,`mel`.`FEntryID` AS `FEntryID`,`mel`.`FMaterielID` AS `FMaterielID`,`mel`.`FUseCount` AS `FUseCount`,round(`mel`.`FPrice`,2) AS `FPrice`,round((`mel`.`FUseCount` * `mel`.`FPrice`),2) AS `FMeterielAmount`,`mel`.`FMeterieltime` AS `FMeterieltime` from (select `test_lvhuan`.`uct_waste_purchase_materiel`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,`test_lvhuan`.`uct_waste_purchase_materiel`.`id` AS `FEntryID`,`test_lvhuan`.`uct_waste_purchase_materiel`.`materiel_id` AS `FMaterielID`,cast(`test_lvhuan`.`uct_waste_purchase_materiel`.`storage_amount` as signed) AS `FUseCount`,`test_lvhuan`.`uct_waste_purchase_materiel`.`inside_price` AS `FPrice`,`test_lvhuan`.`uct_waste_purchase_materiel`.`updatetime` AS `FMeterieltime` from `test_lvhuan`.`uct_waste_purchase_materiel` where (`test_lvhuan`.`uct_waste_purchase_materiel`.`use_type` = 0) union all select `test_lvhuan`.`uct_waste_purchase_materiel`.`purchase_id` AS `FInterID`,'SOR' AS `FTranType`,`test_lvhuan`.`uct_waste_purchase_materiel`.`id` AS `FEntryID`,`test_lvhuan`.`uct_waste_purchase_materiel`.`materiel_id` AS `FMaterielID`,(cast(`test_lvhuan`.`uct_waste_purchase_materiel`.`pick_amount` as signed) - cast(`test_lvhuan`.`uct_waste_purchase_materiel`.`storage_amount` as signed)) AS `FUseCount`,`test_lvhuan`.`uct_waste_purchase_materiel`.`inside_price` AS `FPrice`,`test_lvhuan`.`uct_waste_purchase_materiel`.`updatetime` AS `FMeterieltime` from `test_lvhuan`.`uct_waste_purchase_materiel` where (`test_lvhuan`.`uct_waste_purchase_materiel`.`use_type` = 1) union all select `test_lvhuan`.`uct_waste_sell_materiel`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,`test_lvhuan`.`uct_waste_sell_materiel`.`id` AS `FEntryID`,`test_lvhuan`.`uct_waste_sell_materiel`.`materiel_id` AS `FMaterielID`,`test_lvhuan`.`uct_waste_sell_materiel`.`pick_amount` AS `FUseCount`,`test_lvhuan`.`uct_waste_sell_materiel`.`unit_price` AS `FPrice`,`test_lvhuan`.`uct_waste_sell_materiel`.`updatetime` AS `FMeterieltime` from `test_lvhuan`.`uct_waste_sell_materiel`) `mel` group by `mel`.`FInterID`,`mel`.`FTranType`,`mel`.`FMaterielID`;

-- ----------------------------
-- View structure for Trans_materiel_total
-- ----------------------------
DROP VIEW IF EXISTS `Trans_materiel_total`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_materiel_total` AS select `Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,sum((case `uct_materiel`.`name` when '分类箱' then `Trans_materiel_table`.`FUseCount` else 0 end)) AS `FUseCount_flx`,sum((case `uct_materiel`.`name` when '太空包' then `Trans_materiel_table`.`FUseCount` else 0 end)) AS `FUseCount_tkb`,sum((case `uct_materiel`.`name` when '编织袋' then `Trans_materiel_table`.`FUseCount` else 0 end)) AS `FUseCount_bzd`,date_format(from_unixtime(`Trans_materiel_table`.`FMeterieltime`),'%Y-%m-%d') AS `FMeterieltime` from ((`Trans_materiel_table` join `Trans_main_table`) join `uct_materiel`) where ((`Trans_materiel_table`.`FInterID` = `Trans_main_table`.`FInterID`) and (`Trans_materiel_table`.`FMaterielID` = `uct_materiel`.`id`)) group by `Trans_materiel_table`.`FInterID`;

-- ----------------------------
-- View structure for Trans_month_customer
-- ----------------------------
DROP VIEW IF EXISTS `Trans_month_customer`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_month_customer` AS select `Trans_main`.`FRelateBrID` AS `FRelateBrID`,`Trans_main`.`FSupplyID` AS `FSupplyID`,`Trans_main`.`Fbusiness` AS `Fbusiness`,`Trans_main`.`TalFQty` AS `total_weight`,`Trans_main`.`TalFAmount` AS `total_profit`,`TalTrash`.`trash_weight` AS `trash_weight`,`Trans_main`.`FDate` AS `FDate` from (`test_lvhuan`.`Trans_main` join (select `test_lvhuan`.`uct_waste_purchase_cargo`.`purchase_id` AS `FInterID`,sum((case `test_lvhuan`.`uct_waste_purchase_cargo`.`cargo_name` when '垃圾' then `test_lvhuan`.`uct_waste_purchase_cargo`.`net_weight` else 0 end)) AS `trash_weight` from `test_lvhuan`.`uct_waste_purchase_cargo` group by `test_lvhuan`.`uct_waste_purchase_cargo`.`purchase_id`) `TalTrash`) where ((`Trans_main`.`FTranType` = 'PUR') and (`TalTrash`.`FInterID` = `Trans_main`.`FInterID`));

-- ----------------------------
-- View structure for Trans_month_SEL_rank
-- ----------------------------
DROP VIEW IF EXISTS `Trans_month_SEL_rank`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_month_SEL_rank` AS select `SEL_rank`.`FRelateBrID` AS `FRelateBrID`,`SEL_rank`.`FItemID` AS `FItemID`,`SEL_rank`.`total_weight` AS `total_weight`,`SEL_rank`.`total_price` AS `total_price`,`SEL_rank`.`FDate` AS `FDate` from (select `Trans_main`.`FRelateBrID` AS `FRelateBrID`,`Trans_assist`.`FItemID` AS `FItemID`,round(sum(`Trans_assist`.`FQty`),1) AS `total_weight`,round(sum(`Trans_assist`.`FAmount`),2) AS `total_price`,date_format(`Trans_main`.`FDate`,'%Y-%m-%d') AS `FDate` from (`test_lvhuan`.`Trans_main` join `test_lvhuan`.`Trans_assist`) where ((`Trans_main`.`FTranType` = 'SEL') and (`Trans_main`.`FInterID` = `Trans_assist`.`FInterID`) and (date_format(`Trans_main`.`FDate`,'%Y-%m-%d') > 0) and (`Trans_assist`.`FTranType` = 'SEL') and (`Trans_main`.`FStatus` = 1)) group by `Trans_main`.`FRelateBrID`,date_format(`Trans_main`.`FDate`,'%Y-%m-%d'),`Trans_assist`.`FItemID`) `SEL_rank` where (not(`SEL_rank`.`FDate` in (select `test_lvhuan`.`Trans_month_SEL_rank_table`.`FDate` from `test_lvhuan`.`Trans_month_SEL_rank_table`)));

-- ----------------------------
-- View structure for Trans_orderCount
-- ----------------------------
DROP VIEW IF EXISTS `Trans_orderCount`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_orderCount` AS select `Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,`Trans_main_table`.`FDeptID` AS `FDeptID`,`Trans_main_table`.`FEmpID` AS `FEmpID`,count(`Trans_main_table`.`FBillNo`) AS `orderCount`,date_format(`Trans_main_table`.`FDate`,'%Y-%m-%d') AS `FDate` from `Trans_main_table` where (`Trans_main_table`.`FTranType` = 'PUR') group by date_format(`Trans_main_table`.`FDate`,'%Y-%m-%d'),`Trans_main_table`.`FRelateBrID`,`Trans_main_table`.`FDeptID`,`Trans_main_table`.`FEmpID` having (date_format(`FDate`,'%Y-%m-%d') >= date_format('2018-07-01','%Y-%m-%d')) union all select `Trans_main_table`.`FRelateBrID` AS `FRelateBrID`,'3' AS `FDeptID`,'-' AS `FEmpID`,count(`Trans_main_table`.`FBillNo`) AS `orderCount`,date_format(`Trans_main_table`.`FDate`,'%Y-%m-%d') AS `FDate` from `Trans_main_table` where (`Trans_main_table`.`FTranType` = 'SOR') group by date_format(`Trans_main_table`.`FDate`,'%Y-%m-%d'),`Trans_main_table`.`FRelateBrID` having (date_format(`FDate`,'%Y-%m-%d') >= date_format('2018-07-01','%Y-%m-%d'));

-- ----------------------------
-- View structure for Trans_order_unfinished
-- ----------------------------
DROP VIEW IF EXISTS `Trans_order_unfinished`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_order_unfinished` AS select date_format(`main`.`FDate`,'%Y-%m-%d') AS `PUR_Date`,`main`.`FSupplyID` AS `FSupplyID`,`main`.`FBillNo` AS `FBillNo`,(case `main`.`FPOPrecent` when '999' then '1' when '0' then '0' else (`main`.`FPOPrecent` / 100) end) AS `FPOPrecent`,`main`.`FEmpID` AS `FEmpID`,`main`.`FTrainNum` AS `train_number`,`main`.`TalFQty` AS `TalFQty`,`main`.`TalFAmount` AS `TalFAmount`,round((case `main`.`FPOPrecent` when '999' then (`main`.`TalFAmount` * 1) when '0' then 0 else ((`main`.`TalFAmount` * cast(`main`.`FPOPrecent` as signed)) / 100) end),3) AS `real_pay`,sum((case `fee`.`FFeeID` when '供应商人工补助费' then `fee`.`FFeeAmount` when '供应商车辆补助费' then `fee`.`FFeeAmount` when '供应商垃圾补助费' then `fee`.`FFeeAmount` else 0 end)) AS `back_fee`,(round((case `main`.`FPOPrecent` when '999' then (`main`.`TalFAmount` * 1) when '0' then 0 else ((`main`.`TalFAmount` * cast(`main`.`FPOPrecent` as signed)) / 100) end),3) - sum((case `fee`.`FFeeID` when '供应商人工补助费' then `fee`.`FFeeAmount` when '供应商车辆补助费' then `fee`.`FFeeAmount` when '供应商垃圾补助费' then `fee`.`FFeeAmount` else 0 end))) AS `really_pay`,sum((case `fee`.`FFeeID` when '拉货专员人工' then `fee`.`FFeeAmount` else 0 end)) AS `fee_zy`,group_concat((case `fee`.`FFeeID` when '拉货专员人工' then `fee`.`FFeePerson` else NULL end) separator ',') AS `Person_zy`,sum((case `fee`.`FFeeID` when '拉货助理人工' then `fee`.`FFeeAmount` else 0 end)) AS `fee_zl`,group_concat((case `fee`.`FFeeID` when '拉货助理人工' then `fee`.`FFeePerson` else NULL end) separator ',') AS `Person_zl` from (`Trans_main_table` `main` join `Trans_fee_table` `fee`) where ((`main`.`FTranType` = 'PUR') and (`main`.`FCancellation` = '1') and (`main`.`FDate` <> '1970-01-01 08:00:00') and (`main`.`FInterID` = `fee`.`FInterID`) and (`main`.`FCorrent` = 0)) group by `main`.`FBillNo` order by `main`.`FDate` desc;

-- ----------------------------
-- View structure for Trans_purchase_cargo
-- ----------------------------
DROP VIEW IF EXISTS `Trans_purchase_cargo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_purchase_cargo` AS select `uct_waste_purchase_cargo`.`purchase_id` AS `purchase_id`,`uct_waste_purchase_cargo`.`cate_id` AS `cate_id`,`uct_waste_purchase_cargo`.`net_weight` AS `sum(net_weight)`,`uct_waste_purchase_cargo`.`unit_price` AS `unit_price` from `uct_waste_purchase_cargo` group by `uct_waste_purchase_cargo`.`purchase_id`,`uct_waste_purchase_cargo`.`unit_price`;

-- ----------------------------
-- View structure for Trans_total_cargo
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_cargo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_cargo` AS select `uct_waste_purchase_cargo`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,sum(`uct_waste_purchase_cargo`.`net_weight`) AS `FQtyTotal`,round(sum(`uct_waste_purchase_cargo`.`total_price`),2) AS `FAmountTotal`,'' AS `FSourceInterId`,'' AS `FSourceTranType` from `uct_waste_purchase_cargo` group by `uct_waste_purchase_cargo`.`purchase_id` union all select `uct_waste_storage_sort`.`purchase_id` AS `FInterID`,'SOR' AS `FTranType`,sum(`uct_waste_storage_sort`.`net_weight`) AS `FQtyTotal`,round(sum((`uct_waste_storage_sort`.`net_weight` * `uct_waste_storage_sort`.`presell_price`)),2) AS `FAmountTotal`,`uct_waste_storage_sort`.`purchase_id` AS `FSourceInterId`,'PUR' AS `FSourceTranType` from `uct_waste_storage_sort` group by `uct_waste_storage_sort`.`purchase_id` union all select `uct_waste_sell_cargo`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,sum(`uct_waste_sell_cargo`.`net_weight`) AS `FQtyTotal`,round(sum((`uct_waste_sell_cargo`.`net_weight` * `uct_waste_sell_cargo`.`unit_price`)),2) AS `FAmountTotal`,if(isnull(`uct_waste_sell`.`purchase_id`),'',`uct_waste_sell`.`purchase_id`) AS `FSourceInterId`,if(isnull(`uct_waste_sell`.`purchase_id`),'','PUR') AS `FSourceTranType` from (`uct_waste_sell_cargo` join `uct_waste_sell`) where (`uct_waste_sell`.`id` = `uct_waste_sell_cargo`.`sell_id`) group by `uct_waste_sell_cargo`.`sell_id`;

-- ----------------------------
-- View structure for Trans_total_cargo_pc
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_cargo_pc`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_cargo_pc` AS select `uct_waste_purchase_cargo`.`purchase_id` AS `FInterID`,'PUR' AS `FTranType`,sum(`uct_waste_purchase_cargo`.`net_weight`) AS `FQtyTotal`,round(sum(`uct_waste_purchase_cargo`.`total_price`),2) AS `FAmountTotal`,'' AS `FSourceInterId`,'' AS `FSourceTranType` from `uct_waste_purchase_cargo` group by `uct_waste_purchase_cargo`.`purchase_id`;

-- ----------------------------
-- View structure for Trans_total_cargo_sc
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_cargo_sc`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_cargo_sc` AS select `uct_waste_storage_sort`.`purchase_id` AS `FInterID`,'SOR' AS `FTranType`,sum(`uct_waste_storage_sort`.`net_weight`) AS `FQtyTotal`,round(sum((`uct_waste_storage_sort`.`net_weight` * `uct_waste_storage_sort`.`presell_price`)),2) AS `FAmountTotal`,`uct_waste_storage_sort`.`purchase_id` AS `FSourceInterId`,'PUR' AS `FSourceTranType` from `uct_waste_storage_sort` group by `uct_waste_storage_sort`.`purchase_id`;

-- ----------------------------
-- View structure for Trans_total_cargo_sec
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_cargo_sec`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_cargo_sec` AS select `uct_waste_sell_cargo`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,sum(`uct_waste_sell_cargo`.`net_weight`) AS `FQtyTotal`,round(sum((`uct_waste_sell_cargo`.`net_weight` * `uct_waste_sell_cargo`.`unit_price`)),2) AS `FAmountTotal`,if(isnull(`uct_waste_sell`.`purchase_id`),'',`uct_waste_sell`.`purchase_id`) AS `FSourceInterId`,if(isnull(`uct_waste_sell`.`purchase_id`),'','PUR') AS `FSourceTranType` from (`uct_waste_sell_cargo` join `uct_waste_sell`) where (`uct_waste_sell`.`id` = `uct_waste_sell_cargo`.`sell_id`) group by `uct_waste_sell_cargo`.`sell_id`;

-- ----------------------------
-- View structure for Trans_total_fee
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_fee`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_fee` AS select `baseP`.`id` AS `FInterID`,'PUR' AS `FTranType`,ifnull(`pf`.`customer_profit`,'') AS `CustomerProfit`,ifnull(`pf`.`other_profit`,'') AS `OtherProfit`,ifnull(`pf`.`pick_fee`,'') AS `PickFee`,ifnull(`rf`.`car_fee`,'') AS `CarFee`,ifnull(`rf`.`man_fee`,'') AS `ManFee`,ifnull(`rf`.`other_return_fee`,'') AS `OtherReturnfee`,ifnull(`sg`.`sort_fee`,'') AS `SortFee`,round((ifnull(`sg`.`materiel_fee`,'') + ifnull(`baseP`.`materiel_price`,'')),2) AS `MaterielFee`,ifnull(`sg`.`other_sort_fee`,'') AS `OtherSortfee`,ifnull(`sf`.`sell_profit`,'') AS `SellProfit`,ifnull(`sf`.`sell_fee`,'') AS `SellFee` from ((((`test_lvhuan`.`uct_waste_purchase` `baseP` left join `test_lvhuan`.`Trans_total_fee_rf` `rf` on((`baseP`.`id` = `rf`.`purchase_id`))) left join `test_lvhuan`.`Trans_total_fee_sg` `sg` on((`baseP`.`id` = `sg`.`purchase_id`))) left join `test_lvhuan`.`Trans_total_fee_pf` `pf` on((`baseP`.`id` = `pf`.`purchase_id`))) left join `test_lvhuan`.`Trans_total_fee_sf` `sf` on((`baseP`.`id` = `sf`.`purchase_id`))) union all select `osf`.`sell_id` AS `FInterID`,'SEL' AS `FTranType`,'' AS `CustomerProfit`,'' AS `OtherProfit`,'' AS `PickFee`,'' AS `CarFee`,'' AS `ManFee`,'' AS `OtherReturnfee`,'' AS `SortFee`,'' AS `MaterielFee`,'' AS `OtherSortfee`,ifnull(`osf`.`sell_profit`,'') AS `SellProfit`,ifnull(`osf`.`sell_fee`,'') AS `SellFee` from `test_lvhuan`.`Trans_total_fee_osf` `osf`;

-- ----------------------------
-- View structure for Trans_total_fee_osf
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_fee_osf`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_fee_osf` AS select `uct_waste_sell_other_price`.`sell_id` AS `sell_id`,sum((case `uct_waste_sell_other_price`.`type` when 'in' then `uct_waste_sell_other_price`.`price` else 0 end)) AS `sell_profit`,sum((case `uct_waste_sell_other_price`.`type` when 'out' then `uct_waste_sell_other_price`.`price` else 0 end)) AS `sell_fee` from `uct_waste_sell_other_price` group by `uct_waste_sell_other_price`.`sell_id`;

-- ----------------------------
-- View structure for Trans_total_fee_pf
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_fee_pf`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_fee_pf` AS select `uct_waste_purchase_expense`.`purchase_id` AS `purchase_id`,sum((case `uct_waste_purchase_expense`.`usage` when '供应商垃圾补助费' then `uct_waste_purchase_expense`.`price` when '供应商车辆补助费' then `uct_waste_purchase_expense`.`price` when '供应商人工补助费' then `uct_waste_purchase_expense`.`price` else 0 end)) AS `customer_profit`,sum((case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`price` else 0 end)) AS `other_profit`,sum((case `uct_waste_purchase_expense`.`type` when 'out' then `uct_waste_purchase_expense`.`price` else 0 end)) AS `pick_fee` from `uct_waste_purchase_expense` group by `uct_waste_purchase_expense`.`purchase_id`;

-- ----------------------------
-- View structure for Trans_total_fee_rf
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_fee_rf`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_fee_rf` AS select `uct_waste_storage_return_fee`.`purchase_id` AS `purchase_id`,sum((case `uct_waste_storage_return_fee`.`usage` when '外请车费' then `uct_waste_storage_return_fee`.`price` when '公司车费' then `uct_waste_storage_return_fee`.`price` else 0 end)) AS `car_fee`,sum((case `uct_waste_storage_return_fee`.`usage` when '拉货专员人工' then `uct_waste_storage_return_fee`.`price` when '外请人工' then `uct_waste_storage_return_fee`.`price` when '拉货助理人工' then `uct_waste_storage_return_fee`.`price` else 0 end)) AS `man_fee`,sum((case `uct_waste_storage_return_fee`.`usage` when '外请车费' then 0 when '公司车费' then 0 when '拉货专员人工' then 0 when '外请人工' then 0 when '拉货助理人工' then 0 else `uct_waste_storage_return_fee`.`price` end)) AS `other_return_fee` from `uct_waste_storage_return_fee` group by `uct_waste_storage_return_fee`.`purchase_id`;

-- ----------------------------
-- View structure for Trans_total_fee_sf
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_fee_sf`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_fee_sf` AS select `uct_waste_sell`.`purchase_id` AS `purchase_id`,sum((case `uct_waste_sell_other_price`.`type` when 'in' then `uct_waste_sell_other_price`.`price` else 0 end)) AS `sell_profit`,sum((case `uct_waste_sell_other_price`.`type` when 'out' then `uct_waste_sell_other_price`.`price` else 0 end)) AS `sell_fee` from ((`uct_waste_sell_other_price` join `uct_waste_sell`) join `uct_waste_purchase`) where ((`uct_waste_sell`.`purchase_id` > 0) and (`uct_waste_sell_other_price`.`sell_id` = `uct_waste_sell`.`id`) and (`uct_waste_sell`.`purchase_id` = `uct_waste_purchase`.`id`)) group by `uct_waste_sell`.`purchase_id`;

-- ----------------------------
-- View structure for Trans_total_fee_sg
-- ----------------------------
DROP VIEW IF EXISTS `Trans_total_fee_sg`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Trans_total_fee_sg` AS select `SFR`.`purchase_id` AS `purchase_id`,sum((case `SFR`.`usage` when '资源池分拣人工' then `SFR`.`price` when '临时工分拣人工' then `SFR`.`price` when '拉货人分拣人工' then `SFR`.`price` else 0 end)) AS `sort_fee`,sum((case `SFR`.`usage` when '耗材费-太空包' then `SFR`.`price` when '耗材费-编织袋' then `SFR`.`price` else 0 end)) AS `materiel_fee`,sum((case `SFR`.`usage` when '资源池分拣人工' then 0 when '临时工分拣人工' then 0 when '耗材费-太空包' then 0 when '耗材费-编织袋' then 0 when '拉货人分拣人工' then 0 else `SFR`.`price` end)) AS `other_sort_fee` from ((select `test_lvhuan`.`uct_waste_storage_sort_expense`.`purchase_id` AS `purchase_id`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`usage` AS `usage`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`price` AS `price` from `test_lvhuan`.`uct_waste_storage_sort_expense`) union all (select `test_lvhuan`.`uct_waste_storage_expense`.`purchase_id` AS `purchase_id`,`test_lvhuan`.`uct_waste_storage_expense`.`usage` AS `usage`,`test_lvhuan`.`uct_waste_storage_expense`.`price` AS `price` from `test_lvhuan`.`uct_waste_storage_expense`) union all (select `MTR`.`purchase_id` AS `purchase_id`,'耗材费-太空包' AS `usage`,sum(`MTR`.`materiel_price`) AS `price` from (select `test_lvhuan`.`uct_waste_purchase_materiel`.`purchase_id` AS `purchase_id`,((case `test_lvhuan`.`uct_waste_purchase_materiel`.`use_type` when '1' then cast(`test_lvhuan`.`uct_waste_purchase_materiel`.`pick_amount` as signed) when '0' then cast(`test_lvhuan`.`uct_waste_purchase_materiel`.`storage_amount` as signed) else 0 end) * `test_lvhuan`.`uct_waste_purchase_materiel`.`inside_price`) AS `materiel_price` from `test_lvhuan`.`uct_waste_purchase_materiel`) `MTR` group by `MTR`.`purchase_id`)) `SFR` group by `SFR`.`purchase_id`;

-- ----------------------------
-- View structure for Tran_total_cargo_pc
-- ----------------------------
DROP VIEW IF EXISTS `Tran_total_cargo_pc`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `Tran_total_cargo_pc` AS select `uct_waste_purchase_cargo`.`purchase_id` AS `FInterID`,sum(`uct_waste_purchase_cargo`.`net_weight`) AS `FQtyTotal`,round(sum(`uct_waste_purchase_cargo`.`total_price`),2) AS `FAmountTotal`,'' AS `FSourceInterId`,'' AS `FSourceTranType` from `uct_waste_purchase_cargo` group by `uct_waste_purchase_cargo`.`purchase_id`;

-- ----------------------------
-- View structure for view_Accounting_purchase_cargo
-- ----------------------------
DROP VIEW IF EXISTS `view_Accounting_purchase_cargo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_Accounting_purchase_cargo` AS select `uct_waste_purchase_cargo`.`purchase_id` AS `purchase_id`,`uct_waste_purchase_cargo`.`cate_id` AS `cate_id`,sum(`uct_waste_purchase_cargo`.`net_weight`) AS `net_weight`,`uct_waste_purchase_cargo`.`unit_price` AS `unit_price`,`uct_waste_purchase_cargo`.`createtime` AS `createtime` from `uct_waste_purchase_cargo` group by `uct_waste_purchase_cargo`.`purchase_id`,`uct_waste_purchase_cargo`.`cate_id`,`uct_waste_purchase_cargo`.`unit_price`;

-- ----------------------------
-- View structure for view_Accounting_sort_cargo
-- ----------------------------
DROP VIEW IF EXISTS `view_Accounting_sort_cargo`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_Accounting_sort_cargo` AS select `uct_waste_storage_sort`.`purchase_id` AS `purchase_id`,`uct_waste_storage_sort`.`cargo_sort` AS `cate_id`,sum(`uct_waste_storage_sort`.`net_weight`) AS `net_weight`,`uct_waste_storage_sort`.`presell_price` AS `presell_price`,`uct_waste_storage_sort`.`createtime` AS `createtime` from `uct_waste_storage_sort` group by `uct_waste_storage_sort`.`purchase_id`,`uct_waste_storage_sort`.`cargo_sort`;

-- ----------------------------
-- View structure for view_cargofile_collect
-- ----------------------------
DROP VIEW IF EXISTS `view_cargofile_collect`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_cargofile_collect` AS select `view_cargofile_third`.`id` AS `id`,`view_cargofile_first`.`name` AS `first_sort`,`view_cargofile_second`.`name` AS `second_sort`,`view_cargofile_third`.`name` AS `sort_name`,`view_cargofile_third`.`branch_id` AS `branch_id` from ((`test_lvhuan`.`view_cargofile_third` join `test_lvhuan`.`view_cargofile_second`) join `test_lvhuan`.`view_cargofile_first`) where ((`view_cargofile_third`.`parent_id` = `view_cargofile_second`.`id`) and (`view_cargofile_second`.`parent_id` = `view_cargofile_first`.`id`));

-- ----------------------------
-- View structure for view_cargofile_first
-- ----------------------------
DROP VIEW IF EXISTS `view_cargofile_first`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_cargofile_first` AS select `uct_waste_cate`.`id` AS `id`,`uct_waste_cate`.`name` AS `name` from `uct_waste_cate` where (`uct_waste_cate`.`parent_id` = 0);

-- ----------------------------
-- View structure for view_cargofile_second
-- ----------------------------
DROP VIEW IF EXISTS `view_cargofile_second`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_cargofile_second` AS select `view_change_sort`.`id` AS `id`,`view_change_sort`.`parent_id` AS `parent_id`,`view_change_sort`.`name` AS `name` from (select `test_lvhuan`.`uct_waste_cate`.`id` AS `id`,`test_lvhuan`.`uct_waste_cate`.`parent_id` AS `parent_id`,`test_lvhuan`.`uct_waste_cate`.`name` AS `name` from `test_lvhuan`.`uct_waste_cate` where (`test_lvhuan`.`uct_waste_cate`.`parent_id` <> 0)) `view_change_sort` where exists(select `view_cargofile_first`.`id` from `test_lvhuan`.`view_cargofile_first` where (`view_cargofile_first`.`id` = `view_change_sort`.`parent_id`));

-- ----------------------------
-- View structure for view_cargofile_third
-- ----------------------------
DROP VIEW IF EXISTS `view_cargofile_third`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_cargofile_third` AS select `view_change_sort`.`id` AS `id`,`view_change_sort`.`parent_id` AS `parent_id`,`view_change_sort`.`name` AS `name`,`view_change_sort`.`branch_id` AS `branch_id` from (select `test_lvhuan`.`uct_waste_cate`.`id` AS `id`,`test_lvhuan`.`uct_waste_cate`.`parent_id` AS `parent_id`,`test_lvhuan`.`uct_waste_cate`.`name` AS `name`,`test_lvhuan`.`uct_waste_cate`.`branch_id` AS `branch_id` from `test_lvhuan`.`uct_waste_cate` where (`test_lvhuan`.`uct_waste_cate`.`parent_id` <> 0)) `view_change_sort` where (not(exists(select `view_cargofile_first`.`id` from `test_lvhuan`.`view_cargofile_first` where (`view_cargofile_first`.`id` = `view_change_sort`.`parent_id`))));

-- ----------------------------
-- View structure for view_cargo_collect
-- ----------------------------
DROP VIEW IF EXISTS `view_cargo_collect`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_cargo_collect` AS select if((`p`.`FTranType` = 'SEL'),`p`.`FSourceInterId`,`p`.`FinterID`) AS `FInterID`,`p`.`FItemID` AS `FItemID`,ifnull(group_concat((case `p`.`FTranType` when 'PUR' then concat('采购净重 ',`p`.`FQty`,', ','采购价 ',ifnull(round(`p`.`FPrice`,2),0.00)) else NULL end) separator ','),'') AS `PUR_log`,round(sum(if((`p`.`FTranType` = 'PUR'),`p`.`FQty`,0)),1) AS `PUR_FQty`,round(sum(if((`p`.`FTranType` = 'PUR'),`p`.`FAmount`,0)),2) AS `PUR_FAmount`,ifnull(group_concat((case `p`.`FTranType` when 'SOR' then concat('入库净重 ',`p`.`FQty`,', ','预售价 ',ifnull(round(`p`.`FPrice`,2),0.00)) when 'SEL' then concat('销售重量 ',`p`.`FQty`,', ','销售价 ',ifnull(round(`p`.`FPrice`,2),0.00)) else NULL end) separator ','),'') AS `SOR_log`,round(sum(if((`p`.`FTranType` = 'PUR'),0,`p`.`FQty`)),1) AS `SOR_FQty`,ifnull(round(sum(if((`p`.`FTranType` = 'PUR'),0,`p`.`FAmount`)),2),0.00) AS `SOR_FAmount`,date_format(max(if((`p`.`FTranType` = 'PUR'),NULL,`p`.`FDCTime`)),'%Y-%m-%d') AS `FDCTime` from `Trans_assist_table` `p` where (if((`p`.`FTranType` = 'SEL'),(`p`.`FSourceInterId` <> ''),TRUE) and (`p`.`FItemID` <> 0)) group by if((`p`.`FTranType` = 'SEL'),`p`.`FSourceInterId`,`p`.`FinterID`),`p`.`FItemID`;

-- ----------------------------
-- View structure for view_customer
-- ----------------------------
DROP VIEW IF EXISTS `view_customer`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_customer` AS select `test_lvhuan`.`uct_admin`.`nickname` AS `第一负责人`,`test_lvhuan`.`uct_admin`.`mobile` AS `第一负责人电话`,`bb`.`分部归属` AS `分部归属`,`bb`.`公司名称` AS `公司名称`,`bb`.`业务员` AS `业务员`,`bb`.`部门归属` AS `部门归属` from (((select substring_index(`test_lvhuan`.`uct_waste_customer`.`admin_id`,',',-(1)) AS `admin_id1`,(case `test_lvhuan`.`uct_waste_customer`.`branch_id` when 1 then '深圳宝安分部' when 2 then '成都崇州分部' when 3 then '昆山张浦分部' when 4 then '厦门翔安分部' when 5 then '东莞黄江分部' when 8 then '东莞横沥分部' when 9 then '东莞大岭山分部' when 10 then '东莞凤岗分部' else '' end) AS `分部归属`,`test_lvhuan`.`uct_waste_customer`.`name` AS `公司名称`,`test_lvhuan`.`uct_admin`.`nickname` AS `业务员`,(case `test_lvhuan`.`uct_waste_customer`.`service_department` when '1' then '客服部' when '2' then '企服部' end) AS `部门归属` from (`test_lvhuan`.`uct_waste_customer` join `test_lvhuan`.`uct_admin`) where ((`test_lvhuan`.`uct_waste_customer`.`customer_type` = 'up') and (`test_lvhuan`.`uct_waste_customer`.`manager_id` = `test_lvhuan`.`uct_admin`.`id`) and (`test_lvhuan`.`uct_waste_customer`.`state` = 'enabled')))) `bb` join `test_lvhuan`.`uct_admin`) where (`bb`.`admin_id1` = `test_lvhuan`.`uct_admin`.`id`);

-- ----------------------------
-- View structure for view_excel_customer
-- ----------------------------
DROP VIEW IF EXISTS `view_excel_customer`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_excel_customer` AS select `uct_admin`.`id` AS `id`,`uct_admin`.`nickname` AS `nickname` from `uct_admin` where (`uct_admin`.`id` > 1826);

-- ----------------------------
-- View structure for view_excel_sell
-- ----------------------------
DROP VIEW IF EXISTS `view_excel_sell`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_excel_sell` AS select `uct_waste_sell`.`id` AS `id`,`uct_waste_sell`.`branch_id` AS `branch_id`,`uct_waste_sell`.`purchase_id` AS `purchase_id`,`uct_waste_sell`.`order_id` AS `order_id`,`uct_waste_sell`.`customer_id` AS `customer_id`,`uct_waste_sell`.`customer_linkman_id` AS `customer_linkman_id`,`uct_waste_sell`.`seller_id` AS `seller_id`,`uct_waste_sell`.`seller_remark` AS `seller_remark`,`uct_waste_sell`.`warehouse_id` AS `warehouse_id`,`uct_waste_sell`.`cargo_pick_time` AS `cargo_pick_time`,`uct_waste_sell`.`car_number` AS `car_number`,`uct_waste_sell`.`car_weight` AS `car_weight`,`uct_waste_sell`.`cargo_price` AS `cargo_price`,`uct_waste_sell`.`materiel_price` AS `materiel_price`,`uct_waste_sell`.`other_price` AS `other_price`,`uct_waste_sell`.`cargo_out_remark` AS `cargo_out_remark`,`uct_waste_sell`.`pay_way_id` AS `pay_way_id`,`uct_waste_sell`.`customer_evaluate_data` AS `customer_evaluate_data`,`uct_waste_sell`.`seller_evaluate_data` AS `seller_evaluate_data`,`uct_waste_sell`.`state` AS `state`,`uct_waste_sell`.`createtime` AS `createtime`,`uct_waste_sell`.`updatetime` AS `updatetime` from `uct_waste_sell` where (`uct_waste_sell`.`createtime` > 1541030400);

-- ----------------------------
-- View structure for view_first_sort
-- ----------------------------
DROP VIEW IF EXISTS `view_first_sort`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_first_sort` AS select `uct_waste_cate`.`id` AS `id`,`uct_waste_cate`.`name` AS `name` from `uct_waste_cate` where (`uct_waste_cate`.`parent_id` = 0);

-- ----------------------------
-- View structure for view_order_unfinished_all
-- ----------------------------
DROP VIEW IF EXISTS `view_order_unfinished_all`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_order_unfinished_all` AS select `Trans_main_table`.`FInterID` AS `FInterID`,`Trans_main_table`.`FDate` AS `FDate`,`Trans_main_table`.`FBillNo` AS `FBillNo`,`Trans_main_table`.`FPOPrecent` AS `FPOPrecent`,`Trans_main_table`.`TalFQty` AS `TalFQty`,`Trans_main_table`.`TalFAmount` AS `TalFAmount`,`Trans_main_table`.`FEmpID` AS `FEmpID`,`Trans_main_table`.`FSupplyID` AS `FSupplyID`,`Trans_fee_table`.`FFeeID` AS `FFeeID`,`Trans_fee_table`.`FFeeAmount` AS `FFeeAmount`,`Trans_fee_table`.`FFeePerson` AS `FFeePerson` from (`Trans_fee_table` join `Trans_main_table`) where ((`Trans_fee_table`.`FInterID` = `Trans_main_table`.`FInterID`) and (`Trans_main_table`.`FTranType` = 'PUR') and (`Trans_main_table`.`FCancellation` = '1') and (`Trans_main_table`.`FDate` <> '1970-01-01 08:00:00') and ((`Trans_fee_table`.`FFeeID` = '供应商人工补助费') or (`Trans_fee_table`.`FFeeID` = '供应商车辆补助费') or (`Trans_fee_table`.`FFeeID` = '供应商垃圾补助费'))) group by `Trans_main_table`.`FBillNo`;

-- ----------------------------
-- View structure for view_purchase_expense
-- ----------------------------
DROP VIEW IF EXISTS `view_purchase_expense`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_purchase_expense` AS select `uct_waste_purchase_expense`.`purchase_id` AS `purchase_id`,round(sum((case `uct_waste_purchase_expense`.`usage` when '供应商垃圾补助费' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `供应商垃圾补助费` from `uct_waste_purchase_expense` group by `uct_waste_purchase_expense`.`purchase_id`,`uct_waste_purchase_expense`.`usage`;

-- ----------------------------
-- View structure for view_purchase_expense_collect
-- ----------------------------
DROP VIEW IF EXISTS `view_purchase_expense_collect`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_purchase_expense_collect` AS select `uct_waste_purchase_expense`.`purchase_id` AS `purchase_id`,round(sum((case `uct_waste_purchase_expense`.`usage` when '供应商人工补助费' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `供应商人工补助`,round(sum((case `uct_waste_purchase_expense`.`usage` when '供应商车辆补助费' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `供应商车辆补助`,round(sum((case `uct_waste_purchase_expense`.`usage` when '供应商垃圾补助费' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `供应商垃圾补助`,round(sum((case `uct_waste_purchase_expense`.`usage` when '叉车费' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `叉车费`,if((sum((case `uct_waste_purchase_expense`.`usage` when '叉车费' then `uct_waste_purchase_expense`.`price` else '0' end)) = max((case `uct_waste_purchase_expense`.`usage` when '叉车费' then `uct_waste_purchase_expense`.`price` else '0' end))),group_concat((case `uct_waste_purchase_expense`.`usage` when '叉车费' then `uct_waste_purchase_expense`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_purchase_expense`.`usage` when '叉车费' then `uct_waste_purchase_expense`.`price` else '' end) using utf8),(case `uct_waste_purchase_expense`.`usage` when '叉车费' then `uct_waste_purchase_expense`.`receiver` else '' end)) separator '')) AS `叉车司机`,round(sum((case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `其他提货收入`,if((sum((case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`price` else '0' end)) = max((case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`price` else '0' end))),group_concat((case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`price` else '' end) using utf8),(case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`receiver` else '' end)) separator '')) AS `其他提货收入收款人`,group_concat((case `uct_waste_purchase_expense`.`usage` when '其他收入' then `uct_waste_purchase_expense`.`remark` else '' end) separator '') AS `其他提货收入说明`,round(sum((case `uct_waste_purchase_expense`.`usage` when '其他支出' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `其他提货支出`,if((sum((case `uct_waste_purchase_expense`.`usage` when '其他支出' then `uct_waste_purchase_expense`.`price` else '0' end)) = max((case `uct_waste_purchase_expense`.`usage` when '其他支出' then `uct_waste_purchase_expense`.`price` else '0' end))),group_concat((case `uct_waste_purchase_expense`.`usage` when '其他支出' then `uct_waste_purchase_expense`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_purchase_expense`.`usage` when '其他支出' then `uct_waste_purchase_expense`.`price` else '' end) using utf8),(case `uct_waste_purchase_expense`.`usage` when '其他支出' then `uct_waste_purchase_expense`.`receiver` else '' end)) separator '')) AS `其他提货支出收款人`,group_concat((case `uct_waste_purchase_expense`.`usage` when '其他支出' then `uct_waste_purchase_expense`.`remark` else '' end) separator '') AS `其他提货支出说明` from `uct_waste_purchase_expense` group by `uct_waste_purchase_expense`.`purchase_id`;

-- ----------------------------
-- View structure for view_reimbursement_expense
-- ----------------------------
DROP VIEW IF EXISTS `view_reimbursement_expense`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_reimbursement_expense` AS select `uct_waste_purchase_expense`.`purchase_id` AS `purchase_id`,round(sum((case `uct_waste_purchase_expense`.`usage` when '拉货助理人工' then `uct_waste_purchase_expense`.`price` else '0' end)),2) AS `拉货助理人工` from `uct_waste_purchase_expense` group by `uct_waste_purchase_expense`.`purchase_id`,`uct_waste_purchase_expense`.`usage`;

-- ----------------------------
-- View structure for view_reimbursement_expense_collect
-- ----------------------------
DROP VIEW IF EXISTS `view_reimbursement_expense_collect`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_reimbursement_expense_collect` AS select `uct_waste_storage_return_fee`.`purchase_id` AS `purchase_id`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '外请车费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `外请车辆`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '公司车费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `公司车辆`,group_concat((case `uct_waste_storage_return_fee`.`usage` when '外请车费' then `uct_waste_storage_return_fee`.`receiver` when '公司车费' then `uct_waste_storage_return_fee`.`receiver` else '' end) separator '') AS `司机`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '拉货专员人工' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `拉货专员人工`,if((sum((case `uct_waste_storage_return_fee`.`usage` when '拉货专员人工' then `uct_waste_storage_return_fee`.`price` else '0' end)) = max((case `uct_waste_storage_return_fee`.`usage` when '拉货专员人工' then `uct_waste_storage_return_fee`.`price` else '0' end))),group_concat((case `uct_waste_storage_return_fee`.`usage` when '拉货专员人工' then `uct_waste_storage_return_fee`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_storage_return_fee`.`usage` when '拉货专员人工' then `uct_waste_storage_return_fee`.`price` else '' end) using utf8),(case `uct_waste_storage_return_fee`.`usage` when '拉货专员人工' then `uct_waste_storage_return_fee`.`receiver` else '' end)) separator '')) AS `拉货专员姓名`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '拉货助理人工' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `拉货助理人工`,if((sum((case `uct_waste_storage_return_fee`.`usage` when '拉货助理人工' then `uct_waste_storage_return_fee`.`price` else '0' end)) = max((case `uct_waste_storage_return_fee`.`usage` when '拉货助理人工' then `uct_waste_storage_return_fee`.`price` else '0' end))),group_concat((case `uct_waste_storage_return_fee`.`usage` when '拉货助理人工' then `uct_waste_storage_return_fee`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_storage_return_fee`.`usage` when '拉货助理人工' then `uct_waste_storage_return_fee`.`price` else '' end) using utf8),(case `uct_waste_storage_return_fee`.`usage` when '拉货助理人工' then `uct_waste_storage_return_fee`.`receiver` else '' end)) separator '')) AS `拉货助理姓名`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '外请人工' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `外请人工`,if((sum((case `uct_waste_storage_return_fee`.`usage` when '外请人工' then `uct_waste_storage_return_fee`.`price` else '0' end)) = max((case `uct_waste_storage_return_fee`.`usage` when '外请人工' then `uct_waste_storage_return_fee`.`price` else '0' end))),group_concat((case `uct_waste_storage_return_fee`.`usage` when '外请人工' then `uct_waste_storage_return_fee`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_storage_return_fee`.`usage` when '外请人工' then `uct_waste_storage_return_fee`.`price` else '' end) using utf8),(case `uct_waste_storage_return_fee`.`usage` when '外请人工' then `uct_waste_storage_return_fee`.`receiver` else '' end)) separator '')) AS `外请人工姓名`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '叉车费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `叉车费`,if((sum((case `uct_waste_storage_return_fee`.`usage` when '叉车费' then `uct_waste_storage_return_fee`.`price` else '0' end)) = max((case `uct_waste_storage_return_fee`.`usage` when '叉车费' then `uct_waste_storage_return_fee`.`price` else '0' end))),group_concat((case `uct_waste_storage_return_fee`.`usage` when '叉车费' then `uct_waste_storage_return_fee`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_storage_return_fee`.`usage` when '叉车费' then `uct_waste_storage_return_fee`.`price` else '' end) using utf8),(case `uct_waste_storage_return_fee`.`usage` when '叉车费' then `uct_waste_storage_return_fee`.`receiver` else '' end)) separator '')) AS `叉车司机`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '停车费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `停车费`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '过路费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `过路费`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '磅费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `磅费`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '水费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `水费`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '餐费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `餐费`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '交通费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `交通费`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '住宿费' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `住宿费`,round(sum((case `uct_waste_storage_return_fee`.`usage` when '其他' then `uct_waste_storage_return_fee`.`price` else '0' end)),2) AS `其他报销费用`,if((sum((case `uct_waste_storage_return_fee`.`usage` when '其他' then `uct_waste_storage_return_fee`.`price` else '0' end)) = max((case `uct_waste_storage_return_fee`.`usage` when '其他' then `uct_waste_storage_return_fee`.`price` else '0' end))),group_concat((case `uct_waste_storage_return_fee`.`usage` when '其他' then `uct_waste_storage_return_fee`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `uct_waste_storage_return_fee`.`usage` when '其他' then `uct_waste_storage_return_fee`.`price` else '' end) using utf8),(case `uct_waste_storage_return_fee`.`usage` when '其他' then `uct_waste_storage_return_fee`.`receiver` else '' end)) separator '')) AS `其他报销费用收款人`,group_concat((case `uct_waste_storage_return_fee`.`usage` when '其他' then `uct_waste_storage_return_fee`.`remark` else '' end) separator '') AS `其他报销费用说明` from `uct_waste_storage_return_fee` group by `uct_waste_storage_return_fee`.`purchase_id`;

-- ----------------------------
-- View structure for view_second_sort
-- ----------------------------
DROP VIEW IF EXISTS `view_second_sort`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_second_sort` AS select `view_change_sort`.`id` AS `id`,`view_change_sort`.`parent_id` AS `parent_id`,`view_change_sort`.`name` AS `name` from (select `test_lvhuan`.`uct_waste_cate`.`id` AS `id`,`test_lvhuan`.`uct_waste_cate`.`parent_id` AS `parent_id`,`test_lvhuan`.`uct_waste_cate`.`name` AS `name` from `test_lvhuan`.`uct_waste_cate` where (`test_lvhuan`.`uct_waste_cate`.`parent_id` <> 0)) `view_change_sort` where exists(select `view_first_sort`.`id` from `test_lvhuan`.`view_first_sort` where (`view_first_sort`.`id` = `view_change_sort`.`parent_id`));

-- ----------------------------
-- View structure for view_sell_time
-- ----------------------------
DROP VIEW IF EXISTS `view_sell_time`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_sell_time` AS select `uct_waste_sell_log`.`sell_id` AS `sell_id`,date_format(from_unixtime(`uct_waste_sell_log`.`createtime`),'%Y-%m-%d') AS `sell_time` from (`uct_waste_sell_log` join `view_valid_sell`) where ((`uct_waste_sell_log`.`state_value` = 'wait_confirm_order') and (`view_valid_sell`.`sell_id` = `uct_waste_sell_log`.`sell_id`));

-- ----------------------------
-- View structure for view_shenguan_check
-- ----------------------------
DROP VIEW IF EXISTS `view_shenguan_check`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_shenguan_check` AS select `uct_waste_purchase_log`.`purchase_id` AS `purchase_id`,date_format(from_unixtime(`uct_waste_purchase_log`.`createtime`),'%Y-%m-%d') AS `check_time`,`uct_admin`.`nickname` AS `nickname` from (`uct_waste_purchase_log` join `uct_admin`) where ((`uct_waste_purchase_log`.`state_value` = 'finish') and (`uct_admin`.`id` = `uct_waste_purchase_log`.`admin_id`) and (`uct_waste_purchase_log`.`createtime` >= '1542902400'));

-- ----------------------------
-- View structure for view_shenguan_presell
-- ----------------------------
DROP VIEW IF EXISTS `view_shenguan_presell`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_shenguan_presell` AS select `uct_waste_storage_sort`.`purchase_id` AS `purchase_id`,round(sum((`uct_waste_storage_sort`.`net_weight` * `uct_waste_storage_sort`.`presell_price`)),2) AS `total_presell` from `uct_waste_storage_sort` group by `uct_waste_storage_sort`.`purchase_id`;

-- ----------------------------
-- View structure for view_sort_expense
-- ----------------------------
DROP VIEW IF EXISTS `view_sort_expense`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_sort_expense` AS select `uct_waste_storage_sort_expense`.`purchase_id` AS `purchase_id`,sum(if((`uct_waste_storage_sort_expense`.`usage` = '资源池分拣人工'),`uct_waste_storage_sort_expense`.`price`,0)) AS `sort_expense`,sum(if((`uct_waste_storage_sort_expense`.`usage` like '耗材费%'),`uct_waste_storage_sort_expense`.`price`,0)) AS `materal_expense`,sum(`uct_waste_storage_sort_expense`.`price`) AS `total_expense` from `uct_waste_storage_sort_expense` group by `uct_waste_storage_sort_expense`.`purchase_id`;

-- ----------------------------
-- View structure for view_sort_expense_collect
-- ----------------------------
DROP VIEW IF EXISTS `view_sort_expense_collect`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_sort_expense_collect` AS select `view_SEC`.`purchase_id` AS `purchase_id`,round(sum((case `view_SEC`.`usage` when '资源池分拣人工' then `view_SEC`.`price` else '0' end)),2) AS `仓库分拣人工`,if((sum((case `view_SEC`.`usage` when '资源池分拣人工' then `view_SEC`.`price` else '0' end)) = max((case `view_SEC`.`usage` when '资源池分拣人工' then `view_SEC`.`price` else '0' end))),group_concat((case `view_SEC`.`usage` when '资源池分拣人工' then `view_SEC`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `view_SEC`.`usage` when '资源池分拣人工' then `view_SEC`.`price` else '' end) using utf8),(case `view_SEC`.`usage` when '资源池分拣人工' then `view_SEC`.`receiver` else '' end)) separator '')) AS `仓库分拣人工姓名`,round(sum((case `view_SEC`.`usage` when '拉货人分拣人工' then `view_SEC`.`price` else '0' end)),2) AS `拉货人分拣人工`,if((sum((case `view_SEC`.`usage` when '拉货人分拣人工' then `view_SEC`.`price` else '0' end)) = max((case `view_SEC`.`usage` when '拉货人分拣人工' then `view_SEC`.`price` else '0' end))),group_concat((case `view_SEC`.`usage` when '拉货人分拣人工' then `view_SEC`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `view_SEC`.`usage` when '拉货人分拣人工' then `view_SEC`.`price` else '' end) using utf8),(case `view_SEC`.`usage` when '拉货人分拣人工' then `view_SEC`.`receiver` else '' end)) separator '')) AS `拉货人分拣人工姓名`,round(sum((case `view_SEC`.`usage` when '临时工分拣人工' then `view_SEC`.`price` else '0' end)),2) AS `外请临时工分拣`,if((sum((case `view_SEC`.`usage` when '临时工分拣人工' then `view_SEC`.`price` else '0' end)) = max((case `view_SEC`.`usage` when '临时工分拣人工' then `view_SEC`.`price` else '0' end))),group_concat((case `view_SEC`.`usage` when '临时工分拣人工' then `view_SEC`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `view_SEC`.`usage` when '临时工分拣人工' then `view_SEC`.`price` else '' end) using utf8),(case `view_SEC`.`usage` when '临时工分拣人工' then `view_SEC`.`receiver` else '' end)) separator '')) AS `外请临时工姓名`,round(sum((case `view_SEC`.`usage` when '耗材费-太空包' then `view_SEC`.`price` else '0' end)),2) AS `耗材（太空袋费）`,round(sum((case `view_SEC`.`usage` when '耗材费-编织袋' then `view_SEC`.`price` else '0' end)),2) AS `耗材（编织袋费）`,round(sum((case `view_SEC`.`usage` when '其他' then `view_SEC`.`price` else '0' end)),2) AS `其他入库费用`,if((sum((case `view_SEC`.`usage` when '其他' then `view_SEC`.`price` else '0' end)) = max((case `view_SEC`.`usage` when '其他' then `view_SEC`.`price` else '0' end))),group_concat((case `view_SEC`.`usage` when '其他' then `view_SEC`.`receiver` else '' end) separator ''),group_concat(concat_ws('',convert((case `view_SEC`.`usage` when '其他' then `view_SEC`.`price` else '' end) using utf8),(case `view_SEC`.`usage` when '其他' then `view_SEC`.`receiver` else '' end)) separator '')) AS `其他入库费用收款人`,group_concat((case `view_SEC`.`usage` when '其他' then `view_SEC`.`remark` else '' end) separator '') AS `其他入库费用说明` from (select `test_lvhuan`.`uct_waste_storage_expense`.`id` AS `id`,`test_lvhuan`.`uct_waste_storage_expense`.`purchase_id` AS `purchase_id`,`test_lvhuan`.`uct_waste_storage_expense`.`type` AS `type`,`test_lvhuan`.`uct_waste_storage_expense`.`usage` AS `usage`,`test_lvhuan`.`uct_waste_storage_expense`.`remark` AS `remark`,`test_lvhuan`.`uct_waste_storage_expense`.`price` AS `price`,`test_lvhuan`.`uct_waste_storage_expense`.`receiver` AS `receiver`,`test_lvhuan`.`uct_waste_storage_expense`.`createtime` AS `createtime`,`test_lvhuan`.`uct_waste_storage_expense`.`updatetime` AS `updatetime` from `test_lvhuan`.`uct_waste_storage_expense` union all select `test_lvhuan`.`uct_waste_storage_sort_expense`.`id` AS `id`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`purchase_id` AS `purchase_id`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`type` AS `type`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`usage` AS `usage`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`remark` AS `remark`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`price` AS `price`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`receiver` AS `receiver`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`createtime` AS `createtime`,`test_lvhuan`.`uct_waste_storage_sort_expense`.`updatetime` AS `updatetime` from `test_lvhuan`.`uct_waste_storage_sort_expense`) `view_SEC` group by `view_SEC`.`purchase_id`;

-- ----------------------------
-- View structure for view_sort_time
-- ----------------------------
DROP VIEW IF EXISTS `view_sort_time`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_sort_time` AS select `uct_waste_purchase_log`.`purchase_id` AS `purchase_id`,date_format(from_unixtime(`uct_waste_purchase_log`.`createtime`),'%Y-%m-%d') AS `createtime` from `uct_waste_purchase_log` where (`uct_waste_purchase_log`.`state_text` = '待入库确认');

-- ----------------------------
-- View structure for view_test
-- ----------------------------
DROP VIEW IF EXISTS `view_test`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_test` AS select `Trans_month_SOR_table`.`FRelateBrID` AS `FRelateBrID`,concat('#',`uct_waste_purchase`.`order_id`) AS `order_id`,`Trans_month_SOR_table`.`FDate` AS `FDate`,`Trans_month_SOR_table`.`FSupplyID` AS `FSupplyID`,`Trans_month_SOR_table`.`Fbusiness` AS `Fbusiness`,`Trans_month_SOR_table`.`FDeptID` AS `FDeptID`,`Trans_month_SOR_table`.`FEmpID` AS `FEmpID`,`Trans_month_SOR_table`.`FPOStyle` AS `FPOStyle`,`Trans_month_SOR_table`.`FPOPrecent` AS `FPOPrecent`,`Trans_month_SOR_table`.`profit` AS `profit`,`Trans_month_SOR_table`.`weight` AS `weight`,`Trans_month_SOR_table`.`transport_pay` AS `transport_pay`,`Trans_month_SOR_table`.`classify_pay` AS `classify_pay`,`Trans_month_SOR_table`.`material_pay` AS `material_pay`,`Trans_month_SOR_table`.`total_pay` AS `total_pay` from (`Trans_month_SOR_table` join `uct_waste_purchase`) where (`Trans_month_SOR_table`.`FInterID` = `uct_waste_purchase`.`id`);

-- ----------------------------
-- View structure for view_test_3
-- ----------------------------
DROP VIEW IF EXISTS `view_test_3`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_test_3` AS select sum(`uct_waste_storage_sort`.`net_weight`) AS `sum(``uct_waste_storage_sort``.``net_weight``)`,sum((round(`uct_waste_storage_sort`.`net_weight`,1) * round(`uct_waste_storage_sort`.`presell_price`,3))) AS `sum(net_weight*presell_price)` from `uct_waste_storage_sort` where (`uct_waste_storage_sort`.`purchase_id` = 22362);

-- ----------------------------
-- View structure for view_test_4
-- ----------------------------
DROP VIEW IF EXISTS `view_test_4`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_test_4` AS select round(sum(`uct_waste_purchase_cargo`.`net_weight`),1) AS `sum(net_weight)`,round(sum((`uct_waste_purchase_cargo`.`net_weight` * `uct_waste_purchase_cargo`.`unit_price`)),3) AS `sum(net_weight*unit_price)` from `uct_waste_purchase_cargo` where (`uct_waste_purchase_cargo`.`purchase_id` = 22264);

-- ----------------------------
-- View structure for view_test_cargo_list
-- ----------------------------
DROP VIEW IF EXISTS `view_test_cargo_list`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_test_cargo_list` AS select `Trans_assist`.`FInterID` AS `FInterID`,`Trans_assist`.`FItemID` AS `FItemID`,group_concat(concat_ws('',(case `Trans_assist`.`FTranType` when 'PUR' then concat('采购净重',`Trans_assist`.`FQty`) end),(case `Trans_assist`.`FTranType` when 'PUR' then concat('采购价',`Trans_assist`.`FPrice`) end)) separator '\n') AS `PUR_log`,round(sum((case `Trans_assist`.`FTranType` when 'PUR' then `Trans_assist`.`FQty` else '0' end)),1) AS `PUR_FQty`,round(sum((case `Trans_assist`.`FTranType` when 'PUR' then `Trans_assist`.`FAmount` else '0' end)),2) AS `PUR_FAmount` from `Trans_assist` where (`Trans_assist`.`FTranType` = 'PUR');

-- ----------------------------
-- View structure for view_third_sort
-- ----------------------------
DROP VIEW IF EXISTS `view_third_sort`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_third_sort` AS select `view_change_sort`.`id` AS `id`,`view_change_sort`.`parent_id` AS `parent_id`,`view_change_sort`.`name` AS `name`,`view_change_sort`.`branch_id` AS `branch_id` from (select `test_lvhuan`.`uct_waste_cate`.`id` AS `id`,`test_lvhuan`.`uct_waste_cate`.`parent_id` AS `parent_id`,`test_lvhuan`.`uct_waste_cate`.`name` AS `name`,`test_lvhuan`.`uct_waste_cate`.`branch_id` AS `branch_id` from `test_lvhuan`.`uct_waste_cate` where (`test_lvhuan`.`uct_waste_cate`.`parent_id` <> 0)) `view_change_sort` where (not(exists(select `view_first_sort`.`id` from `test_lvhuan`.`view_first_sort` where (`view_first_sort`.`id` = `view_change_sort`.`parent_id`))));

-- ----------------------------
-- View structure for view_valid_purchase
-- ----------------------------
DROP VIEW IF EXISTS `view_valid_purchase`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_valid_purchase` AS select `m`.`FRelateBrID` AS `FRelateBrID`,`m`.`FInterID` AS `FInterID`,date_format(`m`.`FDate`,'%Y-%m-%d') AS `FDate`,`m`.`FBillNo` AS `FBillNo`,`m`.`FSupplyID` AS `FSupplyID`,`m`.`Fbusiness` AS `Fbusiness`,`m`.`FEmpID` AS `FEmpID`,`m`.`FSaleStyle` AS `FSaleStyle`,`m`.`FCancellation` AS `FCancellation` from (`test_lvhuan`.`Trans_main_table` `m` join (select `m1`.`FBillNo` AS `FBillNo` from `test_lvhuan`.`Trans_main_table` `m1` where ((`m1`.`FCorrent` = 1) and (`m1`.`FTranType` = 'SOR')) union all select `m2`.`FBillNo` AS `FBillNo` from `test_lvhuan`.`Trans_main_table` `m2` where ((`m2`.`FStatus` = 1) and (`m2`.`FTranType` = 'SEL') and (`m2`.`FSaleStyle` = 1))) `s`) where ((`m`.`FTranType` = 'PUR') and (`m`.`FBillNo` = `s`.`FBillNo`));

-- ----------------------------
-- View structure for view_valid_sell
-- ----------------------------
DROP VIEW IF EXISTS `view_valid_sell`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_valid_sell` AS select `uct_waste_sell_log`.`sell_id` AS `sell_id` from `uct_waste_sell_log` where ((`uct_waste_sell_log`.`state_value` = 'wait_confirm_order') and (`uct_waste_sell_log`.`state_text` = '待付款'));

-- ----------------------------
-- View structure for view_warehouse_collect
-- ----------------------------
DROP VIEW IF EXISTS `view_warehouse_collect`;
CREATE ALGORITHM = UNDEFINED SQL SECURITY DEFINER VIEW `view_warehouse_collect` AS select `uct_waste_warehouse`.`id` AS `id`,`uct_waste_warehouse`.`name` AS `name` from `uct_waste_warehouse` where (`uct_waste_warehouse`.`parent_id` = 0);

-- ----------------------------
-- Procedure structure for city_wall_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `city_wall_report`;
delimiter ;;
CREATE PROCEDURE `city_wall_report`()
BEGIN

DECLARE nowdate date DEFAULT NOW();
set nowdate = DATE_FORMAT(date_sub(curdate(),interval 1 day),'%Y-%m-%d');

/*存入今日数据*/

insert into uct_day_wall_report(adcode,weight,availability,rubbish,rdf,carbon,box,customer_num,report_date) select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num,nowdate as report_date from uct_adcode ad left join 
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-9-30' and date_format(mt2.FDate,'%Y-%m-%d') = DATE_FORMAT(nowdate,'%Y-%m-%d') join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.city    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.city join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-9-30' and date_format(mt.FDate,'%Y-%m-%d') = DATE_FORMAT(nowdate,'%Y-%m-%d')  and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by cf.province,cf.city order by cf.area ) box  on box.adcode = ad.adcode

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by cf.province,cf.city order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on up.company_city = ad.name and first_business_time = DATE_FORMAT(nowdate,'%Y-%m-%d') group by company_province,company_city) customer on customer.adcode = ad.adcode

where right(ad.adcode,4) != '0000' and right(ad.adcode,2) = '00';

/*存入历史数据*/

update uct_accumulate_wall_report report join  (select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num from uct_adcode ad left join
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-9-30'  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.city    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.city join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-9-30' and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by cf.province,cf.city order by cf.area ) box  on box.adcode = ad.adcode

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by cf.province,cf.city order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on up.company_city = ad.name  group by company_province,company_city) customer on customer.adcode = ad.adcode

where right(ad.adcode,4) = '0000' and right(ad.adcode,2) = '00') data on report.adcode = data.adcode  
set  report.weight = data.weight , report.availability = data.availability , report.rubbish = data.rubbish ,report.rdf = data.rdf , report.carbon = data.carbon , report.box = data.box , report.customer_num = data.customer_num ; 

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for cursor_test
-- ----------------------------
DROP PROCEDURE IF EXISTS `cursor_test`;
delimiter ;;
CREATE PROCEDURE `cursor_test`()
begin

DECLARE done INT DEFAULT FALSE;
 
declare pid int;
declare cur1 CURSOR for select id from uct_admin where id = 2;
declare cur2 CURSOR for select id from uct_admin where id = 3;

-- 将结束标志绑定到游标
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

START TRANSACTION; 
open cur1;
fetch  cur1 into pid;

select pid;

close cur1;


open cur2;
fetch  cur2 into pid;

select pid;

close cur2;
COMMIT; 
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for edit_materiel_num
-- ----------------------------
DROP PROCEDURE IF EXISTS `edit_materiel_num`;
delimiter ;;
CREATE PROCEDURE `edit_materiel_num`(out o_rv        integer,
	out o_err       varchar(200))
BEGIN
  declare v_FInterID           							int;
	declare v_order_id           							varchar(20);
	declare v_number           								int;
  declare v_meta_id           							int;
  declare v_meta_price           						float;
	declare v_meta_amount           					float;
  declare v_money_all           						int;
	declare errno           								  int;
	
	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
	DECLARE report CURSOR FOR select FInterID,order_id,meta_id,number,meta_price,meta_amount from uct_apply_for_material_temp where state = 3;
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_FInterID,v_order_id,v_meta_id,v_number,v_meta_price,v_meta_amount;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	
	while s<>1 do
	-- 执行业务逻辑
        start transaction;   #开启事物

        set errno=0; 
        -- 修改Trans_materiel_table表里面的数据
        insert into Trans_materiel_table
                    (FInterID,
                    FTranType,
                    FEntryID	,
                    FMaterielID,
                    FUseCount,
                    FPrice,
                    FMeterielAmount,
										FMeterieltime,
										red_ink_time,
                    is_hedge,
                    revise_state)
             values (v_FInterID,
                    'PUR',
                    0,
                    v_meta_id,
                    v_number,
                    v_meta_price,
                    v_meta_amount,
										UNIX_TIMESTAMP(now()),
										now(),
                    0,
                    2);
        set errno=1;

        -- 修改Trans_main_table里面的数据
        select SUM(FMeterielAmount) as num into v_money_all 
          from Trans_materiel_table 
         where FInterID = v_FInterID 
           and FTranType in ('SOR','PUR');

        update  Trans_main_table set
                TalSecond = v_money_all,
                is_hedge = 1,
                red_ink_time = now()
         where  FInterID = v_FInterID 
				   and  FTranType = 'SOR'
           and  FSaleStyle <> 1;
        set errno=2;

        -- 修改uct_apply_for_material_temp临时表的状态 
        update  uct_apply_for_material_temp set
                state = 1
         where  FInterID = v_FInterID;
        set errno=3;

        commit;

        if  errno = 3 then
            set o_rv = 200;
            set o_err = "处理成功.";
        end if;
           
	
	
	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_FInterID,v_order_id,v_meta_id,v_number,v_meta_price,v_meta_amount;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for edit_materiel_num_1
-- ----------------------------
DROP PROCEDURE IF EXISTS `edit_materiel_num_1`;
delimiter ;;
CREATE PROCEDURE `edit_materiel_num_1`(out o_rv        integer,
	out o_err       varchar(200))
BEGIN
  declare v_FInterID           							int;
	declare v_order_id           							varchar(20);
	declare v_number           								int;
  declare v_meta_id           							int;
  declare v_meta_price           						float;
	declare v_meta_amount           					float;
  declare v_money_all           						int;
	declare errno           								  int;
	
	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
	DECLARE report CURSOR FOR select FInterID,order_id,meta_id,number,meta_price,meta_amount from uct_apply_for_material_temp where state = 3;
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_FInterID,v_order_id,v_meta_id,v_number,v_meta_price,v_meta_amount;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	
	while s<>1 do
	-- 执行业务逻辑
        start transaction;   #开启事物

        set errno=0; 
        -- 修改Trans_materiel_table表里面的数据
        insert into Trans_materiel_table
                    (FInterID,
                    FTranType,
                    FEntryID	,
                    FMaterielID,
                    FUseCount,
                    FPrice,
                    FMeterielAmount,
										FMeterieltime,
										red_ink_time,
                    is_hedge,
                    revise_state)
             values (v_FInterID,
                    'PUR',
                    0,
                    v_meta_id,
                    v_number,
                    v_meta_price,
                    v_meta_amount,
										UNIX_TIMESTAMP(now()),
										now(),
                    0,
                    2);
        set errno=1;

        -- 修改Trans_main_table里面的数据
        select SUM(FMeterielAmount) as num into v_money_all 
          from Trans_materiel_table 
         where FInterID = v_FInterID 
           and FTranType in ('SOR','PUR');

        update  Trans_main_table set
                TalSecond = TalSecond + v_money_all,
                is_hedge = 1,
                red_ink_time = now()
         where  FInterID = v_FInterID 
				   and  FTranType = 'SOR'
           and  FSaleStyle <> 1;
        set errno=2;

        -- 修改uct_apply_for_material_temp临时表的状态 
        update  uct_apply_for_material_temp set
                state = 1
         where  FInterID = v_FInterID;
        set errno=3;

        commit;

        if  errno = 3 then
            set o_rv = 200;
            set o_err = "处理成功.";
        end if;
           
	
	
	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_FInterID,v_order_id,v_meta_id,v_number,v_meta_price,v_meta_amount;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for edit_order_table
-- ----------------------------
DROP PROCEDURE IF EXISTS `edit_order_table`;
delimiter ;;
CREATE PROCEDURE `edit_order_table`(out o_rv        integer,
	out o_err       varchar(200))
BEGIN
    declare v_FInterID           							  int;
	  declare v_FTranType           							varchar(20);
	  declare v_metaID           								  int;
    declare v_net_weight           						  float;
	  declare v_price           					        float;
    declare v_weight_all           					    float;
    declare v_money_all           					    float;

    declare v_FEntryID           							  int;
    declare v_FItemID           							  int;
    declare v_FUnitID           							  varchar(20);
    declare v_FQty           							      float;
    declare v_FPrice           							    float;
    declare v_FAmount           							  float;
    declare v_disposal_way           						varchar(20);
    declare v_value_type           							varchar(20);
    declare v_FbasePrice           							char(1);
    declare v_FbaseAmount           						char(1);
    declare v_Ftaxrate           							  char(1);
    declare v_Fbasetax           							  char(1);
    declare v_Fbasetaxamount           					char(1);
    declare v_FPriceRef           							char(1);
    declare v_FDCTime           							  varchar(20);
    declare v_FSourceInterId           					varchar(11);
    declare v_FSourceTranType           				varchar(3);
    declare v_revise_state           					  int;
		declare v_hc_FQty           							  float;
    declare v_hc_FAmount           							float;
    declare v_new_FAmount           						float;
	  declare errno           								    int;
		


	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
	DECLARE report CURSOR FOR select FInterID,FTranType,metaID,net_weight,price from uct_apply_for_order_temp where state = 2;
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_FInterID,v_FTranType,v_metaID,v_net_weight,v_price;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	while s<>1 do
	-- 执行业务逻辑
        start transaction;   #开启事物

        set errno=0; 
        -- 获取Trans_assist_table表里面的数据
        select FEntryID,FItemID,FUnitID,FQty,FPrice,FAmount,disposal_way,value_type,if(FbasePrice,FbasePrice,'') as FbasePrice,if(FbaseAmount,FbaseAmount,'') as FbaseAmount,
               if(Ftaxrate,Ftaxrate,'') as Ftaxrate,if(Fbasetax,Fbasetax,'') as Fbasetax,if(Fbasetaxamount,Fbasetaxamount,'') as Fbasetaxamount,
               if(FPriceRef,FPriceRef,'') as FPriceRef,FDCTime,if(FSourceInterId,FSourceInterId,'') as FSourceInterId,if(FSourceTranType is not null,FSourceTranType,'') as FSourceTranType,revise_state into v_FEntryID, v_FItemID, v_FUnitID, v_FQty, v_FPrice, v_FAmount, v_disposal_way, v_value_type,v_FbasePrice, v_FbaseAmount, v_Ftaxrate, v_Fbasetax, v_Fbasetaxamount, v_FPriceRef, v_FDCTime, v_FSourceInterId, v_FSourceTranType,v_revise_state
          from Trans_assist_table 
         where FinterID = v_FInterID 
           and FTranType = v_FTranType 
           and (is_hedge is null or is_hedge = 0)
           and FItemID = v_metaID;
        set errno=1;
				

				-- 把Trans_assist_table表里面的原数据标记成为已经红冲的数据
        update Trans_assist_table set 
                is_hedge = 1,
                red_ink_time = now()
         where FinterID = v_FInterID 
           and FTranType = v_FTranType 
           and FItemID = v_metaID;
        set errno=2;

        -- Trans_assist_table表里面生成红冲数据
        set v_hc_FQty = v_FQty*(-1);
        set v_hc_FAmount  = v_FAmount*(-1);				
										
        insert into Trans_assist_table
                    (FinterID,FTranType,FEntryID,FItemID,FUnitID,
                    FQty,FPrice,FAmount,disposal_way,value_type,
										FbasePrice,FbaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,
                    FPriceRef,FDCTime,FSourceInterId,FSourceTranType,
                    red_ink_time,is_hedge,revise_state)
             values (v_FInterID,v_FTranType,v_FEntryID, v_FItemID, v_FUnitID,
                    v_hc_FQty,v_FPrice,v_hc_FAmount,v_disposal_way,v_value_type,
										v_FbasePrice,v_FbaseAmount,v_Ftaxrate,v_Fbasetax,v_Fbasetaxamount,
                    v_FPriceRef,v_FDCTime,v_FSourceInterId,v_FSourceTranType,
					          now(),1,v_revise_state);
        set errno=3;
				 			
        -- Trans_assist_table表里面生成修改数据
        set v_new_FAmount  = v_net_weight*v_price; 
        insert into Trans_assist_table
                    (FinterID,FTranType,FEntryID,FItemID,FUnitID,
                    FQty,FPrice,FAmount,disposal_way,value_type,
                    FbasePrice,FbaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,
                    FPriceRef,FDCTime,FSourceInterId,FSourceTranType,
                    red_ink_time,is_hedge,revise_state)
             values (v_FInterID,v_FTranType,v_FEntryID, v_FItemID, v_FUnitID,
                    v_net_weight,v_price,v_new_FAmount,v_disposal_way,v_value_type,
                    v_FbasePrice,v_FbaseAmount,v_Ftaxrate,v_Fbasetax,v_Fbasetaxamount, 
                    v_FPriceRef,v_FDCTime,v_FSourceInterId,v_FSourceTranType,
										now(),0,1);
        set errno=4;

        -- 修改主表里面的数据
        select SUM(FQty) as Qty_num,SUM(FAmount) as Amt_num into v_weight_all,v_money_all 
          from Trans_assist_table 
         where FinterID = v_FInterID 
           and FTranType = v_FTranType;

        update  Trans_main_table set
                TalFQty = v_weight_all,
                TalFAmount = v_money_all,
                is_hedge = 1,
                red_ink_time = now()
         where  FInterID = v_FInterID 
		       and  FTranType = v_FTranType;

        set errno=5;
				
				-- 修改uct_apply_for_order_temp临时表里面的状态
				update  uct_apply_for_order_temp set
                state = 1
         where  FInterID = v_FInterID 
		       and  FTranType = v_FTranType 
					 and  state = 2;
					 
			  set errno=6;
				
        commit;

        if  errno = 6 then
            set o_rv = 200;
            set o_err = "处理成功.";
        end if;
            
	
	
	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_FInterID,v_FTranType,v_metaID,v_net_weight,v_price;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for edit_order_table_1
-- ----------------------------
DROP PROCEDURE IF EXISTS `edit_order_table_1`;
delimiter ;;
CREATE PROCEDURE `edit_order_table_1`(out o_rv        integer,
	out o_err       varchar(200))
BEGIN
    declare v_FInterID           							  int;
	  declare v_FTranType           							varchar(20);
	  declare v_metaID           								  int;
    declare v_net_weight           						  float;
	  declare v_price           					        float;
    declare v_weight_all           					    float;
    declare v_money_all           					    float;

    declare v_FEntryID           							  int;
    declare v_FItemID           							  int;
    declare v_FUnitID           							  varchar(20);
    declare v_FQty           							      float;
    declare v_FPrice           							    float;
    declare v_FAmount           							  float;
    declare v_disposal_way           						varchar(20);
    declare v_value_type           							varchar(20);
    declare v_FbasePrice           							char(1);
    declare v_FbaseAmount           						char(1);
    declare v_Ftaxrate           							  char(1);
    declare v_Fbasetax           							  char(1);
    declare v_Fbasetaxamount           					char(1);
    declare v_FPriceRef           							char(1);
    declare v_FDCTime           							  varchar(20);
    declare v_FSourceInterId           					varchar(11);
    declare v_FSourceTranType           				varchar(3);
    declare v_revise_state           					  int;
		declare v_hc_FQty           							  float;
    declare v_hc_FAmount           							float;
    declare v_new_FAmount           						float;
	  declare errno           								    int;
		


	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
	DECLARE report CURSOR FOR select FInterID,FTranType,metaID,net_weight,price from uct_apply_for_order_temp where state = 3;
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_FInterID,v_FTranType,v_metaID,v_net_weight,v_price;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	while s<>1 do
	-- 执行业务逻辑
        start transaction;   #开启事物

        set errno=0; 
        -- 获取Trans_assist_table表里面的数据
        select FEntryID,FItemID,FUnitID,FQty,FPrice,FAmount,disposal_way,value_type,if(FbasePrice,FbasePrice,'') as FbasePrice,if(FbaseAmount,FbaseAmount,'') as FbaseAmount,
               if(Ftaxrate,Ftaxrate,'') as Ftaxrate,if(Fbasetax,Fbasetax,'') as Fbasetax,if(Fbasetaxamount,Fbasetaxamount,'') as Fbasetaxamount,
               if(FPriceRef,FPriceRef,'') as FPriceRef,FDCTime,if(FSourceInterId,FSourceInterId,'') as FSourceInterId,if(FSourceTranType is not null,FSourceTranType,'') as FSourceTranType,revise_state into v_FEntryID, v_FItemID, v_FUnitID, v_FQty, v_FPrice, v_FAmount, v_disposal_way, v_value_type,v_FbasePrice, v_FbaseAmount, v_Ftaxrate, v_Fbasetax, v_Fbasetaxamount, v_FPriceRef, v_FDCTime, v_FSourceInterId, v_FSourceTranType,v_revise_state
          from Trans_assist_table 
         where FinterID = v_FInterID 
           and FTranType = v_FTranType 
           and (is_hedge is null or is_hedge = 0)
           and FItemID = v_metaID;
        set errno=1;
				

				-- 把Trans_assist_table表里面的原数据标记成为已经红冲的数据
        update Trans_assist_table set 
                is_hedge = 1,
                red_ink_time = now()
         where FinterID = v_FInterID 
           and FTranType = v_FTranType 
           and FItemID = v_metaID;
        set errno=2;

        -- Trans_assist_table表里面生成红冲数据
        set v_hc_FQty = v_FQty*(-1);
        set v_hc_FAmount  = v_FAmount*(-1);				
										
        insert into Trans_assist_table
                    (FinterID,FTranType,FEntryID,FItemID,FUnitID,
                    FQty,FPrice,FAmount,disposal_way,value_type,
										FbasePrice,FbaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,
                    FPriceRef,FDCTime,FSourceInterId,FSourceTranType,
                    red_ink_time,is_hedge,revise_state)
             values (v_FInterID,v_FTranType,v_FEntryID, v_FItemID, v_FUnitID,
                    v_hc_FQty,v_FPrice,v_hc_FAmount,v_disposal_way,v_value_type,
										v_FbasePrice,v_FbaseAmount,v_Ftaxrate,v_Fbasetax,v_Fbasetaxamount,
                    v_FPriceRef,v_FDCTime,v_FSourceInterId,v_FSourceTranType,
					          now(),1,v_revise_state);
        set errno=3;
				 			
        -- Trans_assist_table表里面生成修改数据
        set v_new_FAmount  = v_net_weight*v_price; 
        insert into Trans_assist_table
                    (FinterID,FTranType,FEntryID,FItemID,FUnitID,
                    FQty,FPrice,FAmount,disposal_way,value_type,
                    FbasePrice,FbaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,
                    FPriceRef,FDCTime,FSourceInterId,FSourceTranType,
                    red_ink_time,is_hedge,revise_state)
             values (v_FInterID,v_FTranType,v_FEntryID, v_FItemID, v_FUnitID,
                    v_net_weight,v_price,v_new_FAmount,v_disposal_way,v_value_type,
                    v_FbasePrice,v_FbaseAmount,v_Ftaxrate,v_Fbasetax,v_Fbasetaxamount, 
                    v_FPriceRef,v_FDCTime,v_FSourceInterId,v_FSourceTranType,
										now(),0,1);
        set errno=4;

        -- 修改主表里面的数据
        select SUM(FQty) as Qty_num,SUM(FAmount) as Amt_num into v_weight_all,v_money_all 
          from Trans_assist_table 
         where FinterID = v_FInterID 
           and FTranType = v_FTranType;

        update  Trans_main_table set
                TalFQty = v_weight_all,
                TalFAmount = v_money_all,
                is_hedge = 1,
                red_ink_time = now()
         where  FInterID = v_FInterID 
		       and  FTranType = v_FTranType;

        set errno=5;
				
				-- 修改uct_apply_for_order_temp临时表里面的状态
				update  uct_apply_for_order_temp set
                state = 1
         where  FInterID = v_FInterID 
		       and  FTranType = v_FTranType 
					 and  state = 3;
					 
			  set errno=6;
				
        commit;

        if  errno = 6 then
            set o_rv = 200;
            set o_err = "处理成功.";
        end if;
            
	
	
	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_FInterID,v_FTranType,v_metaID,v_net_weight,v_price;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for insertManyDate
-- ----------------------------
DROP PROCEDURE IF EXISTS `insertManyDate`;
delimiter ;;
CREATE PROCEDURE `insertManyDate`(IN `beginDate` date,IN `endDate` date,IN `region_type` varchar(20))
BEGIN

DECLARE nowdate date DEFAULT NOW();
DECLARE endtmp date DEFAULT NOW();

DECLARE adcode_where varchar(100);
DECLARE customer_where varchar(100);
DECLARE customer_group_field varchar(100);
DECLARE factory_group_field varchar(100);
DECLARE factory_where varchar(100);


/*判断区域类型*/
if(region_type = 'area') then       /*区县*/
    set adcode_where = "right(ad.adcode,4) != '0000' and right(ad.adcode,2) != '00'";
    set customer_where = "up.company_region";
    set customer_group_field = "company_province,company_city,company_region";
    set factory_group_field = "cf.province,cf.city,cf.area";
    set factory_where = "cf.area";
elseif(region_type = 'city') then   /*城市*/
    set adcode_where = "right(ad.adcode,4) != '0000' and right(ad.adcode,2) = '00'";
    set customer_where = "up.company_city";
    set customer_group_field = "company_province,company_city";
    set factory_group_field = "cf.province,cf.city";
    set factory_where = "cf.city";
else                                /*省*/
    set adcode_where = "right(ad.adcode,4) = '0000'";
    set customer_where = "up.company_province";
    set customer_group_field = "company_province";
    set factory_group_field = "cf.province";
    set factory_where = "cf.province";
end if;


set nowdate = DATE_FORMAT(beginDate,'%Y-%m-%d');
set endtmp = DATE_FORMAT(endDate,'%Y-%m-%d');
WHILE nowdate<endtmp 
DO

set @sql = concat("insert into uct_day_wall_report(adcode,weight,availability,rubbish,rdf,carbon,box,customer_num,report_date) select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num,'",nowdate,"' as report_date from uct_adcode ad left join 
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-09-30' and date_format(mt2.FDate,'%Y-%m-%d') = DATE_FORMAT('",nowdate,"','%Y-%m-%d') join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where,"    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where," join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-09-30' and date_format(mt.FDate,'%Y-%m-%d') = DATE_FORMAT('",nowdate,"','%Y-%m-%d')  and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by ",factory_group_field," ) box  on box.adcode = ad.adcode   

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",factory_group_field," order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on ",customer_where," = ad.name and first_business_time = DATE_FORMAT('",nowdate,"','%Y-%m-%d') group by ",customer_group_field,") customer on customer.adcode = ad.adcode

where ",adcode_where);

prepare stmt from @sql;
execute stmt;
DEALLOCATE PREPARE stmt;   

set nowdate = DATE_FORMAT(DATE_ADD(nowdate,INTERVAL 1 DAY),'%Y-%m-%d');
END WHILE;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for insertOneLevelAccumulate
-- ----------------------------
DROP PROCEDURE IF EXISTS `insertOneLevelAccumulate`;
delimiter ;;
CREATE PROCEDURE `insertOneLevelAccumulate`(IN `region_type` varchar(50))
BEGIN 

DECLARE group_field varchar(50);
DECLARE region_where varchar(50);

/*判断区域类型*/
if(region_type = 'area') then       /*区县*/
    set group_field = 'cf.province,cf.city,cf.area';
    set region_where = 'ad.name = cf.area';
elseif(region_type = 'city') then   /*城市*/
    set group_field = 'cf.province,cf.city';
    set region_where = 'ad.name = cf.city';
else                                /*省*/
    set group_field = 'cf.province';
    set region_where = 'ad.name = cf.province';
end if;


set @sql = concat("replace into uct_one_level_accumulate_wall_report(adcode,name,weight,carbon) select ad.adcode,c3.name,round(sum(FQty),2) as weight , round(sum(FQty*c2.carbon_parm),2) as carbon from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-09-30'  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on " ,region_where, " join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   
join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  join  uct_waste_cate c3 on c2.parent_id = c3.id  
where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",group_field,",c3.name order by weight");

prepare stmt from @sql;
execute stmt;
DEALLOCATE PREPARE stmt;  

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for insertOneLevelManyDate
-- ----------------------------
DROP PROCEDURE IF EXISTS `insertOneLevelManyDate`;
delimiter ;;
CREATE PROCEDURE `insertOneLevelManyDate`(IN `beginDate` date,IN `endDate` date,IN `region_type` varchar(20))
BEGIN

DECLARE nowdate date DEFAULT NOW();
DECLARE endtmp date DEFAULT NOW();
DECLARE group_field varchar(50);
DECLARE region_where varchar(50);

/*判断区域类型*/
if(region_type = 'area') then       /*区县*/
    set group_field = 'cf.province,cf.city,cf.area';
    set region_where = 'ad.name = cf.area';
elseif(region_type = 'city') then   /*城市*/
    set group_field = 'cf.province,cf.city';
    set region_where = 'ad.name = cf.city';
else                                /*省*/
    set group_field = 'cf.province';
    set region_where = 'ad.name = cf.province';
end if;

set nowdate = DATE_FORMAT(beginDate,'%Y-%m-%d');
set endtmp = DATE_FORMAT(endDate,'%Y-%m-%d');

WHILE nowdate<endtmp 
DO

set @sql = concat("insert into uct_one_level_day_wall_report(adcode,name,weight,carbon,report_date) select ad.adcode,c3.name,round(sum(FQty),2) as weight,round(sum(FQty*c2.carbon_parm),2) as carbon, '",nowdate,"' as report_date from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-09-30' and date_format(mt2.FDate,'%Y-%m-%d') =  date_format('",nowdate,"','%Y-%m-%d')  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on " ,region_where, " join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   
join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  join  uct_waste_cate c3 on c2.parent_id = c3.id  
where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",group_field,",c3.name order by weight");

prepare stmt from @sql;
execute stmt;
DEALLOCATE PREPARE stmt;  

set nowdate = DATE_FORMAT(DATE_ADD(nowdate,INTERVAL 1 DAY),'%Y-%m-%d');
END WHILE;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for insertReportAccumulate
-- ----------------------------
DROP PROCEDURE IF EXISTS `insertReportAccumulate`;
delimiter ;;
CREATE PROCEDURE `insertReportAccumulate`(IN `region_type` varchar(50))
BEGIN 

DECLARE group_field varchar(50);
DECLARE region_where varchar(50);

DECLARE adcode_where varchar(100);
DECLARE customer_where varchar(100);
DECLARE customer_group_field varchar(100);
DECLARE factory_group_field varchar(100);
DECLARE factory_where varchar(100);


/*判断区域类型*/
if(region_type = 'area') then       /*区县*/
    set adcode_where = "right(ad.adcode,4) != '0000' and right(ad.adcode,2) != '00'";
    set customer_where = "up.company_region";
    set customer_group_field = "company_province,company_city,company_region";
    set factory_group_field = "cf.province,cf.city,cf.area";
    set factory_where = "cf.area";
elseif(region_type = 'city') then   /*城市*/
    set adcode_where = "right(ad.adcode,4) != '0000' and right(ad.adcode,2) = '00'";
    set customer_where = "up.company_city";
    set customer_group_field = "company_province,company_city";
    set factory_group_field = "cf.province,cf.city";
    set factory_where = "cf.city";
else                                /*省*/
    set adcode_where = "right(ad.adcode,4) = '0000'";
    set customer_where = "up.company_province";
    set customer_group_field = "company_province";
    set factory_group_field = "cf.province";
    set factory_where = "cf.province";
end if;


set @sql = concat("insert into uct_accumulate_wall_report(adcode,weight,availability,rubbish,rdf,carbon,box,customer_num) select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num  from uct_adcode ad left join
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-9-30'  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where,"    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where," join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-9-30' and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by ",factory_group_field," order by cf.area ) box  on box.adcode = ad.adcode

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",factory_group_field," order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on ",customer_where," = ad.name group by ",customer_group_field,") customer on customer.adcode = ad.adcode

where ",adcode_where);

prepare stmt from @sql;
execute stmt;
DEALLOCATE PREPARE stmt;  

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for insertStockHistory
-- ----------------------------
DROP PROCEDURE IF EXISTS `insertStockHistory`;
delimiter ;;
CREATE PROCEDURE `insertStockHistory`()
BEGIN
insert into Accoding_stock_history 
SELECT `base`.`FRelateBrID` AS `FRelateBrID`, `base`.`FStockID` AS `FStockID`, `base`.`FItemID` AS `FItemID`
	, round(SUM(ifnull(`base`.`FDCQty`, 0)), 1) AS `FDCQty`
	, round(SUM(ifnull(`base`.`FSCQty`, 0)), 1) AS `FSCQty`
	, '0' AS `FdifQty`
	, date_format(concat(`base`.`FDCTime`, ' 23:59:59'), '%Y-%m-%d %H:%i:%s') AS `FDCTime`
FROM (
    SELECT uct_waste_warehouse.branch_id AS `FRelateBrID`, concat('LH', uct_waste_warehouse.id) AS `FStockID`, `Trans_assist_table`.`FItemID` AS `FItemID`
        , CASE `Trans_main_table`.`FTranType`
            WHEN 'SOR' THEN `Trans_assist_table`.`FQty`
            ELSE 0
        END AS `FDCQty`
        , CASE `Trans_main_table`.`FTranType`
            WHEN 'SEL' THEN `Trans_assist_table`.`FQty`
            ELSE 0
        END AS `FSCQty`, date_format(`Trans_assist_table`.`FDCTime`, '%Y-%m-%d') AS `FDCTime`
    FROM `Trans_assist_table`
        JOIN `Trans_main_table`
        JOIN uct_waste_cate
        JOIN uct_waste_warehouse
    WHERE (`Trans_assist_table`.`FinterID` = `Trans_main_table`.`FInterID`)
        AND (`Trans_assist_table`.`FTranType` = `Trans_main_table`.`FTranType`)
        AND (`Trans_main_table`.`FSaleStyle` <> 1)
        AND (`Trans_main_table`.`FCancellation` = 1)
        AND uct_waste_cate.id = Trans_assist_table.FItemID
        AND uct_waste_cate.branch_id = uct_waste_warehouse.branch_id
        AND uct_waste_warehouse.parent_id = 0
        AND uct_waste_warehouse.state = 1
        AND (date_format(`Trans_assist_table`.`FDCTime`, '%Y-%m-%d') = DATE_SUB(curdate(), INTERVAL 1 DAY) or date_format(`Trans_assist_table`.`red_ink_time`, '%Y-%m-%d') = DATE_SUB(curdate(), INTERVAL 1 DAY))
) `base`
GROUP BY `base`.`FStockID`, `base`.`FItemID`, `base`.`FDCTime`
HAVING `base`.`FStockID` IS NOT NULL
UNION ALL
SELECT `uct_cate_account`.`branch_id` AS `FRelateBrID`, concat('LH', `uct_cate_account`.`warehouse_id`) AS `FStockID`, `uct_cate_account`.`cate_id` AS `FItemID`
	, '0' AS `FDCQty`, '0' AS `FSCQty`, `uct_cate_account`.`before_account_num` - `uct_cate_account`.`account_num` AS `FdifQty`
	, concat(date_format(from_unixtime(`uct_cate_account`.`createtime`), '%Y-%m-%d'), ' 23:59:59') AS `FDCTime`
FROM `uct_cate_account`
WHERE date_format(from_unixtime(`uct_cate_account`.`createtime`), '%Y-%m-%d') = DATE_SUB(curdate(),INTERVAL 1 DAY);


END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_month_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_month_report`;
delimiter ;;
CREATE PROCEDURE `lh_dw_month_report`(IN `p_day` varchar(50),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_new_day       varchar(50);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "月报表数据生成失败.";
    end;
		
		
main_proc:begin
  
	
  select DATE_FORMAT(DATE_ADD(p_day, INTERVAL 1 MONTH),'%Y-%m-%d') into v_new_day;
	
	if v_new_day is  null then
				set o_rv = 400;
				set o_err = "获取月份失败.";
				leave main_proc;
  end if;
	
	
	start transaction;
	set errno=1000;
	-- 月总收益
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
select base.time_dims, base.time_val, 
       FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
       base.data_dims, main.FSupplyID as data_val, 
       base.stat_code,  base.group1, null as group2, null as txt1,
       sum(main.TalFAmount) as val1
  from Trans_main_table as main,
       (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
               UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
               DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
               'M' as time_dims, 
               '客户' as data_dims,
               'customer-monthly-report' as stat_code,
               'revenue' as group1
       ) as base
 where UNIX_TIMESTAMP(main.FDate) > base.begin_time
   and UNIX_TIMESTAMP(main.FDate) < base.end_time 
   and main.FCancellation = 1 
   and main.FTranType = 'PUR' 
GROUP BY main.FSupplyID;

set errno=1001;

	-- 月总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
  select base.time_dims, base.time_val, 
         FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
         base.data_dims, main.FSupplyID as data_val, 
         base.stat_code,  base.group1, null as group2, null as txt1,
         sum(main.TalFQty) as val1
    from Trans_main_table as main,
         (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                 'M' as time_dims, 
                 '客户' as data_dims,
                 'customer-monthly-report' as stat_code,
                 'weight' as group1
         ) as base
   where UNIX_TIMESTAMP(main.FDate) > base.begin_time
     and UNIX_TIMESTAMP(main.FDate) < base.end_time 
     and main.FCancellation = 1 
     and main.FTranType = 'PUR' 
 GROUP BY main.FSupplyID;
 
 set errno=1002;
 
 -- 统计总收益
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3) 
          select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
               det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((m1 - m2)/m2,4) end) * 100) as val3
          from (select A.time_dims, A.time_val,FROM_UNIXTIME(A.begin_time) as begin_time, FROM_UNIXTIME(A.end_time) as end_time, A.data_dims, A.data_val, A.stat_code, A.group1,
                         ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < A.end_time and FSupplyID = A.data_val),0) as m1, 
                         ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < (A.begin_time - 1) and FSupplyID = A.data_val),0) as m2 
                    from (select base.time_dims, base.time_val, base.time_val2,base.begin_time, base.end_time,base.data_dims, main.FSupplyID as data_val, 
                                   base.stat_code,  base.group1
                              from Trans_main_table as main,
                                   (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                        UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                        'M' as time_dims, 
                                        '客户' as data_dims,
                                        'customer-monthly-report' as stat_code,
                                        'cumulative-revenue' as group1
                                   ) as base
                         where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                              and main.FCancellation = 1 
                              and main.FTranType = 'PUR' 
                         GROUP BY main.FSupplyID
                         ) as A
               ) as det;
							 
	set errno=1003;
							 
  -- 统计总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3) 
          select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
                 det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((m1 - m2)/m2,4) end) * 100) as val3
            from (select A.time_dims, A.time_val,FROM_UNIXTIME(A.begin_time) as begin_time, FROM_UNIXTIME(A.end_time) as end_time, A.data_dims, A.data_val, A.stat_code, A.group1,
                         ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < A.end_time and FSupplyID = A.data_val),0) as m1, 
                         ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < (A.begin_time - 1) and FSupplyID = A.data_val),0) as m2 
                    from (select base.time_dims, base.time_val, base.time_val2,base.begin_time, base.end_time,base.data_dims, main.FSupplyID as data_val, 
                                   base.stat_code,  base.group1
                              from Trans_main_table as main,
                                   (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                        UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                        'M' as time_dims, 
                                        '客户' as data_dims,
                                        'customer-monthly-report' as stat_code,
                                        'cumulative-weight' as group1
                                   ) as base
                         where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                              and main.FCancellation = 1 
                              and main.FTranType = 'PUR' 
                         GROUP BY main.FSupplyID
                         ) as A
                 ) as det;
								 
	set errno=1004; 
								 
	
	-- 处置量-按废弃物结构-有价废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, 
                 base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1, base.group2,
                    ifnull((select SUM(oldAssist.FQty) 
                              from Trans_main_table as oldMain
                         left join Trans_assist_table as oldAssist
                              on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                         where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
                              and oldMain.FCancellation = 1 
                              and oldMain.FCorrent = 1
                              and oldMain.FSaleStyle in (0,1) 
                              and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                              and oldAssist.value_type = 'valuable'
                              and oldMain.FSupplyID = main.FSupplyID),0) as val1
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-structure' as group1,
                         'recyclable-waste' as group2
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
          GROUP BY main.FSupplyID;
					
	set errno=1005; 
					
	-- 处置量-按废弃物结构-低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, 
                 base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1, base.group2,
                    ifnull((select SUM(oldAssist.FQty) 
                              from Trans_main_table as oldMain
                         left join Trans_assist_table as oldAssist
                              on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                         where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
                              and oldMain.FCancellation = 1 
                              and oldMain.FCorrent = 1
                              and oldMain.FSaleStyle in (0,1) 
                              and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                              and oldAssist.value_type = 'unvaluable'
                              and oldMain.FSupplyID = main.FSupplyID),0) as val1
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-structure' as group1,
                         'low-value-waste' as group2
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
          GROUP BY main.FSupplyID;
					
	set errno=1006; 				
					
	-- 处置量-按废弃物结构-危险废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, 
                 base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1, base.group2,
                    ifnull((select SUM(oldAssist.FQty) 
                              from Trans_main_table as oldMain
                         left join Trans_assist_table as oldAssist
                              on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                         where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
                              and oldMain.FCancellation = 1 
                              and oldMain.FCorrent = 1
                              and oldMain.FSaleStyle in (0,1) 
                              and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                              and oldAssist.value_type = 'dangerous'
                              and oldMain.FSupplyID = main.FSupplyID),0) as val1
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-structure' as group1,
                         'hazardous-waste' as group2
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
          GROUP BY main.FSupplyID;
					
	set errno=1007;
	
	-- 处置量-按废弃物结构-有价废弃物-增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select res.data_val, 
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2,
                          sum(if(res.time_val = base.time_val,res.val1,0)) as m1, 
                          sum(if(res.time_val = base.time_val2,res.val1,0)) as m2         
                     from lh_dw.data_statistics_results as res,
                                          (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                                  'M' as time_dims, 
                                                  '客户' as data_dims,
                                                  'customer-monthly-report' as stat_code,
                                                  'weight-by-waste-structure' as group1,
                                                  'recyclable-waste' as group2
                                          ) as base
                    where (res.time_val = base.time_val or res.time_val = base.time_val2) 
                      and res.stat_code = base.stat_code
                      and res.group2 = base.group2
                      and res.data_dims = base.data_dims
                 group by res.data_val,
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2) as cal
    set main.val2 = if(cal.m2=0, 0, cal.m1-cal.m2)      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val;
		
	set errno=1008;
	
	-- 处置量-按废弃物结构-低值废弃物-增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select res.data_val, 
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2,
                          sum(if(res.time_val = base.time_val,res.val1,0)) as m1, 
                          sum(if(res.time_val = base.time_val2,res.val1,0)) as m2         
                     from lh_dw.data_statistics_results as res,
                                          (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                                  'M' as time_dims, 
                                                  '客户' as data_dims,
                                                  'customer-monthly-report' as stat_code,
                                                  'weight-by-waste-structure' as group1,
                                                  'low-value-waste' as group2
                                          ) as base
                    where (res.time_val = base.time_val or res.time_val = base.time_val2) 
                      and res.stat_code = base.stat_code
                      and res.group2 = base.group2
                      and res.data_dims = base.data_dims
                 group by res.data_val,
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2) as cal
    set main.val2 = if(cal.m2=0, 0, cal.m1-cal.m2)      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val;
		
	set errno=1009;
		
	-- 处置量-按废弃物结构-危险废弃物-增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select res.data_val, 
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2,
                          sum(if(res.time_val = base.time_val,res.val1,0)) as m1, 
                          sum(if(res.time_val = base.time_val2,res.val1,0)) as m2         
                     from lh_dw.data_statistics_results as res,
                                          (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                                  'M' as time_dims, 
                                                  '客户' as data_dims,
                                                  'customer-monthly-report' as stat_code,
                                                  'weight-by-waste-structure' as group1,
                                                  'hazardous-waste' as group2
                                          ) as base
                    where (res.time_val = base.time_val or res.time_val = base.time_val2) 
                      and res.stat_code = base.stat_code
                      and res.group2 = base.group2
                      and res.data_dims = base.data_dims
                 group by res.data_val,
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2) as cal
    set main.val2 = if(cal.m2=0, 0, cal.m1-cal.m2)      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val;
		
	set errno=1010;
	
	-- 处置量-按废弃物结构-废弃物占比(百分比)	
	update 
     lh_dw.data_statistics_results as main,
                        (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,B.time_val,B.time_dims,B.group1
                        from lh_dw.data_statistics_results as A
                   left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                                from lh_dw.data_statistics_results as C,
                                     (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                     'M' as time_dims, 
                                     'weight-by-waste-structure' as group1
                                     ) as base 
                               where C.time_dims = base.time_dims 
                                 and C.time_val = base.time_val 
                                 and C.group1 = base.group1 
                            group by C.data_val
                             ) as B
                          on A.data_val = B.data_val
                       where A.time_dims = B.time_dims 
                         and A.time_val = B.time_val 
                         and A.group1 = B.group1 
                         order by  A.data_val
                        ) as detail
    set main.val3 = detail.rate * 100
  where main.time_dims = detail.time_dims
    and main.time_val = detail.time_val
    and main.group1 = detail.group1
    and main.id = detail.id;
		
	set errno=1011;	
	
	-- 首次清运日期
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select main.time_dims, main.time_val,FROM_UNIXTIME(main.begin_time) as begin_time, FROM_UNIXTIME(main.end_time) as end_time,
           main.data_dims,main.data_val,main.stat_code,main.group1, main.group2, left((MIN(det.FDate)),10) as txt1, main.val1  
      from (select base.time_dims, base.time_val,base.begin_time, base.end_time,
                   base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, null as group2,  null as val1  
              from Trans_main_table as A,
                   (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'first-service-time' as group1
                   ) as base
             where A.FCancellation = 1 
               and UNIX_TIMESTAMP(A.FDate) > base.begin_time
               and UNIX_TIMESTAMP(A.FDate) < base.end_time
               and A.FTranType = 'PUR' 
             group by A.FSupplyID
           ) as main
 left join Trans_main_table as det
        on main.data_val = det.FSupplyID
       and UNIX_TIMESTAMP(det.FDate) < main.end_time
       and UNIX_TIMESTAMP(det.FDate) > 1546272000
       and det.FCancellation = 1
       and det.FTranType = 'PUR' 
       group by det.FSupplyID;
			 
	set errno=1012;	
	
  -- 月清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, null as group2, null as txt1, count(distinct A.FBillNo) as val1,
           (select ifnull(SUM(Y.train_number),0) as num from Trans_main_table as X left join uct_waste_purchase as Y on X.FBillNo = Y.order_id 
                     where X.FCancellation = 1  and X.FTranType = 'PUR' and UNIX_TIMESTAMP(X.FDate) > base.begin_time 
                    and UNIX_TIMESTAMP(X.FDate) < base.end_time  and X.FSupplyID = A.FSupplyID) as val2  
      from Trans_main_table as A,
           (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-times' as group1
           ) as base
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
  group by A.FSupplyID;
	
	set errno=1013;
	
	-- 累计清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
            select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,main.m1 as val1, main.m2 as val2,
                   ((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end) * 100) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-service-times' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select count(distinct if(UNIX_TIMESTAMP(FDate) < base.end_time, FBillNo, null)) as m1,
                           count(distinct if(UNIX_TIMESTAMP(FDate) < (base.begin_time - 1), FBillNo, null)) as m2,
                           FSupplyID
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(now(), INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(now(), INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where FCancellation = 1 
                       and FTranType = 'PUR' 
                       and UNIX_TIMESTAMP(FDate) > 1546272000
                       group by FSupplyID
                    ) as main
                on main.FSupplyID = cus.id
             where cus.customer_type = 'up'
             GROUP BY cus.id;
						
	set errno=1014;		
	
	-- 累计清运次数--修改清运次数-占比
	update 
          lh_dw.data_statistics_results as main,
                         (select A.time_dims,A.time_val,A.group1,A.data_val,(case when A.m1 = 0 then 0 else round((A.val1 - A.m1)/A.m1,3) end) as val2, (A.val1 - A.m1) as val3
                            from (select main.val1, main.time_dims, main.data_val ,main.time_val,  base.time_val2, main.group1, 
                                         ifnull((select val1 
                                                   from lh_dw.data_statistics_results 
                                                   where time_dims = base.time_dims 
                                                   and time_val = base.time_val2
                                                   and group1 = base.group1
                                                   and data_val = main.data_val),0) as m1
                                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                              UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                              DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                              DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                              'M' as time_dims, 
                                              '客户' as data_dims,
                                              'customer-monthly-report' as stat_code,
                                              'cumulative-service-times' as group1
                                         ) as base,
                                         lh_dw.data_statistics_results as main
                                   where main.time_dims = base.time_dims 
                                     and main.time_val = base.time_val
                                     and main.group1 = base.group1) as A
                         ) as detail
     set main.val2 = detail.val2 * 100,
         main.val3 = detail.val3
   where main.time_val = detail.time_val
     and main.time_dims= detail.time_dims
     and main.group1 = detail.group1 
     and main.data_val = detail.data_val;
		 
	set errno=1015;	 
	
  -- 订单响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MIN(B.Tallot-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1016;
	
	-- 订单响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(AVG(B.Tallot-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1017;
	
	-- 订单响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MAX(B.Tallot-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1018;
	
	-- 订单响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round((AVG(B.Tallot-B.Tcreate)+((MAX(B.Tallot-B.Tcreate)+MIN(B.Tallot-B.Tcreate)+4*AVG(B.Tallot-B.Tcreate))/3))/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1019;
	
	-- 清运响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MIN(B.Tpurchase-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1020;
	
	-- 清运响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(AVG(B.Tpurchase-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1021;
	
	-- 清运响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MAX(B.Tpurchase-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1022;
	
	-- 清运响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round((AVG(B.Tpurchase-B.Tcreate)+((MAX(B.Tpurchase-B.Tcreate)+MIN(B.Tpurchase-B.Tcreate)+4*AVG(B.Tpurchase-B.Tcreate))/3))/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
  group by A.FSupplyID;
	
	set errno=1023;
	
	-- 品类排名
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1, val1, val2) 
    select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time,FROM_UNIXTIME(base.end_time) as end_time,base.data_dims,
           main.FSupplyID as data_val,base.stat_code,base.group1,cat.name,sum(det.FAmount) as money,sum(det.FQty) as weight
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue-by-waste-cate' as group1
           ) as base,
           Trans_main_table as main
 left join Trans_assist_table as det
        on main.FInterID = det.FinterID and main.FTranType = det.FTranType
 left join uct_waste_cate as cat
        on det.FItemID = cat.id
     where UNIX_TIMESTAMP(main.FDate) > base.begin_time
       and UNIX_TIMESTAMP(main.FDate) < base.end_time 
       and main.FCancellation = 1 
       and main.FTranType = 'PUR' 
       and det.value_type = 'valuable'
     GROUP BY main.FSupplyID,det.FItemID;
		 
	set errno=1024;	
	
  -- 品类排名-更新金额排名
	UPDATE lh_dw.data_statistics_results as a
            INNER JOIN (SELECT main.id, main.data_val, main.val1, CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                               @curGroup:= main.data_val,@preAge:= main.val1
                          FROM (select @curGroup :=0,
                                       @preAge :=0,
                                       @row :=0,
                                       'revenue-by-waste-cate' as group1,
                                       DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                       '客户' as data_dims
                               ) as base,
                               lh_dw.data_statistics_results as main
                         WHERE main.group1 = base.group1
                           AND main.time_val = base.time_val
                           AND main.data_dims = base.data_dims
                      ORDER BY main.data_val ASC, main.val1 DESC
                       ) b 
               ON a.id=b.id
        SET a.val3=b.urank;
				
	set errno=1025;	
	
	-- 品类排名-更新重量排名
	UPDATE lh_dw.data_statistics_results as a
          INNER JOIN (SELECT main.id, main.data_val, main.val2, 
                              CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                              @curGroup:= main.data_val,@preAge:= main.val2
                         FROM (select @curGroup :=0,
                                        @preAge :=0,
                                        @row :=0,
                                        'revenue-by-waste-cate' as group1,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        '客户' as data_dims
                              ) as base,
                              lh_dw.data_statistics_results as main
                    WHERE main.group1 = base.group1
                         AND main.time_val = base.time_val
                         AND main.data_dims = base.data_dims
                    ORDER BY main.data_val ASC, main.val2 DESC
                    ) b 
               ON a.id=b.id
        SET a.val4=b.urank;
				
	set errno=1026;	
	
	-- 采购重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2, val3) 
     select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
            base.data_dims,main.FSupplyID as data_val, base.stat_code, base.group1, 
            SUM(if(assist.value_type in ('valuable','unvaluable'),assist.FQty,0)) as val1,
            SUM(if(assist.value_type = 'valuable',assist.FQty,0)) as val2,
            SUM(if(assist.value_type = 'unvaluable',assist.FQty,0)) as val3
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'purchase-weight' as group1
            ) as base,
            Trans_main_table as main
     left join Trans_assist_table as assist
         on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
      where UNIX_TIMESTAMP(main.FDate) > base.begin_time
        and UNIX_TIMESTAMP(main.FDate) < base.end_time 
        and main.FTranType = 'PUR'
        and main.FCancellation = 1 
      group by main.FSupplyID;
			
	set errno=1027;	
	
	-- 入库分析
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3, val4, val5) 
     select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
               base.data_dims,main.FSupplyID as data_val, base.stat_code, base.group1,   
               SUM(assist.FAmount) as val1,
               SUM(if(assist.FTranType = 'SOR' and assist.disposal_way = 'sorting',assist.FAmount,0)) as val2,
               SUM(if(((assist.FTranType = 'SOR' and assist.disposal_way = 'weighing') or (assist.FTranType = 'SEL')),assist.FAmount,0)) as val3,
               SUM(if(assist.FTranType = 'SOR' and assist.disposal_way = 'sorting',assist.FQty,0)) as val4,
               SUM(if(((assist.FTranType = 'SOR' and assist.disposal_way = 'weighing') or (assist.FTranType = 'SEL')),assist.FQty,0)) as val5
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'inventory-analysis' as group1
               ) as base,
               Trans_main_table as main
   left join Trans_assist_table as assist
          on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
       where UNIX_TIMESTAMP(main.FDate) > base.begin_time
         and UNIX_TIMESTAMP(main.FDate) < base.end_time 
         and main.FCancellation = 1
         and main.FCorrent = 1  
     group by main.FSupplyID;
		 
	set errno=1028;	
	
  -- 雷达图--分拣成本
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2, val3) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                 ((select output_value from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' and start_value <= A.val2 and end_value > A.val2) + 
                  (select output_value from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' and start_value <= A.val3 and end_value > A.val3)
                 ) as val1,A.val2,A.val3
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         ifnull(round((select IFNULL(val4,0)  from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'inventory-analysis' and data_val = main.data_val)/
                                      (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' and data_val = main.data_val),3),0) as val2,
                         ifnull(round((select IFNULL(val2,0) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'inventory-analysis' and data_val = main.data_val)/
                                      (select val4 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'inventory-analysis' and data_val = main.data_val),3),0) as val3
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                 'M' as time_dims, 
                                 '客户' as data_dims,
                                 'customer-monthly-report' as stat_code,
                                 'customer-index' as group1,
                                 'sorting-cost' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                   where main.time_val = base.time_val
                     and main.stat_code = 'customer-monthly-report'
                     and main.group1 = 'weight') as A;
										 
	set errno=1029;	
	
	-- 雷达图--互信指数
insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2, val3) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                 ((select output_value from lh_dw.data_statistics_value_interval where vice_code = 'first_order_time' and start_value <= A.val2 and end_value > A.val2) + 
                  (select output_value from lh_dw.data_statistics_value_interval where vice_code = 'month_output' and start_value <= A.val3 and end_value > A.val3)
                 ) as val1,A.val2,A.val3
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         round((UNIX_TIMESTAMP(v_new_day) - (select UNIX_TIMESTAMP(txt1) as first from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'first-service-time' and data_val = main.data_val))/86400,3) as val2,
                         (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' and data_val = main.data_val) as val3
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                 'M' as time_dims, 
                                 '客户' as data_dims,
                                 'customer-monthly-report' as stat_code,
                                 'customer-index' as group1,
                                 'trust-index' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                   where main.time_val = base.time_val
                     and main.stat_code = 'customer-monthly-report'
                     and main.group1 = 'weight') as A;
										 
	set errno=1030;
	-- 雷达图--服务时效
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2)
     select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
            (select output_value from lh_dw.data_statistics_value_interval where main_code = 'service-effect' and start_value <= A.val2 and end_value > A.val2) as val1,
            A.val2
       from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                    base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                    round((select  ifnull((SUM(G.sign_out_time-G.sign_in_time)/count(E.FCancellation)),0) as num from Trans_main_table as E left join uct_waste_purchase as F on E.FBillNo = F.order_id 
                                   left join uct_purchase_sign_in_out as G on F.id = G.purchase_id where E.FCancellation = 1 and UNIX_TIMESTAMP(E.FDate) > base.begin_time 
                                   and UNIX_TIMESTAMP(E.FDate) < base.end_time and E.FTranType = 'PUR' and G.sign_in_time > 0 and G.sign_out_time > 0 and E.FSupplyID = main.data_val
                    ),2) as val2
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'customer-index' as group1,
                            'service-effect' as group2
                    ) as base,
                    lh_dw.data_statistics_results as main
              where main.time_val = base.time_val
                and main.stat_code = 'customer-monthly-report'
                and main.group1 = 'weight') as A;
								
	set errno=1031;		
	
	-- 雷达图--满载率
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2)
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                 (select output_value from lh_dw.data_statistics_value_interval where main_code = 'load-factor' and start_value <= A.val2 and end_value > A.val2) as val1,
                 A.val2
            from (select det.time_dims,det.time_val,det.begin_time, det.end_time,det.data_dims, det.data_val, det.stat_code, det.group1, 
                         det.group2, det.txt1 as txt1,(case when det.m2 = 0 then 0 else round((m1/m2),2) end) as val2
                    from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                                 base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                                 ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                                   and data_val = main.data_val),0) as m1,
                                 ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'service-times' 
                                   and data_val = main.data_val),0) as m2
                            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                         'M' as time_dims, 
                                         '客户' as data_dims,
                                         'customer-monthly-report' as stat_code,
                                         'customer-index' as group1,
                                         'load-factor' as group2
                                 ) as base,
                                 lh_dw.data_statistics_results as main
                           where main.time_val = base.time_val
                             and main.stat_code = 'customer-monthly-report'
                             and main.group1 = 'weight'
                         ) as det
                 ) as A;
							 
	set errno=1032;	
	
	-- 雷达图--废弃物结构
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2, val3) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                    ((select output_value from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' and start_value <= A.val2 and end_value > A.val2) + 
                    (select output_value from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' and start_value <= A.val3 and end_value > A.val3)
                    ) as val1,A.val2,A.val3
               from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         ifnull(round((select IFNULL(val3,0)  from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' and data_val = main.data_val)/
                                        (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' and data_val = main.data_val),3),0) as val2,
                         ifnull(round((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' and data_val = main.data_val)/
                                        (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' and data_val = main.data_val),3),0) as val3
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'customer-index' as group1,
                                   'waste-structure' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                    where main.time_val = base.time_val
                         and main.stat_code = 'customer-monthly-report'
                         and main.group1 = 'weight') as A;
	set errno=1033;	
	
	-- 雷达图--同行比较
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                    (select output_value from lh_dw.data_statistics_value_interval where main_code = 'industry-ranking' and start_value <= A.val2 and end_value >= A.val2)  as val1,A.val2
               from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' and data_val = main.data_val),0) as val2
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'customer-index' as group1,
                                   'industry-ranking' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                    where main.time_val = base.time_val
                         and main.stat_code = 'customer-monthly-report'
                         and main.group1 = 'weight') as A;
	set errno=1034;	
	
	-- 雷达图--获取总分数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                 ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' and data_val = main.data_val),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'customer-index' as group1,
                         'the_overall_score' as group2
                 ) as base,
                 lh_dw.data_statistics_results as main
           where main.time_val = base.time_val
             and main.stat_code = 'customer-monthly-report'
             and main.group1 = 'weight';
						 
	set errno=1035;	
	
	-- 玻、金、塑、纸--	玻璃的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1, 0 as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'glass' as group2
                 ) as base,
                 Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
        GROUP BY secondary.FSupplyID;
				
	set errno=1036;
	
	-- 玻、金、塑、纸--	金属的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1,
                  ifnull((select SUM(assist.FQty) from Trans_main_table as main
                       left join Trans_assist_table as assist
                              on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
                       left join uct_waste_cate as cate
                              on assist.FItemID = cate.id
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                             and main.FCancellation = 1
                             and main.FCorrent = 1  
                             and ((main.FTranType = 'SOR') or (main.FTranType = 'SEL' and main.FSaleStyle = 1))
                             and cate.top_class = 'metal'
                             and main.FSupplyID = secondary.FSupplyID),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'metal' as group2
                  ) as base,
                    Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
          GROUP BY secondary.FSupplyID;
					
	set errno=1037;
	
	-- 玻、金、塑、纸--	塑料的重量
	 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1,
                  ifnull((select SUM(assist.FQty) from Trans_main_table as main
                       left join Trans_assist_table as assist
                              on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
                       left join uct_waste_cate as cate
                              on assist.FItemID = cate.id
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                             and main.FCancellation = 1
                             and main.FCorrent = 1  
                             and ((main.FTranType = 'SOR') or (main.FTranType = 'SEL' and main.FSaleStyle = 1))
                             and cate.top_class = 'plastic'
                             and main.FSupplyID = secondary.FSupplyID),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'plastic' as group2
                 ) as base,
                 Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
        GROUP BY secondary.FSupplyID;
				
	set errno=1038;
	-- 玻、金、塑、纸--	纸类的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1,
                  ifnull((select SUM(assist.FQty) from Trans_main_table as main
                       left join Trans_assist_table as assist
                              on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
                       left join uct_waste_cate as cate
                              on assist.FItemID = cate.id
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                             and main.FCancellation = 1
                             and main.FCorrent = 1  
                             and ((main.FTranType = 'SOR') or (main.FTranType = 'SEL' and main.FSaleStyle = 1))
                             and cate.top_class = 'waste-paper'
                             and main.FSupplyID = secondary.FSupplyID),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'waste-paper' as group2
                 ) as base,
                 Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
          GROUP BY secondary.FSupplyID;
					
	set errno=1039;				
	-- 玻、金、塑、纸--	重量占比
	update 
          lh_dw.data_statistics_results as main,
                              (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,B.time_val,B.time_dims,B.group1
                              from lh_dw.data_statistics_results as A
                         left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                                      from lh_dw.data_statistics_results as C,
                                           (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                   'M' as time_dims, 
                                                   'weight-by-waste-class' as group1
                                           ) as base 
                                     where C.time_dims = base.time_dims 
                                       and C.time_val = base.time_val 
                                       and C.group1 = base.group1 
                                  group by C.data_val
                                   ) as B
                              on A.data_val = B.data_val
                         where A.time_dims = B.time_dims 
                              and A.time_val = B.time_val 
                              and A.group1 = B.group1 
                              order by  A.data_val
                              ) as detail
          set main.val2 = detail.rate * 100
        where main.time_dims = detail.time_dims
          and main.time_val = detail.time_val
          and main.group1 = detail.group1
          and main.id = detail.id;
					
	set errno=1040;
	
	-- 绿币(只算有价的。一吨一个绿币)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1)  
          select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
                 round((det.m1/1000)*1,1) as val1
            from (select A.time_dims, A.time_val,FROM_UNIXTIME(A.begin_time) as begin_time, FROM_UNIXTIME(A.end_time) as end_time, 
                         A.data_dims, A.data_val, A.stat_code, A.group1,
                           ifnull((select SUM(oldAssist.FQty) 
                                     from Trans_main_table as oldMain 
                                left join Trans_assist_table as oldAssist 
                                       on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                                    where oldMain.FCancellation = 1 
                                      and oldMain.FCorrent = 1
                                      and oldMain.FSaleStyle in (0,1)
                                      and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL') 
                                      and UNIX_TIMESTAMP(oldMain.FDate) > 1546272000 
                                      and UNIX_TIMESTAMP(oldMain.FDate) < A.end_time 
                                      and oldMain.FSupplyID = A.data_val),0) as m1
                      from (select base.time_dims, base.time_val, base.time_val2,base.begin_time, base.end_time,base.data_dims, main.FSupplyID as data_val, 
                                     base.stat_code,  base.group1
                                from Trans_main_table as main,
                                     (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'green-coin' as group1
                                     ) as base
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                                and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                                and main.FCancellation = 1 
                                and main.FTranType = 'PUR' 
                           GROUP BY main.FSupplyID
                           ) as A
                 ) as det;
								 
								 
	set errno=1041;
	
	-- RDF值(只算低值的。一吨4.2)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1, main.val1,
               (case when main.val3 = 0 then 0 else (round((main.val1 - main.val3)/val3,3)) end) as val2
          from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1, (round((A.val1/1000)*4.2,3)) as val1, 
                         ifnull((select val1 
                                   from lh_dw.data_statistics_results
                                   where time_val = base.time_val2
                                   and time_dims = base.time_dims
                                   and group1 = base.group1
                                   and data_val = A.data_val),0) as val3    
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'rdf-value' as group1
                         ) as base,
                         lh_dw.data_statistics_results as A
                    where A.time_val = base.time_val
                    and A.time_dims = base.time_dims
                    and A.group1 = 'weight-by-waste-structure'
                    and A.group2 = 'low-value-waste'
               ) as main;
							 
	set errno=1042;
	
	-- 碳减排--低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1, main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1, base.group2, (round((ifnull(A.val1,0)/1000)*0,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'low-value-waste' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                   where A.time_val = base.time_val
                     and A.time_dims = base.time_dims
                     and A.group1 = 'weight-by-waste-structure'
                     and A.group2 = 'low-value-waste'
                 ) as main;
	
	set errno=1043;
	
	-- 碳减排--玻璃
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1,base.group2, (round((ifnull(A.val1,0)/1000)*0,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'glass' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                   where A.time_val = base.time_val
                     and A.time_dims = base.time_dims
                     and A.group1 = 'weight-by-waste-class'
                     and A.group2 = 'glass'
                 ) as main;
								 
	set errno=1044;	
	
	-- 碳减排--金属
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1, base.group2,(round((ifnull(A.val1,0)/1000)*4.77,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'metal' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                    where A.time_val = base.time_val
                    and A.time_dims = base.time_dims
                    and A.group1 = 'weight-by-waste-class'
                    and A.group2 = 'metal'
                 ) as main;
								 
	set errno=1045;
	
	-- 碳减排--塑料
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1,base.group2, (round((ifnull(A.val1,0)/1000)*2.37,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'plastic' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                    where A.time_val = base.time_val
                    and A.time_dims = base.time_dims
                    and A.group1 = 'weight-by-waste-class'
                    and A.group2 = 'plastic'
                 ) as main;
								 
	set errno=1046;	
	
	-- 碳减排--纸类
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1,base.group2, (round((ifnull(A.val1,0)/1000)*2.51,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'waste-paper' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                   where A.time_val = base.time_val
                     and A.time_dims = base.time_dims
                     and A.group1 = 'weight-by-waste-class'
                     and A.group2 = 'waste-paper'
                 ) as main;
					
	set errno=1047;
	
	-- 碳减排--总量
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, main.FSupplyID as data_val, base.stat_code,  base.group1, 0 as val1, 0 as val2
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'certified-emission-reduction' as group1
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
          GROUP BY main.FSupplyID;
				
	set errno=1048;	
	
	-- 处置费（低值废弃物的费用）
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1) 
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1,  
                         ifnull((select sum(assist.FAmount) 
                                   from Trans_main_table as mainOld
                              left join Trans_assist_table as assist
                                     on mainOld.FInterID = assist.FinterID and mainOld.FTranType = assist.FTranType
                                  where UNIX_TIMESTAMP(mainOld.FDate) > base.begin_time
                                    and UNIX_TIMESTAMP(mainOld.FDate) < base.end_time
                                    and assist.value_type = 'unvaluable'
                                    and mainOld.FCancellation = 1 
                                    and mainOld.FCorrent = 1
                                    and mainOld.FSaleStyle in (0,1)
                                    and (mainOld.FTranType = 'SOR' or mainOld.FTranType = 'SEL')
                                    and mainOld.FSupplyID = main.FSupplyID),0) as val1    
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                 'M' as time_dims, 
                                 '客户' as data_dims,
                                 'customer-monthly-report' as stat_code,
                                 'lw-disposal-cost' as group1
                         ) as base,
                         Trans_main_table as main
                   where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                     and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                     and main.FCancellation = 1 
                     and main.FTranType = 'PUR' 
                    GROUP BY main.FSupplyID 
                 ) as main;
								 
	set errno=1049;	
	
	-- 服务消费成本--清运人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
     select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
            B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val1) as val1
       from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                    base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                    sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                    sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                    sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                    sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'service-cost' as group1,
                            'disposal-cost' as group2
                    ) as base,
                    Trans_main_table as A
              where A.FCancellation = 1
                and A.FCorrent = 1
                and A.FSaleStyle <> '2'
           group by A.FBillNo
             having UNIX_TIMESTAMP(maxDate) > base.begin_time
                and UNIX_TIMESTAMP(maxDate) < base.end_time
            ) as B   
   group by B.data_val;
	 
	 set errno=1050;
	 
	 -- 服务消费成本--清运人工费用--增长量
	 update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'disposal-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val;
		
	set errno=1051;	
	
	-- 服务消费成本--清运运输费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
     select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
            B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val2) as val1
       from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                    base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                    sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                    sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                    sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                    sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'service-cost' as group1,
                            'transport-cost' as group2
                    ) as base,
                    Trans_main_table as A
              where A.FCancellation = 1
                and A.FCorrent = 1
                and A.FSaleStyle <> '2'
           group by A.FBillNo
             having UNIX_TIMESTAMP(maxDate) > base.begin_time
                and UNIX_TIMESTAMP(maxDate) < base.end_time
            ) as B   
   group by B.data_val;
	 
	set errno=1052;
	
	-- 服务消费成本--清运运输费用--增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'transport-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val;
		
	set errno=1053;
	
	-- 服务消费成本--辅材消耗费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
     select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
            B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val3) as val1
       from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                    base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                    sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                    sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                    sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                    sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'service-cost' as group1,
                            'consumables-cost' as group2
                    ) as base,
                    Trans_main_table as A
              where A.FCancellation = 1
                and A.FCorrent = 1
                and A.FSaleStyle <> '2'
           group by A.FBillNo
             having UNIX_TIMESTAMP(maxDate) > base.begin_time
                and UNIX_TIMESTAMP(maxDate) < base.end_time
            ) as B   
   group by B.data_val;
	 
	set errno=1054;
	
	-- 服务消费成本--辅材消耗费用--增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'consumables-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val;
		
	set errno=1055;
	
	-- 服务消费成本--分拣人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
           B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val4) as val1
      from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                   base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                   sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                   sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                   sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                   sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'service-cost' as group1,
                           'sorting-cost' as group2
                   ) as base,
                   Trans_main_table as A
             where A.FCancellation = 1
               and A.FCorrent = 1
               and A.FSaleStyle <> '2'
          group by A.FBillNo
            having UNIX_TIMESTAMP(maxDate) > base.begin_time
               and UNIX_TIMESTAMP(maxDate) < base.end_time
           ) as B   
  group by B.data_val;
	
	set errno=1056;
	
	-- 服务消费成本--分拣人工费用--增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'sorting-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val;

	set errno=1057;
	
	commit;
	
	if  errno = 1057 then
			set o_rv = 200;
			set o_err = "月报表数据生成成功.";
  end if;
  
  end main_proc;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_month_report_by_cust
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_month_report_by_cust`;
delimiter ;;
CREATE PROCEDURE `lh_dw_month_report_by_cust`(IN `p_day` varchar(50),
IN `p_cust_id` integer,
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_new_day       varchar(50);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "月报表数据生成失败.";
    end;
		
		
main_proc:begin
  
	
  select DATE_FORMAT(DATE_ADD(p_day, INTERVAL 1 MONTH),'%Y-%m-%d') into v_new_day;
	
	if v_new_day is  null then
				set o_rv = 400;
				set o_err = "获取月份失败.";
				set o_err = "获取月份失败.";
				leave main_proc;
  end if;
	
	start transaction;
	set errno=1000;
	-- 月总收益
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
select base.time_dims, base.time_val, 
       FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
       base.data_dims, main.FSupplyID as data_val, 
       base.stat_code,  base.group1, null as group2, null as txt1,
       sum(main.TalFAmount) as val1
  from Trans_main_table as main,
       (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
               UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
               DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
               'M' as time_dims, 
               '客户' as data_dims,
               'customer-monthly-report' as stat_code,
               'revenue' as group1
       ) as base
 where UNIX_TIMESTAMP(main.FDate) > base.begin_time
   and UNIX_TIMESTAMP(main.FDate) < base.end_time 
   and main.FCancellation = 1 
   and main.FTranType = 'PUR'
	 and main.FSupplyID = p_cust_id 
GROUP BY main.FSupplyID;

set errno=1001;

	-- 月总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
  select base.time_dims, base.time_val, 
         FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
         base.data_dims, main.FSupplyID as data_val, 
         base.stat_code,  base.group1, null as group2, null as txt1,
         sum(main.TalFQty) as val1
    from Trans_main_table as main,
         (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                 'M' as time_dims, 
                 '客户' as data_dims,
                 'customer-monthly-report' as stat_code,
                 'weight' as group1
         ) as base
   where UNIX_TIMESTAMP(main.FDate) > base.begin_time
     and UNIX_TIMESTAMP(main.FDate) < base.end_time 
     and main.FCancellation = 1 
     and main.FTranType = 'PUR' 
		 and main.FSupplyID = p_cust_id
 GROUP BY main.FSupplyID;
 
 set errno=1002;
 
 -- 统计总收益
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3) 
          select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
               det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((m1 - m2)/m2,4) end) * 100) as val3
          from (select A.time_dims, A.time_val,FROM_UNIXTIME(A.begin_time) as begin_time, FROM_UNIXTIME(A.end_time) as end_time, A.data_dims, A.data_val, A.stat_code, A.group1,
                         ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < A.end_time and FSupplyID = A.data_val),0) as m1, 
                         ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < (A.begin_time - 1) and FSupplyID = A.data_val),0) as m2 
                    from (select base.time_dims, base.time_val, base.time_val2,base.begin_time, base.end_time,base.data_dims, main.FSupplyID as data_val, 
                                   base.stat_code,  base.group1
                              from Trans_main_table as main,
                                   (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                        UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                        'M' as time_dims, 
                                        '客户' as data_dims,
                                        'customer-monthly-report' as stat_code,
                                        'cumulative-revenue' as group1
                                   ) as base
                         where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                              and main.FCancellation = 1 
                              and main.FTranType = 'PUR' 
															and main.FSupplyID = p_cust_id
                         GROUP BY main.FSupplyID
                         ) as A
               ) as det;
							 
	set errno=1003;
							 
  -- 统计总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3) 
          select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
                 det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((m1 - m2)/m2,4) end) * 100) as val3
            from (select A.time_dims, A.time_val,FROM_UNIXTIME(A.begin_time) as begin_time, FROM_UNIXTIME(A.end_time) as end_time, A.data_dims, A.data_val, A.stat_code, A.group1,
                         ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < A.end_time and FSupplyID = A.data_val),0) as m1, 
                         ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                                   and UNIX_TIMESTAMP(FDate) < (A.begin_time - 1) and FSupplyID = A.data_val),0) as m2 
                    from (select base.time_dims, base.time_val, base.time_val2,base.begin_time, base.end_time,base.data_dims, main.FSupplyID as data_val, 
                                   base.stat_code,  base.group1
                              from Trans_main_table as main,
                                   (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                        UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                        'M' as time_dims, 
                                        '客户' as data_dims,
                                        'customer-monthly-report' as stat_code,
                                        'cumulative-weight' as group1
                                   ) as base
                         where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                              and main.FCancellation = 1 
                              and main.FTranType = 'PUR' 
															and main.FSupplyID = p_cust_id
                         GROUP BY main.FSupplyID
                         ) as A
                 ) as det;
								 
	set errno=1004; 
								 
	
	-- 处置量-按废弃物结构-有价废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, 
                 base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1, base.group2,
                    ifnull((select SUM(oldAssist.FQty) 
                              from Trans_main_table as oldMain
                         left join Trans_assist_table as oldAssist
                              on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                         where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
                              and oldMain.FCancellation = 1 
                              and oldMain.FCorrent = 1
                              and oldMain.FSaleStyle in (0,1) 
                              and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                              and oldAssist.value_type = 'valuable'
                              and oldMain.FSupplyID = main.FSupplyID),0) as val1
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-structure' as group1,
                         'recyclable-waste' as group2
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
						 and main.FSupplyID = p_cust_id
          GROUP BY main.FSupplyID;
					
	set errno=1005; 
					
	-- 处置量-按废弃物结构-低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, 
                 base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1, base.group2,
                    ifnull((select SUM(oldAssist.FQty) 
                              from Trans_main_table as oldMain
                         left join Trans_assist_table as oldAssist
                              on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                         where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
                              and oldMain.FCancellation = 1 
                              and oldMain.FCorrent = 1
                              and oldMain.FSaleStyle in (0,1) 
                              and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                              and oldAssist.value_type = 'unvaluable'
                              and oldMain.FSupplyID = main.FSupplyID),0) as val1
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-structure' as group1,
                         'low-value-waste' as group2
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
						 and main.FSupplyID = p_cust_id
          GROUP BY main.FSupplyID;
					
	set errno=1006; 				
					
	-- 处置量-按废弃物结构-危险废弃物
	
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, 
                 base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1, base.group2,
                    ifnull((select SUM(oldAssist.FQty) 
                              from Trans_main_table as oldMain
                         left join Trans_assist_table as oldAssist
                              on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                         where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
                              and oldMain.FCancellation = 1 
                              and oldMain.FCorrent = 1
                              and oldMain.FSaleStyle in (0,1) 
                              and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                              and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                              and oldAssist.value_type = 'dangerous'
                              and oldMain.FSupplyID = main.FSupplyID),0) as val1
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-structure' as group1,
                         'hazardous-waste' as group2
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
						 and main.FSupplyID = p_cust_id
          GROUP BY main.FSupplyID;
					
	set errno=1007;
	
/*
	-- 处置量-按废弃物结构-有价废弃物-增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select res.data_val, 
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2,
                          sum(if(res.time_val = base.time_val,res.val1,0)) as m1, 
                          sum(if(res.time_val = base.time_val2,res.val1,0)) as m2         
                     from lh_dw.data_statistics_results as res,
                                          (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                                  'M' as time_dims, 
                                                  '客户' as data_dims,
                                                  'customer-monthly-report' as stat_code,
                                                  'weight-by-waste-structure' as group1,
                                                  'recyclable-waste' as group2
                                          ) as base
                    where (res.time_val = base.time_val or res.time_val = base.time_val2) 
                      and res.stat_code = base.stat_code
                      and res.group2 = base.group2
                      and res.data_dims = base.data_dims
											and res.data_val = p_cust_id
                 group by res.data_val,
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2) as cal
    set main.val2 = if(cal.m2=0, 0, cal.m1-cal.m2)      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val
		and main.data_val = p_cust_id;
		
	set errno=1008;
	

	
	-- 处置量-按废弃物结构-低值废弃物-增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select res.data_val, 
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2,
                          sum(if(res.time_val = base.time_val,res.val1,0)) as m1, 
                          sum(if(res.time_val = base.time_val2,res.val1,0)) as m2         
                     from lh_dw.data_statistics_results as res,
                                          (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                                  'M' as time_dims, 
                                                  '客户' as data_dims,
                                                  'customer-monthly-report' as stat_code,
                                                  'weight-by-waste-structure' as group1,
                                                  'low-value-waste' as group2
                                          ) as base
                    where (res.time_val = base.time_val or res.time_val = base.time_val2) 
                      and res.stat_code = base.stat_code
                      and res.group2 = base.group2
                      and res.data_dims = base.data_dims
											and res.data_val = p_cust_id
                 group by res.data_val,
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2) as cal
    set main.val2 = if(cal.m2=0, 0, cal.m1-cal.m2)      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val
		and main.data_val = p_cust_id;
		
	set errno=1009;
		
	-- 处置量-按废弃物结构-危险废弃物-增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select res.data_val, 
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2,
                          sum(if(res.time_val = base.time_val,res.val1,0)) as m1, 
                          sum(if(res.time_val = base.time_val2,res.val1,0)) as m2         
                     from lh_dw.data_statistics_results as res,
                                          (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                                  'M' as time_dims, 
                                                  '客户' as data_dims,
                                                  'customer-monthly-report' as stat_code,
                                                  'weight-by-waste-structure' as group1,
                                                  'hazardous-waste' as group2
                                          ) as base
                    where (res.time_val = base.time_val or res.time_val = base.time_val2) 
                      and res.stat_code = base.stat_code
                      and res.group2 = base.group2
                      and res.data_dims = base.data_dims
											and res.data_val  = p_cust_id
                 group by res.data_val,
                          base.data_dims,
                          base.time_val,
                          base.time_dims,
                          base.stat_code,
                          base.group1,
                          base.group2) as cal
    set main.val2 = if(cal.m2=0, 0, cal.m1-cal.m2)      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val
		and main.data_val = p_cust_id;
		
	set errno=1010;
	
	-- 处置量-按废弃物结构-废弃物占比(百分比)	
	update 
     lh_dw.data_statistics_results as main,
                        (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,B.time_val,B.time_dims,B.group1
                        from lh_dw.data_statistics_results as A
                   left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                                from lh_dw.data_statistics_results as C,
                                     (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                     'M' as time_dims, 
                                     'weight-by-waste-structure' as group1
                                     ) as base 
                               where C.time_dims = base.time_dims 
                                 and C.time_val = base.time_val 
                                 and C.group1 = base.group1 
                            group by C.data_val
                             ) as B
                          on A.data_val = B.data_val
                       where A.time_dims = B.time_dims 
                         and A.time_val = B.time_val 
                         and A.group1 = B.group1
												 and A.data_val = p_cust_id
                         order by  A.data_val
                        ) as detail
    set main.val3 = detail.rate * 100
  where main.time_dims = detail.time_dims
    and main.time_val = detail.time_val
    and main.group1 = detail.group1
    and main.id = detail.id
		and main.data_val = p_cust_id;
		
	set errno=1011;	
	
	*/
	
	-- 首次清运日期
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select main.time_dims, main.time_val,FROM_UNIXTIME(main.begin_time) as begin_time, FROM_UNIXTIME(main.end_time) as end_time,
           main.data_dims,main.data_val,main.stat_code,main.group1, main.group2, left((MIN(det.FDate)),10) as txt1, main.val1  
      from (select base.time_dims, base.time_val,base.begin_time, base.end_time,
                   base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, null as group2,  null as val1  
              from Trans_main_table as A,
                   (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'first-service-time' as group1
                   ) as base
             where A.FCancellation = 1 
               and UNIX_TIMESTAMP(A.FDate) > base.begin_time
               and UNIX_TIMESTAMP(A.FDate) < base.end_time
               and A.FTranType = 'PUR' 
							 and A.FSupplyID = p_cust_id
             group by A.FSupplyID
           ) as main
 left join Trans_main_table as det
        on main.data_val = det.FSupplyID
       and UNIX_TIMESTAMP(det.FDate) < main.end_time
       and UNIX_TIMESTAMP(det.FDate) > 1546272000
       and det.FCancellation = 1
       and det.FTranType = 'PUR'
			 and det.FSupplyID = p_cust_id 
       group by det.FSupplyID;
			 
	set errno=1012;	
	
  -- 月清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, null as group2, null as txt1, count(distinct A.FBillNo) as val1,
           (select ifnull(SUM(Y.train_number),0) as num from Trans_main_table as X left join uct_waste_purchase as Y on X.FBillNo = Y.order_id 
                     where X.FCancellation = 1  and X.FTranType = 'PUR' and UNIX_TIMESTAMP(X.FDate) > base.begin_time 
                    and UNIX_TIMESTAMP(X.FDate) < base.end_time  and X.FSupplyID = A.FSupplyID) as val2  
      from Trans_main_table as A,
           (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-times' as group1
           ) as base
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR'
			 and A.FSupplyID = p_cust_id 
  group by A.FSupplyID;
	
	set errno=1013;
	
	-- 累计清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
     select main.time_dims, main.time_val,FROM_UNIXTIME(main.begin_time) as begin_time, FROM_UNIXTIME(main.end_time) as end_time,
            main.data_dims,main.data_val,main.stat_code,main.group1, main.group2, main.txt1, 
            ifnull((select count(distinct det.FBillNo)
                      from Trans_main_table as det
                     where UNIX_TIMESTAMP(det.FDate) < main.end_time
                       and UNIX_TIMESTAMP(det.FDate) > 1546272000
                       and det.FCancellation = 1 
                       and det.FTranType = 'PUR' 
                       and det.FSupplyID = main.data_val
                    ),0) as val1 
       from (select base.time_dims, base.time_val,base.begin_time, base.end_time,
                    base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, null as group2,  null as txt1  
               from Trans_main_table as A,
                    (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'cumulative-service-times' as group1
                    ) as base
              where A.FCancellation = 1 
                and UNIX_TIMESTAMP(A.FDate) > base.begin_time
                and UNIX_TIMESTAMP(A.FDate) < base.end_time
                and A.FTranType = 'PUR' 
								and A.FSupplyID = p_cust_id
            group by A.FSupplyID
            ) as main;
						
	set errno=1014;		
	
	-- 累计清运次数--修改清运次数-占比
	update 
          lh_dw.data_statistics_results as main,
                         (select A.time_dims,A.time_val,A.group1,A.data_val,(case when A.m1 = 0 then 0 else round((A.val1 - A.m1)/A.m1,3) end) as val2, (A.val1 - A.m1) as val3
                            from (select main.val1, main.time_dims, main.data_val ,main.time_val,  base.time_val2, main.group1, 
                                         ifnull((select val1 
                                                   from lh_dw.data_statistics_results 
                                                   where time_dims = base.time_dims 
                                                   and time_val = base.time_val2
                                                   and group1 = base.group1
                                                   and data_val = main.data_val),0) as m1
                                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                              UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                              DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                              DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                              'M' as time_dims, 
                                              '客户' as data_dims,
                                              'customer-monthly-report' as stat_code,
                                              'cumulative-service-times' as group1
                                         ) as base,
                                         lh_dw.data_statistics_results as main
                                   where main.time_dims = base.time_dims 
                                     and main.time_val = base.time_val
                                     and main.group1 = base.group1) as A
                         ) as detail
     set main.val2 = detail.val2 * 100,
         main.val3 = detail.val3
   where main.time_val = detail.time_val
     and main.time_dims= detail.time_dims
     and main.group1 = detail.group1 
     and main.data_val = detail.data_val
		 and main.data_val = p_cust_id;
		 
	set errno=1015;	 
	
  -- 订单响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MIN(B.Tallot-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1016;
	
	-- 订单响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(AVG(B.Tallot-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1017;
	
	-- 订单响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MAX(B.Tallot-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1018;
	
	-- 订单响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round((AVG(B.Tallot-B.Tcreate)+((MAX(B.Tallot-B.Tcreate)+MIN(B.Tallot-B.Tcreate)+4*AVG(B.Tallot-B.Tcreate))/3))/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1019;
	
	-- 清运响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MIN(B.Tpurchase-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1020;
	
	-- 清运响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(AVG(B.Tpurchase-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1021;
	
	-- 清运响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round(MAX(B.Tpurchase-B.Tcreate)/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1022;
	
	-- 清运响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims,A.FSupplyID as data_val,base.stat_code,base.group1, base.group2, null as txt1, 
           round((AVG(B.Tpurchase-B.Tcreate)+((MAX(B.Tpurchase-B.Tcreate)+MIN(B.Tpurchase-B.Tcreate)+4*AVG(B.Tpurchase-B.Tcreate))/3))/3600,1) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           Trans_main_table as A
 left join Trans_log_table as B
        on A.FInterID = B.FInterID and A.FTranType = B.FTranType
     where A.FCancellation = 1 
       and UNIX_TIMESTAMP(A.FDate) > base.begin_time
       and UNIX_TIMESTAMP(A.FDate) < base.end_time
       and A.FTranType = 'PUR' 
       and B.TallotOver = 1
			 and A.FSupplyID = p_cust_id
  group by A.FSupplyID;
	
	set errno=1023;
	
	-- 品类排名
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1, val1, val2) 
    select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time,FROM_UNIXTIME(base.end_time) as end_time,base.data_dims,
           main.FSupplyID as data_val,base.stat_code,base.group1,cat.name,sum(det.FAmount) as money,sum(det.FQty) as weight
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue-by-waste-cate' as group1
           ) as base,
           Trans_main_table as main
 left join Trans_assist_table as det
        on main.FInterID = det.FinterID and main.FTranType = det.FTranType
 left join uct_waste_cate as cat
        on det.FItemID = cat.id
     where UNIX_TIMESTAMP(main.FDate) > base.begin_time
       and UNIX_TIMESTAMP(main.FDate) < base.end_time 
       and main.FCancellation = 1 
       and main.FTranType = 'PUR' 
       and det.value_type = 'valuable'
			 and main.FSupplyID = p_cust_id
     GROUP BY main.FSupplyID,det.FItemID;
		 
	set errno=1024;	
	
  -- 品类排名-更新金额排名
	UPDATE lh_dw.data_statistics_results as a
            INNER JOIN (SELECT main.id, main.data_val, main.val1, CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                               @curGroup:= main.data_val,@preAge:= main.val1
                          FROM (select @curGroup :=0,
                                       @preAge :=0,
                                       @row :=0,
                                       'revenue-by-waste-cate' as group1,
                                       DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                       '客户' as data_dims
                               ) as base,
                               lh_dw.data_statistics_results as main
                         WHERE main.group1 = base.group1
                           AND main.time_val = base.time_val
                           AND main.data_dims = base.data_dims
													 and main.data_val  = p_cust_id
                      ORDER BY main.data_val ASC, main.val1 DESC
                       ) b 
               ON a.id=b.id
        SET a.val3=b.urank;
				
	set errno=1025;	
	
	-- 品类排名-更新重量排名
	UPDATE lh_dw.data_statistics_results as a
          INNER JOIN (SELECT main.id, main.data_val, main.val2, 
                              CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                              @curGroup:= main.data_val,@preAge:= main.val2
                         FROM (select @curGroup :=0,
                                        @preAge :=0,
                                        @row :=0,
                                        'revenue-by-waste-cate' as group1,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        '客户' as data_dims
                              ) as base,
                              lh_dw.data_statistics_results as main
                    WHERE main.group1 = base.group1
                         AND main.time_val = base.time_val
                         AND main.data_dims = base.data_dims
												 and main.data_val  = p_cust_id
                    ORDER BY main.data_val ASC, main.val2 DESC
                    ) b 
               ON a.id=b.id
        SET a.val4=b.urank;
				
	set errno=1026;	
	
	-- 采购重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2, val3) 
     select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
            base.data_dims,main.FSupplyID as data_val, base.stat_code, base.group1, 
            SUM(if(assist.value_type in ('valuable','unvaluable'),assist.FQty,0)) as val1,
            SUM(if(assist.value_type = 'valuable',assist.FQty,0)) as val2,
            SUM(if(assist.value_type = 'unvaluable',assist.FQty,0)) as val3
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'purchase-weight' as group1
            ) as base,
            Trans_main_table as main
     left join Trans_assist_table as assist
         on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
      where UNIX_TIMESTAMP(main.FDate) > base.begin_time
        and UNIX_TIMESTAMP(main.FDate) < base.end_time 
        and main.FTranType = 'PUR'
        and main.FCancellation = 1 
				and main.FSupplyID = p_cust_id
      group by main.FSupplyID;
			
	set errno=1027;	
	
	-- 入库分析
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3, val4, val5) 
     select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
               base.data_dims,main.FSupplyID as data_val, base.stat_code, base.group1,   
               SUM(assist.FAmount) as val1,
               SUM(if(assist.FTranType = 'SOR' and assist.disposal_way = 'sorting',assist.FAmount,0)) as val2,
               SUM(if(((assist.FTranType = 'SOR' and assist.disposal_way = 'weighing') or (assist.FTranType = 'SEL')),assist.FAmount,0)) as val3,
               SUM(if(assist.FTranType = 'SOR' and assist.disposal_way = 'sorting',assist.FQty,0)) as val4,
               SUM(if(((assist.FTranType = 'SOR' and assist.disposal_way = 'weighing') or (assist.FTranType = 'SEL')),assist.FQty,0)) as val5
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'inventory-analysis' as group1
               ) as base,
               Trans_main_table as main
   left join Trans_assist_table as assist
          on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
       where UNIX_TIMESTAMP(main.FDate) > base.begin_time
         and UNIX_TIMESTAMP(main.FDate) < base.end_time 
         and main.FCancellation = 1
         and main.FCorrent = 1  
				 and main.FSupplyID = p_cust_id
     group by main.FSupplyID;
		 
	set errno=1028;	
	
  -- 雷达图--分拣成本
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2, val3) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                 ((select output_value from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' and start_value <= A.val2 and end_value > A.val2) + 
                  (select output_value from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' and start_value <= A.val3 and end_value > A.val3)
                 ) as val1,A.val2,A.val3
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         ifnull(round((select IFNULL(val4,0)  from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'inventory-analysis' and data_val = main.data_val)/
                                      (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' and data_val = main.data_val),3),0) as val2,
                         ifnull(round((select IFNULL(val2,0) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'inventory-analysis' and data_val = main.data_val)/
                                      (select val4 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'inventory-analysis' and data_val = main.data_val),3),0) as val3
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                 'M' as time_dims, 
                                 '客户' as data_dims,
                                 'customer-monthly-report' as stat_code,
                                 'customer-index' as group1,
                                 'sorting-cost' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                   where main.time_val = base.time_val
                     and main.stat_code = 'customer-monthly-report'
                     and main.group1 = 'weight'
										 and main.data_val = p_cust_id
										 ) as A;
										 
	set errno=1029;	
	
	-- 雷达图--互信指数
insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2, val3) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                 ((select output_value from lh_dw.data_statistics_value_interval where vice_code = 'first_order_time' and start_value <= A.val2 and end_value > A.val2) + 
                  (select output_value from lh_dw.data_statistics_value_interval where vice_code = 'month_output' and start_value <= A.val3 and end_value > A.val3)
                 ) as val1,A.val2,A.val3
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         round((UNIX_TIMESTAMP(v_new_day) - (select UNIX_TIMESTAMP(txt1) as first from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'first-service-time' and data_val = main.data_val))/86400,3) as val2,
                         (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' and data_val = main.data_val) as val3
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                 'M' as time_dims, 
                                 '客户' as data_dims,
                                 'customer-monthly-report' as stat_code,
                                 'customer-index' as group1,
                                 'trust-index' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                   where main.time_val = base.time_val
                     and main.stat_code = 'customer-monthly-report'
                     and main.group1 = 'weight'
										 and main.data_val = p_cust_id) as A;
										 
	set errno=1030;
	-- 雷达图--服务时效
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2)
     select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
            (select output_value from lh_dw.data_statistics_value_interval where main_code = 'service-effect' and start_value <= A.val2 and end_value > A.val2) as val1,
            A.val2
       from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                    base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                    round((select  ifnull((SUM(G.sign_out_time-G.sign_in_time)/count(E.FCancellation)),0) as num from Trans_main_table as E left join uct_waste_purchase as F on E.FBillNo = F.order_id 
                                   left join uct_purchase_sign_in_out as G on F.id = G.purchase_id where E.FCancellation = 1 and UNIX_TIMESTAMP(E.FDate) > base.begin_time 
                                   and UNIX_TIMESTAMP(E.FDate) < base.end_time and E.FTranType = 'PUR' and G.sign_in_time > 0 and G.sign_out_time > 0 and E.FSupplyID = main.data_val
                    ),2) as val2
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'customer-index' as group1,
                            'service-effect' as group2
                    ) as base,
                    lh_dw.data_statistics_results as main
              where main.time_val = base.time_val
                and main.stat_code = 'customer-monthly-report'
                and main.group1 = 'weight'
								and main.data_val = p_cust_id
								) as A;
								
	set errno=1031;		
	
	-- 雷达图--满载率
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2)
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                 (select output_value from lh_dw.data_statistics_value_interval where main_code = 'load-factor' and start_value <= A.val2 and end_value > A.val2) as val1,
                 A.val2
            from (select det.time_dims,det.time_val,det.begin_time, det.end_time,det.data_dims, det.data_val, det.stat_code, det.group1, 
                         det.group2, det.txt1 as txt1,(case when det.m2 = 0 then 0 else round((m1/m2),2) end) as val2
                    from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                                 base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                                 ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                                   and data_val = main.data_val),0) as m1,
                                 ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'service-times' 
                                   and data_val = main.data_val),0) as m2
                            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                         'M' as time_dims, 
                                         '客户' as data_dims,
                                         'customer-monthly-report' as stat_code,
                                         'customer-index' as group1,
                                         'load-factor' as group2
                                 ) as base,
                                 lh_dw.data_statistics_results as main
                           where main.time_val = base.time_val
                             and main.stat_code = 'customer-monthly-report'
                             and main.group1 = 'weight'
														 and main.data_val = p_cust_id
                         ) as det
                 ) as A;
							 
	set errno=1032;	
	
	-- 雷达图--废弃物结构
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2, val3) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                    ((select output_value from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' and start_value <= A.val2 and end_value > A.val2) + 
                    (select output_value from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' and start_value <= A.val3 and end_value > A.val3)
                    ) as val1,A.val2,A.val3
               from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         ifnull(round((select IFNULL(val3,0)  from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' and data_val = main.data_val)/
                                        (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' and data_val = main.data_val),3),0) as val2,
                         ifnull(round((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' and data_val = main.data_val)/
                                        (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' and data_val = main.data_val),3),0) as val3
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'customer-index' as group1,
                                   'waste-structure' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                    where main.time_val = base.time_val
                         and main.stat_code = 'customer-monthly-report'
                         and main.group1 = 'weight'
												 and main.data_val = p_cust_id) as A;
	set errno=1033;	
	
	-- 雷达图--同行比较
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1, val2) 
          select A.time_dims,A.time_val,A.begin_time, A.end_time,A.data_dims, A.data_val, A.stat_code, A.group1, A.group2, null as txt1, 
                    (select output_value from lh_dw.data_statistics_value_interval where main_code = 'industry-ranking' and start_value <= A.val2 and end_value >= A.val2)  as val1,A.val2
               from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                         ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' and data_val = main.data_val),0) as val2
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'customer-index' as group1,
                                   'industry-ranking' as group2
                         ) as base,
                         lh_dw.data_statistics_results as main
                    where main.time_val = base.time_val
                         and main.stat_code = 'customer-monthly-report'
                         and main.group1 = 'weight'
												 and main.data_val = p_cust_id) as A;
	set errno=1034;	
	
	-- 雷达图--获取总分数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, main.data_val, base.stat_code, base.group1, base.group2, null as txt1,
                 ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' and data_val = main.data_val),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'customer-index' as group1,
                         'the_overall_score' as group2
                 ) as base,
                 lh_dw.data_statistics_results as main
           where main.time_val = base.time_val
             and main.stat_code = 'customer-monthly-report'
             and main.group1 = 'weight'
						 and main.data_val = p_cust_id;
						 
	set errno=1035;	
	
	-- 玻、金、塑、纸--	玻璃的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1, 0 as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'glass' as group2
                 ) as base,
                 Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
						 and secondary.FSupplyID = p_cust_id
        GROUP BY secondary.FSupplyID;
				
	set errno=1036;
	
	-- 玻、金、塑、纸--	金属的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1,
                  ifnull((select SUM(assist.FQty) from Trans_main_table as main
                       left join Trans_assist_table as assist
                              on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
                       left join uct_waste_cate as cate
                              on assist.FItemID = cate.id
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                             and main.FCancellation = 1
                             and main.FCorrent = 1  
                             and ((main.FTranType = 'SOR') or (main.FTranType = 'SEL' and main.FSaleStyle = 1))
                             and cate.top_class = 'metal'
                             and main.FSupplyID = secondary.FSupplyID),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'metal' as group2
                  ) as base,
                    Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
						 and secondary.FSupplyID = p_cust_id
          GROUP BY secondary.FSupplyID;
					
	set errno=1037;
	
	-- 玻、金、塑、纸--	塑料的重量
	 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1,
                  ifnull((select SUM(assist.FQty) from Trans_main_table as main
                       left join Trans_assist_table as assist
                              on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
                       left join uct_waste_cate as cate
                              on assist.FItemID = cate.id
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                             and main.FCancellation = 1
                             and main.FCorrent = 1  
                             and ((main.FTranType = 'SOR') or (main.FTranType = 'SEL' and main.FSaleStyle = 1))
                             and cate.top_class = 'plastic'
                             and main.FSupplyID = secondary.FSupplyID),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'plastic' as group2
                 ) as base,
                 Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
						 and secondary.FSupplyID = p_cust_id
        GROUP BY secondary.FSupplyID;
				
	set errno=1038;
	-- 玻、金、塑、纸--	纸类的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
          select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, secondary.FSupplyID, base.stat_code, base.group1, base.group2, null as txt1,
                  ifnull((select SUM(assist.FQty) from Trans_main_table as main
                       left join Trans_assist_table as assist
                              on main.FInterID = assist.FinterID and main.FTranType = assist.FTranType
                       left join uct_waste_cate as cate
                              on assist.FItemID = cate.id
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                             and main.FCancellation = 1
                             and main.FCorrent = 1  
                             and ((main.FTranType = 'SOR') or (main.FTranType = 'SEL' and main.FSaleStyle = 1))
                             and cate.top_class = 'waste-paper'
                             and main.FSupplyID = secondary.FSupplyID),0) as val1
            from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'weight-by-waste-class' as group1,
                         'waste-paper' as group2
                 ) as base,
                 Trans_main_table as secondary
           where UNIX_TIMESTAMP(secondary.FDate) > base.begin_time
             and UNIX_TIMESTAMP(secondary.FDate) < base.end_time 
             and secondary.FCancellation = 1 
             and secondary.FTranType = 'PUR' 
						 and secondary.FSupplyID = p_cust_id
          GROUP BY secondary.FSupplyID;
					
	set errno=1039;				
	-- 玻、金、塑、纸--	重量占比
	update 
          lh_dw.data_statistics_results as main,
                              (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,B.time_val,B.time_dims,B.group1
                              from lh_dw.data_statistics_results as A
                         left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                                      from lh_dw.data_statistics_results as C,
                                           (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                                   'M' as time_dims, 
                                                   'weight-by-waste-class' as group1
                                           ) as base 
                                     where C.time_dims = base.time_dims 
                                       and C.time_val = base.time_val 
                                       and C.group1 = base.group1 
                                  group by C.data_val
                                   ) as B
                              on A.data_val = B.data_val
                         where A.time_dims = B.time_dims 
                              and A.time_val = B.time_val 
                              and A.group1 = B.group1
														  and A.data_val = p_cust_id	
                              order by  A.data_val
                              ) as detail
          set main.val2 = detail.rate * 100
        where main.time_dims = detail.time_dims
          and main.time_val = detail.time_val
          and main.group1 = detail.group1
          and main.id = detail.id
					and main.data_val = p_cust_id;
					
	set errno=1040;
	
	-- 绿币(只算有价的。一吨一个绿币)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1)  
          select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
                 round((det.m1/1000)*1,1) as val1
            from (select A.time_dims, A.time_val,FROM_UNIXTIME(A.begin_time) as begin_time, FROM_UNIXTIME(A.end_time) as end_time, 
                         A.data_dims, A.data_val, A.stat_code, A.group1,
                           ifnull((select SUM(oldAssist.FQty) 
                                     from Trans_main_table as oldMain 
                                left join Trans_assist_table as oldAssist 
                                       on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
                                    where oldMain.FCancellation = 1 
                                      and oldMain.FCorrent = 1
                                      and oldMain.FSaleStyle in (0,1)
                                      and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL') 
                                      and UNIX_TIMESTAMP(oldMain.FDate) > 1546272000 
                                      and UNIX_TIMESTAMP(oldMain.FDate) < A.end_time 
                                      and oldMain.FSupplyID = A.data_val),0) as m1
                      from (select base.time_dims, base.time_val, base.time_val2,base.begin_time, base.end_time,base.data_dims, main.FSupplyID as data_val, 
                                     base.stat_code,  base.group1
                                from Trans_main_table as main,
                                     (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'green-coin' as group1
                                     ) as base
                           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                                and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                                and main.FCancellation = 1 
                                and main.FTranType = 'PUR'
															  and main.FSupplyID = p_cust_id	
                           GROUP BY main.FSupplyID
                           ) as A
                 ) as det;
								 
								 
	set errno=1041;
	
	-- RDF值(只算低值的。一吨4.2)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1, main.val1,
               (case when main.val3 = 0 then 0 else (round((main.val1 - main.val3)/val3,3)) end) as val2
          from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1, (round((A.val1/1000)*4.2,3)) as val1, 
                         ifnull((select val1 
                                   from lh_dw.data_statistics_results
                                   where time_val = base.time_val2
                                   and time_dims = base.time_dims
                                   and group1 = base.group1
                                   and data_val = A.data_val),0) as val3    
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'rdf-value' as group1
                         ) as base,
                         lh_dw.data_statistics_results as A
                    where A.time_val = base.time_val
                    and A.time_dims = base.time_dims
                    and A.group1 = 'weight-by-waste-structure'
                    and A.group2 = 'low-value-waste'
										and A.data_val = p_cust_id
               ) as main;
							 
	set errno=1042;
	
	-- 碳减排--低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1, main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1, base.group2, (round((ifnull(A.val1,0)/1000)*0,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'low-value-waste' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                   where A.time_val = base.time_val
                     and A.time_dims = base.time_dims
                     and A.group1 = 'weight-by-waste-structure'
                     and A.group2 = 'low-value-waste'
										 and A.data_val = p_cust_id
                 ) as main;
	
	set errno=1043;
	
	-- 碳减排--玻璃
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1,base.group2, (round((ifnull(A.val1,0)/1000)*0,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'glass' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                   where A.time_val = base.time_val
                     and A.time_dims = base.time_dims
                     and A.group1 = 'weight-by-waste-class'
                     and A.group2 = 'glass'
										 and A.data_val = p_cust_id
                 ) as main;
								 
	set errno=1044;	
	
	-- 碳减排--金属
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1, base.group2,(round((ifnull(A.val1,0)/1000)*4.77,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'metal' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                    where A.time_val = base.time_val
                    and A.time_dims = base.time_dims
                    and A.group1 = 'weight-by-waste-class'
                    and A.group2 = 'metal'
										and A.data_val = p_cust_id
                 ) as main;
								 
	set errno=1045;
	
	-- 碳减排--塑料
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1,base.group2, (round((ifnull(A.val1,0)/1000)*2.37,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'plastic' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                    where A.time_val = base.time_val
                    and A.time_dims = base.time_dims
                    and A.group1 = 'weight-by-waste-class'
                    and A.group2 = 'plastic'
										and A.data_val = p_cust_id
                 ) as main;
								 
	set errno=1046;	
	
	-- 碳减排--纸类
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)  
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1,main.group2, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, A.data_val, base.stat_code, base.group1,base.group2, (round((ifnull(A.val1,0)/1000)*2.51,3)) as val1  
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'cers-by-waste-class' as group1,
                                   'waste-paper' as group2
                         ) as base,
                         lh_dw.data_statistics_results as A
                   where A.time_val = base.time_val
                     and A.time_dims = base.time_dims
                     and A.group1 = 'weight-by-waste-class'
                     and A.group2 = 'waste-paper'
										 and A.data_val = p_cust_id
                 ) as main;
					
	set errno=1047;
	
	-- 碳减排--总量
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2) 
          select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                 base.data_dims, main.FSupplyID as data_val, base.stat_code,  base.group1, 0 as val1, 0 as val2
            from Trans_main_table as main,
                 (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                         DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                         'M' as time_dims, 
                         '客户' as data_dims,
                         'customer-monthly-report' as stat_code,
                         'certified-emission-reduction' as group1
                 ) as base
           where UNIX_TIMESTAMP(main.FDate) > base.begin_time
             and UNIX_TIMESTAMP(main.FDate) < base.end_time 
             and main.FCancellation = 1 
             and main.FTranType = 'PUR' 
						 and main.FSupplyID = p_cust_id
          GROUP BY main.FSupplyID;
				
	set errno=1048;	
	
	-- 处置费（低值废弃物的费用）
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1) 
          select main.time_dims,main.time_val,main.begin_time, main.end_time,main.data_dims, main.data_val, main.stat_code, main.group1, main.val1
            from (select base.time_dims,base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                         base.data_dims, main.FSupplyID as data_val, base.stat_code, base.group1,  
                         ifnull((select sum(assist.FAmount) 
                                   from Trans_main_table as mainOld
                              left join Trans_assist_table as assist
                                     on mainOld.FInterID = assist.FinterID and mainOld.FTranType = assist.FTranType
                                  where UNIX_TIMESTAMP(mainOld.FDate) > base.begin_time
                                    and UNIX_TIMESTAMP(mainOld.FDate) < base.end_time
                                    and assist.value_type = 'unvaluable'
                                    and mainOld.FCancellation = 1 
                                    and mainOld.FCorrent = 1
                                    and mainOld.FSaleStyle in (0,1)
                                    and (mainOld.FTranType = 'SOR' or mainOld.FTranType = 'SEL')
                                    and mainOld.FSupplyID = main.FSupplyID),0) as val1    
                    from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                 UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                 DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                 'M' as time_dims, 
                                 '客户' as data_dims,
                                 'customer-monthly-report' as stat_code,
                                 'lw-disposal-cost' as group1
                         ) as base,
                         Trans_main_table as main
                   where UNIX_TIMESTAMP(main.FDate) > base.begin_time
                     and UNIX_TIMESTAMP(main.FDate) < base.end_time 
                     and main.FCancellation = 1 
                     and main.FTranType = 'PUR'
										 and main.FSupplyID = p_cust_id 
                    GROUP BY main.FSupplyID 
                 ) as main;
								 
	set errno=1049;	
	
	-- 服务消费成本--清运人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
     select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
            B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val1) as val1
       from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                    base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                    sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                    sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                    sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                    sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'service-cost' as group1,
                            'disposal-cost' as group2
                    ) as base,
                    Trans_main_table as A
              where A.FCancellation = 1
                and A.FCorrent = 1
                and A.FSaleStyle <> '2'
								and A.FSupplyID = p_cust_id
           group by A.FBillNo
             having UNIX_TIMESTAMP(maxDate) > base.begin_time
                and UNIX_TIMESTAMP(maxDate) < base.end_time
            ) as B   
   group by B.data_val;
	 
	 set errno=1050;
	 
	 -- 服务消费成本--清运人工费用--增长量
	 update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'disposal-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
															and res.data_val = p_cust_id
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val
		and main.data_val = p_cust_id;
		
	set errno=1051;	
	
	-- 服务消费成本--清运运输费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
     select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
            B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val2) as val1
       from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                    base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                    sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                    sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                    sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                    sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'service-cost' as group1,
                            'transport-cost' as group2
                    ) as base,
                    Trans_main_table as A
              where A.FCancellation = 1
                and A.FCorrent = 1
                and A.FSaleStyle <> '2'
								and A.FSupplyID = p_cust_id
           group by A.FBillNo
             having UNIX_TIMESTAMP(maxDate) > base.begin_time
                and UNIX_TIMESTAMP(maxDate) < base.end_time
            ) as B   
   group by B.data_val;
	 
	set errno=1052;
	
	-- 服务消费成本--清运运输费用--增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'transport-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
															and res.data_val = p_cust_id
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val
		and main.data_val = p_cust_id;
		
	set errno=1053;
	
	-- 服务消费成本--辅材消耗费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
     select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
            B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val3) as val1
       from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                    base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                    sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                    sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                    sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                    sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                            DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                            'M' as time_dims, 
                            '客户' as data_dims,
                            'customer-monthly-report' as stat_code,
                            'service-cost' as group1,
                            'consumables-cost' as group2
                    ) as base,
                    Trans_main_table as A
              where A.FCancellation = 1
                and A.FCorrent = 1
                and A.FSaleStyle <> '2'
								and A.FSupplyID = p_cust_id
           group by A.FBillNo
             having UNIX_TIMESTAMP(maxDate) > base.begin_time
                and UNIX_TIMESTAMP(maxDate) < base.end_time
            ) as B   
   group by B.data_val;
	 
	set errno=1054;
	
	-- 服务消费成本--辅材消耗费用--增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'consumables-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
															and res.data_val = p_cust_id
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val
		and main.data_val = p_cust_id;
		
	set errno=1055;
	
	-- 服务消费成本--分拣人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, txt1, val1) 
    select B.time_dims,B.time_val,FROM_UNIXTIME(B.begin_time) as begin_time, FROM_UNIXTIME(B.end_time) as end_time,
           B.data_dims,B.data_val,B.stat_code,B.group1,B.group2,null as txt1,SUM(B.val4) as val1
      from (select base.time_dims,base.data_dims,base.stat_code,base.group1,base.group2,base.time_val,
                   base.begin_time,base.end_time,A.FBillNo, A.FSupplyID as data_val,
                           MAX(CASE A.`FTranType` WHEN 'SOR' THEN A.`FDate`
                                                  WHEN 'SEL' THEN A.`FDate`
                                                  ELSE '1970-01-01 00:00:00'
                                                  END) AS maxDate,
                   sum(case A.FTranType when 'PUR' then A.TalThird else '0' end) as val1,
                   sum(case A.FTranType when 'PUR' then A.TalSecond else '0' end) as val2,
                   sum(case A.FTranType when 'SOR' then A.TalSecond else '0' end) as val3,
                   sum(case A.FTranType when 'SOR' then A.TalThird else '0' end) as val4
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'service-cost' as group1,
                           'sorting-cost' as group2
                   ) as base,
                   Trans_main_table as A
             where A.FCancellation = 1
               and A.FCorrent = 1
               and A.FSaleStyle <> '2'
							 and A.FSupplyID = p_cust_id
          group by A.FBillNo
            having UNIX_TIMESTAMP(maxDate) > base.begin_time
               and UNIX_TIMESTAMP(maxDate) < base.end_time
           ) as B   
  group by B.data_val;
	
	set errno=1056;
	
	-- 服务消费成本--分拣人工费用--增长量
	update 
     lh_dw.data_statistics_results as main,
                  (select A.data_val,A.data_dims,A.time_val,A.time_dims,A.stat_code,A.group1,A.group2,A.val1 as m1, (if(B.val1 > 0,B.val1,0)) as m2,
                          (if(B.val1 > 0,round((A.val1 - B.val1),3),0)) as val2
                     from (select res.data_val,base.data_dims,base.time_val,base.time_val2,
                                  base.time_dims,base.stat_code,base.group1,base.group2,res.val1         
                             from lh_dw.data_statistics_results as res,
                                  (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                          UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                          'M' as time_dims, 
                                          '客户' as data_dims,
                                          'customer-monthly-report' as stat_code,
                                          'service-cost' as group1,
                                          'sorting-cost' as group2
                                  ) as base
                            where res.time_val = base.time_val  
                              and res.stat_code = base.stat_code
                              and res.group2 = base.group2
                              and res.data_dims = base.data_dims
															and res.data_val = p_cust_id
                         group by res.data_val
                           ) as A
                left join lh_dw.data_statistics_results as B
                       on A.data_val = B.data_val
                      and B.time_val = A.time_val2
                      and B.stat_code= A.stat_code
                      and B.group2 = A.group2
                      and B.data_dims = A.data_dims 
                      and B.data_val = A.data_val
                      group by A.data_val
                 ) as cal
    set main.val2 = cal.val2      
  where main.time_val = cal.time_val
    and main.stat_code= cal.stat_code
    and main.group2 = cal.group2
    and main.data_dims = cal.data_dims 
    and main.data_val = cal.data_val
		and main.data_val = p_cust_id;

	set errno=1057;
	
	commit;
	
	if  errno = 1057 then
			set o_rv = 200;
			set o_err = "月报表数据生成成功.";
  end if;
  
  end main_proc;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_month_report_by_cust_mysql
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_month_report_by_cust_mysql`;
delimiter ;;
CREATE PROCEDURE `lh_dw_month_report_by_cust_mysql`(IN `p_day` varchar(50),
IN `p_cust_id` integer,
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_new_day       varchar(50);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "月报表数据生成失败.";
    end;
		
		
main_proc:begin
  
	
  select DATE_FORMAT(DATE_ADD(p_day, INTERVAL 1 MONTH),'%Y-%m-%d') into v_new_day;
	
	if v_new_day is  null then
				set o_rv = 400;
				set o_err = "获取月份失败.";
				leave main_proc;
  end if;
	
	
	start transaction;
	set errno=1000;
	-- 月总收益
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.val1, det.val2, ((case when det.val2 = 0 then 0 else round((det.val1 - det.val2)/det.val2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(sum(main.TalFAmount),0) as val1,
                   ifnull((select val1 from lh_dw.data_statistics_results  where time_dims = base.time_dims and data_dims = base.data_dims
                   and time_val = base.time_val2 and group1 = base.group1 and data_val = cus.id),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'revenue' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR'
                    ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
          GROUP BY cus.id 
           ) as det;

set errno=1001;

	-- 月总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.val1, det.val2, ((case when det.val2 = 0 then 0 else round((det.val1 - det.val2)/det.val2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(sum(main.TalFQty),0) as val1,
                   ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims  and data_dims = base.data_dims
                   and time_val = base.time_val2 and group1 = base.group1 and data_val = cus.id),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'weight' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR'
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
						   and cus.id = p_cust_id
          GROUP BY cus.id 
           ) as det;
 
 set errno=1002;
 
 -- 统计总收益
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-revenue' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
							 and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
							 
	set errno=1003;
							 
  -- 统计总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-weight' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
								 
	set errno=1004; 
								 
	
	-- 处置量-按废弃物结构-有价废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1, 
           ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims and time_val = base.time_val2  
                    and group1 = base.group1 and data_val = cus.id),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'recyclable-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
  GROUP BY cus.id 
	having cus.id = p_cust_id;
					
	set errno=1005; 
					
	-- 处置量-按废弃物结构-低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1, 
           ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims and time_val = base.time_val2  
                    and group1 = base.group1 and data_val = cus.id),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
  GROUP BY cus.id 
	having cus.id = p_cust_id;
					
	set errno=1006; 				
					
	-- 处置量-按废弃物结构-危险废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1, 
           ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims and time_val = base.time_val2  
                    and group1 = base.group1 and data_val = cus.id),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'hazardous-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'dangerous'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
  GROUP BY cus.id 
	having cus.id = p_cust_id;
					
	set errno=1007;
	
	
	-- 处置量-按废弃物结构-废弃物占比(百分比)	
	update lh_dw.data_statistics_results as main,
            (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                    B.time_val,B.time_dims,B.group1
               from lh_dw.data_statistics_results as A
          left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                       from lh_dw.data_statistics_results as C,
                            (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                    'M' as time_dims, 
                                    'weight-by-waste-structure' as group1
                            ) as base 
                      where C.time_dims = base.time_dims 
                        and C.time_val = base.time_val 
                        and C.group1 = base.group1 
                      group by C.data_val
                    ) as B
                 on A.data_val = B.data_val
              where A.time_dims = B.time_dims 
                and A.time_val = B.time_val 
                and A.group1 = B.group1 
              order by  A.data_val
            ) as detail
        set main.val3 = detail.rate * 100
      where main.time_dims = detail.time_dims
        and main.time_val = detail.time_val
        and main.group1 = detail.group1
        and main.id = detail.id;
		
	set errno=1011;	
	
	-- 首次清运日期
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(main.txt1,'2019-01-01') as txt1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'first-service-time' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select FSupplyID,left((MIN(FDate)),10) as txt1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > 1546272000
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
               group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
			 
	set errno=1012;	
	
  -- 月清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and 
                UNIX_TIMESTAMP(FDate) > base.begin_time and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as val1 
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-times' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
     GROUP BY cus.id
		 having cus.id = p_cust_id;
	
	set errno=1013;
	
	-- 累计清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,det.m2 as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-service-times' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
						
	set errno=1014;		
	
	
	
  -- 订单响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1016;
	
	-- 订单响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1017;
	
	-- 订单响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1018;
	
	-- 订单响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tallot-oldLog.Tcreate)+((MAX(oldLog.Tallot-oldLog.Tcreate)+
                                             MIN(oldLog.Tallot-oldLog.Tcreate)+4*AVG(oldLog.Tallot-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1019;
	
	-- 清运响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1020;
	
	-- 清运响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1021;
	
	-- 清运响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1022;
	
	-- 清运响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tpurchase-oldLog.Tcreate)+((MAX(oldLog.Tpurchase-oldLog.Tcreate)+
                                             MIN(oldLog.Tpurchase-oldLog.Tcreate)+4*AVG(oldLog.Tpurchase-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1023;
	
	-- 品类排名
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1, val1, val2)  
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  
           ifnull(main.name,'无品名') as txt1, ifnull(main.money,0) as val1, ifnull(main.weight,0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue-by-waste-cate' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, cate.name, sum(oldAssist.FAmount) as money, sum(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
         left join uct_waste_cate as cate
                on oldAssist.FItemID = cate.id
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID, cate.name
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id, main.name;
		 
	set errno=1024;	
	
  -- 品类排名-更新金额排名
	UPDATE lh_dw.data_statistics_results as a
            INNER JOIN (SELECT main.id, main.data_val, main.val1, CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                               @curGroup:= main.data_val,@preAge:= main.val1
                          FROM (select @curGroup :=0,
                                       @preAge :=0,
                                       @row :=0,
                                       'revenue-by-waste-cate' as group1,
                                       DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                       '客户' as data_dims
                               ) as base,
                               lh_dw.data_statistics_results as main
                         WHERE main.group1 = base.group1
                           AND main.time_val = base.time_val
                           AND main.data_dims = base.data_dims
                      ORDER BY main.data_val ASC, main.val1 DESC
                       ) b 
               ON a.id=b.id
        SET a.val3=b.urank;
				
	set errno=1025;	
	
	-- 品类排名-更新重量排名
	UPDATE lh_dw.data_statistics_results as a
          INNER JOIN (SELECT main.id, main.data_val, main.val2, 
                              CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                              @curGroup:= main.data_val,@preAge:= main.val2
                         FROM (select @curGroup :=0,
                                        @preAge :=0,
                                        @row :=0,
                                        'revenue-by-waste-cate' as group1,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        '客户' as data_dims
                              ) as base,
                              lh_dw.data_statistics_results as main
                    WHERE main.group1 = base.group1
                         AND main.time_val = base.time_val
                         AND main.data_dims = base.data_dims
                    ORDER BY main.data_val ASC, main.val2 DESC
                    ) b 
               ON a.id=b.id
        SET a.val4=b.urank;
				
	set errno=1026;	
	
	-- 采购重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2, val3) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'purchase-weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(if(oldAssist.value_type in ('valuable','unvaluable'),oldAssist.FQty,0)) as m1,
                   SUM(if(oldAssist.value_type = 'valuable',oldAssist.FQty,0)) as m2,
                   SUM(if(oldAssist.value_type = 'unvaluable',oldAssist.FQty,0)) as m3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FTranType = 'PUR'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
			
	set errno=1027;	
	
	-- 入库分析
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3, val4, val5)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3,
           ifnull(m4,0) as val4, ifnull(m5,0) as val5
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'inventory-analysis' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(oldAssist.FAmount) as m1,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FAmount,0)) as m2,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FAmount,0)) as m3,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FQty,0)) as m4,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FQty,0)) as m5
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
		 
	set errno=1028;	
	
  -- 雷达图--分拣成本
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,  
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                 and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                 and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull(round((select IFNULL(val4,0)  from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'inventory-analysis' and data_val = main.FSupplyID)/
                                (select val1 from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'weight' and data_val = main.FSupplyID),3),0) as val2,
                   ifnull(round((select IFNULL(val2,0) from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'inventory-analysis' and data_val = main.FSupplyID)/
                                (select val4 from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'inventory-analysis' and data_val = main.FSupplyID),3),0) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'sorting-cost' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                            ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
										 
	set errno=1029;	
	
	-- 雷达图--互信指数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'first_order_time' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'month_output' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3  
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((round((UNIX_TIMESTAMP(v_new_day) - 
                         (select UNIX_TIMESTAMP(txt1) as first from lh_dw.data_statistics_results where time_val = base.time_val 
                             and group1 = 'first-service-time' and data_val = main.FSupplyID))/86400,3)),0) as val2,
                   ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                             and data_val = main.FSupplyID),0) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'trust-index' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
										 
	set errno=1030;
	
	-- 雷达图--服务时效
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'service-effect' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   round((select  ifnull((SUM(G.sign_out_time-G.sign_in_time)/count(E.FCancellation)),0) as num 
                            from Trans_main_table as E left join uct_waste_purchase as F on E.FBillNo = F.order_id 
                       left join uct_purchase_sign_in_out as G on F.id = G.purchase_id where E.FCancellation = 1 and UNIX_TIMESTAMP(E.FDate) > base.begin_time 
                             and UNIX_TIMESTAMP(E.FDate) < base.end_time and E.FTranType = 'PUR' and G.sign_in_time > 0 and G.sign_out_time > 0 and E.FSupplyID = main.FSupplyID
                    ),2) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'service-effect' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
								
	set errno=1031;		
	
	-- 雷达图--满载率
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'load-factor' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select sec.time_dims, sec.time_val, sec.begin_time, sec.end_time, sec.data_dims, sec.data_val, sec.stat_code, sec.group1, sec.group2,
                   (case when sec.m2 = 0 then 0 else round((sec.m1/sec.m2),2) end) as val2
              from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                           ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                                          and data_val = main.FSupplyID),0) as m1,
                           ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'service-times' 
                                          and data_val = main.FSupplyID),0) as m2
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'customer-index' as group1,
                                   'load-factor' as group2
                           ) as base,
                           uct_waste_customer as cus 
                 left join (select * 
                              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                                   ) as base,
                                   Trans_main_table 
                             where UNIX_TIMESTAMP(FDate) > base.begin_time
                               and UNIX_TIMESTAMP(FDate) < base.end_time 
                             group by FSupplyID
                           ) as main
                        on cus.id = main.FSupplyID  
										 where cus.customer_type = 'up' 
										   and cus.id = p_cust_id
                     GROUP BY cus.id 
                   ) as sec
           ) as det;
							 
	set errno=1032;	
	
	-- 雷达图--废弃物结构
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3)    
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull(round((select IFNULL(val3,0)  from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'purchase-weight' and data_val = main.FSupplyID)/
                                (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                                    and data_val = main.FSupplyID),3),0) as val2,
                   ifnull(round((select IFNULL(val1,0) from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'purchase-weight' and data_val = main.FSupplyID)/
                                (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' 
                                    and data_val = main.FSupplyID),3),0) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'waste-structure' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
	set errno=1033;	
	
	-- 雷达图--同行比较
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'industry-ranking' 
               and start_value <= det.val2 and end_value >= det.val2) as val1, det.val2
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' 
                              and group2 in ('sorting-cost','trust-index','service-effect','load-factor','waste-structure') and data_val = main.FSupplyID),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'industry-ranking' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id 
           ) as det;
	set errno=1034;	
	
	-- 雷达图--获取总分数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' 
                    and group2 in ('sorting-cost','trust-index','service-effect','load-factor','waste-structure','industry-ranking') 
                    and data_val = main.FSupplyID),0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'customer-index' as group1,
                   'the_overall_score' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
						 
	set errno=1035;	
	
	-- 玻、金、塑、纸--	玻璃的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, 0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'weight-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id 
		 having cus.id = p_cust_id;
				
	set errno=1036;
	
	-- 玻、金、塑、纸--	金属的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
     select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
            base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-class' as group1,
                    'metal' as group2
            ) as base,
            uct_waste_customer as cus 
  left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                    ) as base,
                    Trans_main_table as oldMain
          left join Trans_assist_table as oldAssist
                 on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
          left join uct_waste_cate as cate
                 on oldAssist.FItemID = cate.id
              where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                and oldMain.FCancellation = 1
                and oldMain.FCorrent = 1  
                and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                and cate.top_class = 'metal'
                group by oldMain.FSupplyID
            ) as main
         on cus.id = main.FSupplyID  
			where cus.customer_type = 'up'
      GROUP BY cus.id 
			having cus.id = p_cust_id;
					
	set errno=1037;
	
	-- 玻、金、塑、纸--	塑料的重量
	 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
      select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
             base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
        from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                     'M' as time_dims, 
                     '客户' as data_dims,
                     'customer-monthly-report' as stat_code,
                     'weight-by-waste-class' as group1,
                     'plastic' as group2
             ) as base,
             uct_waste_customer as cus 
   left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                     ) as base,
                     Trans_main_table as oldMain
           left join Trans_assist_table as oldAssist
                  on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
           left join uct_waste_cate as cate
                  on oldAssist.FItemID = cate.id
               where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                 and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                 and oldMain.FCancellation = 1
                 and oldMain.FCorrent = 1  
                 and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                 and cate.top_class = 'plastic'
                 group by oldMain.FSupplyID
             ) as main
          on cus.id = main.FSupplyID  
			 where cus.customer_type = 'up'
       GROUP BY cus.id 
			 having cus.id = p_cust_id;
				
	set errno=1038;
	-- 玻、金、塑、纸--	纸类的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
       select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
              base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
         from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                      UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                      'M' as time_dims, 
                      '客户' as data_dims,
                      'customer-monthly-report' as stat_code,
                      'weight-by-waste-class' as group1,
                      'waste-paper' as group2
              ) as base,
              uct_waste_customer as cus 
    left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                 from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                              UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                      ) as base,
                      Trans_main_table as oldMain
            left join Trans_assist_table as oldAssist
                   on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
            left join uct_waste_cate as cate
                   on oldAssist.FItemID = cate.id
                where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                  and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                  and oldMain.FCancellation = 1
                  and oldMain.FCorrent = 1  
                  and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                  and cate.top_class = 'waste-paper'
                  group by oldMain.FSupplyID
              ) as main
           on cus.id = main.FSupplyID  
				where cus.customer_type = 'up'
        GROUP BY cus.id 
				having cus.id = p_cust_id;
					
	set errno=1039;				
	-- 玻、金、塑、纸--	重量占比
	update lh_dw.data_statistics_results as main,
           (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                   B.time_val,B.time_dims,B.group1
              from lh_dw.data_statistics_results as A
         left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                      from lh_dw.data_statistics_results as C,
                           (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   'weight-by-waste-class' as group1
                           ) as base 
                     where C.time_dims = base.time_dims 
                       and C.time_val = base.time_val 
                       and C.group1 = base.group1 
                     group by C.data_val
                   ) as B
                on A.data_val = B.data_val
             where A.time_dims = B.time_dims 
               and A.time_val = B.time_val 
               and A.group1 = B.group1 
             order by  A.data_val
           ) as detail
       set main.val2 = detail.rate * 100
     where main.time_dims = detail.time_dims
       and main.time_val = detail.time_val
       and main.group1 = detail.group1
       and main.id = detail.id;
					
	set errno=1040;
	
	-- 绿币(只算有价的。一吨一个绿币)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(round((main.weight/1000)*1,1),0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'green-coin' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > 1546272000
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
								 
	set errno=1041;
	
	-- RDF值(只算低值的。一吨4.2)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,  
           (round((det.m1/1000)*4.2,3)) as val1, ((case when det.m2 = 0 then 0 else (round((det.m1 - det.m2)/det.m2,3)) end) *100) as val2
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, 
                   ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and time_dims = base.time_dims
                                  and group1 = 'weight-by-waste-structure' and group2 = 'low-value-waste' and data_val = main.FSupplyID),0) as m1,
                   ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and time_dims = base.time_dims
                                  and group1 = 'weight-by-waste-structure' and group2 = 'low-value-waste' and data_val = main.FSupplyID),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'rdf-value' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                            ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR'
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up' 
						   and cus.id = p_cust_id
             GROUP BY cus.id
           ) as det;
							 
	set errno=1042;
	
	-- 碳减排--低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-structure' 
                             and group2 = 'low-value-waste' and data_val = main.FSupplyID),0)/1000),3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1043;
	
	-- 碳减排--玻璃
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'glass' and data_val = main.FSupplyID),0)/1000),3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1044;	
	
	-- 碳减排--金属
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'metal' and data_val = main.FSupplyID),0)/1000),3)*4.77 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'metal' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1045;
	
	-- 碳减排--塑料
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'plastic' and data_val = main.FSupplyID),0)/1000),3)*2.37 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'plastic' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1046;	
	
	-- 碳减排--纸类
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'waste-paper' and data_val = main.FSupplyID),0)/1000),3)*2.51 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'waste-paper' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
					
	set errno=1047;
	
	-- 碳减排--总量
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  0 as val1, 0 as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'certified-emission-reduction' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
				
	set errno=1048;	
	
	-- 处置费（低值废弃物的费用）
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(main.money,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'lw-disposal-cost' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FAmount) as money
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id 
		 having cus.id = p_cust_id;
								 
	set errno=1049;	
	
	-- 服务消费成本--清运人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'disposal-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'disposal-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	 
	 set errno=1050;
	 
		
	
	-- 服务消费成本--清运运输费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'transport-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'transport-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	 
	set errno=1052;
	
	
	
	-- 服务消费成本--辅材消耗费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'consumables-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'consumables-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	 
	set errno=1054;
	
	
	
	-- 服务消费成本--分拣人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'sorting-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'sorting-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
		 where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1057;
	
	commit;
	
	if  errno = 1057 then
			set o_rv = 200;
			set o_err = "月报表数据生成成功.";
  end if;
  
  end main_proc;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_month_report_by_cust_mysql_new
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_month_report_by_cust_mysql_new`;
delimiter ;;
CREATE PROCEDURE `lh_dw_month_report_by_cust_mysql_new`(IN `p_day` varchar(50),
IN `p_cust_id` integer,
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_new_day       varchar(50);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "月报表数据生成失败.";
    end;
		
		
main_proc:begin
  
	
  select DATE_FORMAT(DATE_ADD(p_day, INTERVAL 1 MONTH),'%Y-%m-%d') into v_new_day;
	
	if v_new_day is  null then
				set o_rv = 400;
				set o_err = "获取月份失败.";
				leave main_proc;
  end if;
	
	
	start transaction;
	set errno=1000;
	-- 月总收益
	   insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull(main.m1,0) as val1, ifnull(main.m2,0) as val2, 
           ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0)*100 as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time and UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFAmount else 0 end)) as m1,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time2 and UNIX_TIMESTAMP(tmt.FDate) < base.end_time2 then tmt.TalFAmount else 0 end)) as m2 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 2 MONTH), '%Y-%m-01 00:00:00')) as begin_time2,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m-%d 23:59:59')) as end_time2
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;

set errno=1001;

	-- 月总处置量
	  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull(main.m1,0) as val1, ifnull(main.m2,0) as val2, 
           ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0)*100 as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time and UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFQty else 0 end)) as m1,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time2 and UNIX_TIMESTAMP(tmt.FDate) < base.end_time2 then tmt.TalFQty else 0 end)) as m2 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 2 MONTH), '%Y-%m-01 00:00:00')) as begin_time2,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m-%d 23:59:59')) as end_time2
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
 
 set errno=1002;
 
 -- 统计总收益
      insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1,
           ifnull(main.m1,0) as val1,ifnull((main.m1 - main.m2),0) as val2,
           (ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0) * 100) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cumulative-revenue' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID, 
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFAmount else 0 end)) as m1,
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < (base.begin_time - 1) then tmt.TalFAmount else 0 end)) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and UNIX_TIMESTAMP(tmt.FDate) > 1546272000 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
							 
	set errno=1003;
							 
  -- 统计总处置量
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1,
           ifnull(main.m1,0) as val1,ifnull((main.m1 - main.m2),0) as val2,
           (ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0) * 100) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cumulative-weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID, 
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFQty else 0 end)) as m1,
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < (base.begin_time - 1) then tmt.TalFQty else 0 end)) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and UNIX_TIMESTAMP(tmt.FDate) > 1546272000 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1004; 
								 
	
	-- 处置量-按废弃物结构-有价废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'recyclable-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
  GROUP BY cus.id;
					
	set errno=1005; 
					
	-- 处置量-按废弃物结构-低值废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
  GROUP BY cus.id;
					
	set errno=1006; 				
					
	-- 处置量-按废弃物结构-危险废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'hazardous-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'dangerous'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up' 
		   and cus.id = p_cust_id
  GROUP BY cus.id;
					
	set errno=1007;
	
	
	-- 处置量-按废弃物结构-废弃物占比(百分比)	
	update lh_dw.data_statistics_results as main,
            (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                    B.time_val,B.time_dims,B.group1
               from lh_dw.data_statistics_results as A
          left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                       from lh_dw.data_statistics_results as C,
                            (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                    'M' as time_dims, 
                                    'weight-by-waste-structure' as group1
                            ) as base 
                      where C.time_dims = base.time_dims 
                        and C.time_val = base.time_val 
                        and C.group1 = base.group1 
                      group by C.data_val
                    ) as B
                 on A.data_val = B.data_val
              where A.time_dims = B.time_dims 
                and A.time_val = B.time_val 
                and A.group1 = B.group1 
              order by  A.data_val
            ) as detail
        set main.val3 = detail.rate * 100
      where main.time_dims = detail.time_dims
        and main.time_val = detail.time_val
        and main.group1 = detail.group1
        and main.id = detail.id;
		
	set errno=1011;	
	
	-- 首次清运日期
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(main.txt1,'2019-01-01') as txt1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'first-service-time' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select FSupplyID,left((MIN(FDate)),10) as txt1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > 1546272000
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
               group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
			 
	set errno=1012;	
	
  -- 月清运次数
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull(main.num,0) as val1 
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-times' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select FSupplyID,count(distinct FBillNo) as num
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
               group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1013;
	
	-- 累计清运次数
	        insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,det.m2 as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB('2020-09-01', INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB('2020-09-01', INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB('2020-09-01', INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB('2020-09-01', INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-service-times' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB('2020-09-01', INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB('2020-09-01', INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID 
             where cus.customer_type = 'up'
						   and cus.id = p_cust_id
             GROUP BY cus.id
           ) as det;
						
	set errno=1014;		
	
	
	
  -- 订单响应时间--最快响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1016;
	
	-- 订单响应时间--平均响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1017;
	
	-- 订单响应时间--最慢响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1018;
	
	-- 订单响应时间--计划响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tallot-oldLog.Tcreate)+((MAX(oldLog.Tallot-oldLog.Tcreate)+
                                             MIN(oldLog.Tallot-oldLog.Tcreate)+4*AVG(oldLog.Tallot-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1019;
	
	-- 清运响应时间--最快响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1020;
	
	-- 清运响应时间--平均响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1021;
	
	-- 清运响应时间--最慢响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1022;
	
	-- 清运响应时间--计划响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tpurchase-oldLog.Tcreate)+((MAX(oldLog.Tpurchase-oldLog.Tcreate)+
                                             MIN(oldLog.Tpurchase-oldLog.Tcreate)+4*AVG(oldLog.Tpurchase-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1023;
	
	-- 品类排名
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1, val1, val2)  
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  
           ifnull(main.name,'无品名') as txt1, ifnull(main.money,0) as val1, ifnull(main.weight,0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue-by-waste-cate' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, cate.name, sum(oldAssist.FAmount) as money, sum(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
         left join uct_waste_cate as cate
                on oldAssist.FItemID = cate.id
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID, cate.name
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id, main.name;
		 
	set errno=1024;	
	
  -- 品类排名-更新金额排名
	UPDATE lh_dw.data_statistics_results as a
            INNER JOIN (SELECT main.id, main.data_val, main.val1, CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                               @curGroup:= main.data_val,@preAge:= main.val1
                          FROM (select @curGroup :=0,
                                       @preAge :=0,
                                       @row :=0,
                                       'revenue-by-waste-cate' as group1,
                                       DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                       '客户' as data_dims
                               ) as base,
                               lh_dw.data_statistics_results as main
                         WHERE main.group1 = base.group1
                           AND main.time_val = base.time_val
                           AND main.data_dims = base.data_dims
                      ORDER BY main.data_val ASC, main.val1 DESC
                       ) b 
               ON a.id=b.id
        SET a.val3=b.urank;
				
	set errno=1025;	
	
	-- 品类排名-更新重量排名
	UPDATE lh_dw.data_statistics_results as a
          INNER JOIN (SELECT main.id, main.data_val, main.val2, 
                              CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                              @curGroup:= main.data_val,@preAge:= main.val2
                         FROM (select @curGroup :=0,
                                        @preAge :=0,
                                        @row :=0,
                                        'revenue-by-waste-cate' as group1,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        '客户' as data_dims
                              ) as base,
                              lh_dw.data_statistics_results as main
                    WHERE main.group1 = base.group1
                         AND main.time_val = base.time_val
                         AND main.data_dims = base.data_dims
                    ORDER BY main.data_val ASC, main.val2 DESC
                    ) b 
               ON a.id=b.id
        SET a.val4=b.urank;
				
	set errno=1026;	
	
	-- 采购重量
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2, val3) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'purchase-weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(if(oldAssist.value_type in ('valuable','unvaluable'),oldAssist.FQty,0)) as m1,
                   SUM(if(oldAssist.value_type = 'valuable',oldAssist.FQty,0)) as m2,
                   SUM(if(oldAssist.value_type = 'unvaluable',oldAssist.FQty,0)) as m3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FTranType = 'PUR'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
			
	set errno=1027;	
	
	-- 入库分析
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3, val4, val5)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3,
           ifnull(m4,0) as val4, ifnull(m5,0) as val5
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'inventory-analysis' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(oldAssist.FAmount) as m1,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FAmount,0)) as m2,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FAmount,0)) as m3,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FQty,0)) as m4,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FQty,0)) as m5
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
		 
	set errno=1028;	
	
  -- 雷达图--分拣成本
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,  
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                 and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                 and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, 
                    (case when inv.val1 = 0 then 0 else round((inv.val4/inv.val1),3) end) as val2,
                    (case when inv.val4 = 0 then 0 else round((inv.val2/inv.val4),3) end) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'sorting-cost' as group2
                   ) as base,
                   uct_waste_customer as cus
         left join (select rest.data_val,  
                           sum((case when rest.group1 = 'inventory-analysis' then rest.val4 else 0 end)) as val4,
                           sum((case when rest.group1 = 'inventory-analysis' then rest.val2 else 0 end)) as val2, 
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                           ) as base,
                           lh_dw.data_statistics_results as rest 
                     where rest.time_val = base.time_val
                       and rest.time_dims = 'M'
                       and rest.group1 in ('inventory-analysis','weight')
                       group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
						   and cus.id = p_cust_id
             GROUP BY cus.id
           ) as det;
										 
	set errno=1029;	
	
	-- 雷达图--互信指数
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'first_order_time' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'month_output' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3  
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                    round((base.end_time - inv.m1)/86400,3) as val2, inv.m2 as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'trust-index' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val, 
                           sum((case when rest.group1 = 'first-service-time' then UNIX_TIMESTAMP(rest.txt1) else 0 end)) as m1, 
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as m2
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                           ) as base,
                           lh_dw.data_statistics_results as rest 
                     where rest.time_val = base.time_val
                       and rest.time_dims = 'M'
                       and rest.group1 in ('first-service-time','weight')
                      group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
						   and cus.id = p_cust_id
             GROUP BY cus.id
           ) as det;
										 
	set errno=1030;
	
	-- 雷达图--服务时效
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'service-effect' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((case when inv.m2 = 0 then 0 else round(inv.m1/inv.m2,3) end),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'service-effect' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select E.FSupplyID, ifnull(SUM(G.sign_out_time-G.sign_in_time),0) as m1, ifnull(count(E.FCancellation),0) as m2 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time     
                           ) as base,
                           Trans_main_table as E 
                 left join uct_waste_purchase as F 
                        on E.FBillNo = F.order_id 
                 left join uct_purchase_sign_in_out as G 
                        on F.id = G.purchase_id 
                     where E.FCancellation = 1 
                       and UNIX_TIMESTAMP(E.FDate) > base.begin_time 
                       and UNIX_TIMESTAMP(E.FDate) < base.end_time 
                       and E.FTranType = 'PUR' 
                       and G.sign_in_time > 0 
                       and G.sign_out_time > 0  
                     group by E.FSupplyID
                   ) as inv
                on cus.id = inv.FSupplyID 
             where cus.customer_type = 'up'
						   and cus.id = p_cust_id
             GROUP BY cus.id
           ) as det;
								
	set errno=1031;		
	
	-- 雷达图--满载率
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'load-factor' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   (case when inv.m2 = 0 then 0 else round((inv.m1/inv.m2),2) end) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'load-factor' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val,
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as m1,
                           sum((case when rest.group1 = 'service-times' then rest.val1 else 0 end)) as m2 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val     
                           ) as base,
                           lh_dw.data_statistics_results as rest
                     where rest.time_dims = 'M'
                       and rest.time_val = base.time_val
                       and rest.group1 in ('service-times','weight')   
                     group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
						   and cus.id = p_cust_id
             GROUP BY cus.id       
           ) as det;
							 
	set errno=1032;	
	
	-- 雷达图--废弃物结构
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3)    
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((case when inv.m1 = 0 then 0  else round((inv.m4/inv.m1),3) end),0) as val2,
                   ifnull((case when inv.m2 = 0 then 0  else round((inv.m3/inv.m2),3) end),0) as val3 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'waste-structure' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val, 
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as m1,
                           sum((case when rest.group1 = 'purchase-weight' then rest.val1 else 0 end)) as m2,
                           sum((case when rest.group1 = 'purchase-weight' then rest.val2 else 0 end)) as m3,
                           sum((case when rest.group1 = 'purchase-weight' then rest.val3 else 0 end)) as m4
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val 
                           ) as base,
                           lh_dw.data_statistics_results as rest
                     where rest.time_dims = 'M' 
                       and rest.time_val = base.time_val
                       and rest.group1 in ('purchase-weight','weight') 
                     group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
						   and cus.id = p_cust_id
             GROUP BY cus.id
           ) as det;
	set errno=1033;	
	
	-- 雷达图--同行比较
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'industry-ranking' 
               and start_value <= det.val2 and end_value >= det.val2) as val1, det.val2
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull(inv.num,0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'industry-ranking' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val,SUM(rest.val1) as num
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val 
                           ) as base,
                           lh_dw.data_statistics_results as rest
                     where rest.time_dims = 'M' 
                       and rest.time_val = base.time_val 
                       and rest.group1 = 'customer-index' 
                       and rest.group2 in ('sorting-cost','trust-index','service-effect','load-factor','waste-structure')
                     group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
						   and cus.id = p_cust_id
             GROUP BY cus.id
           ) as det;
	set errno=1034;	
	
	-- 雷达图--获取总分数
	   insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
   select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
          base.data_dims, rest.data_val as data_val, base.stat_code, base.group1, base.group2,ifnull(SUM(val1),0) as val1
     from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                  'M' as time_dims, 
                  '客户' as data_dims,
                  'customer-monthly-report' as stat_code,
                  'customer-index' as group1,
                  'the_overall_score' as group2
          ) as base,
          lh_dw.data_statistics_results as rest 
    where rest.time_dims = base.time_dims
      and rest.time_val = base.time_val
      and rest.group1 = base.group1
    GROUP BY rest.data_val;
						 
	set errno=1035;	
	
	-- 玻、金、塑、纸--	玻璃的重量
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, 0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'weight-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
				
	set errno=1036;
	
	-- 玻、金、塑、纸--	金属的重量
	     insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
     select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
            base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-class' as group1,
                    'metal' as group2
            ) as base,
            uct_waste_customer as cus 
  left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                    ) as base,
                    Trans_main_table as oldMain
          left join Trans_assist_table as oldAssist
                 on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
          left join uct_waste_cate as cate
                 on oldAssist.FItemID = cate.id
              where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                and oldMain.FCancellation = 1
                and oldMain.FCorrent = 1  
                and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                and cate.top_class = 'metal'
                group by oldMain.FSupplyID
            ) as main
         on cus.id = main.FSupplyID 
      where cus.customer_type = 'up'
			  and cus.id = p_cust_id
      GROUP BY cus.id;
					
	set errno=1037;
	
	-- 玻、金、塑、纸--	塑料的重量
	       insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
      select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
             base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
        from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                     'M' as time_dims, 
                     '客户' as data_dims,
                     'customer-monthly-report' as stat_code,
                     'weight-by-waste-class' as group1,
                     'plastic' as group2
             ) as base,
             uct_waste_customer as cus 
   left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                     ) as base,
                     Trans_main_table as oldMain
           left join Trans_assist_table as oldAssist
                  on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
           left join uct_waste_cate as cate
                  on oldAssist.FItemID = cate.id
               where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                 and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                 and oldMain.FCancellation = 1
                 and oldMain.FCorrent = 1  
                 and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                 and cate.top_class = 'plastic'
                 group by oldMain.FSupplyID
             ) as main
          on cus.id = main.FSupplyID 
       where cus.customer_type = 'up'
			   and cus.id = p_cust_id
       GROUP BY cus.id;
				
	set errno=1038;
	-- 玻、金、塑、纸--	纸类的重量
	       insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
       select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
              base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
         from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                      UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                      'M' as time_dims, 
                      '客户' as data_dims,
                      'customer-monthly-report' as stat_code,
                      'weight-by-waste-class' as group1,
                      'waste-paper' as group2
              ) as base,
              uct_waste_customer as cus 
    left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                 from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                              UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                      ) as base,
                      Trans_main_table as oldMain
            left join Trans_assist_table as oldAssist
                   on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
            left join uct_waste_cate as cate
                   on oldAssist.FItemID = cate.id
                where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                  and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                  and oldMain.FCancellation = 1
                  and oldMain.FCorrent = 1  
                  and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                  and cate.top_class = 'waste-paper'
                  group by oldMain.FSupplyID
              ) as main
           on cus.id = main.FSupplyID 
        where cus.customer_type	= 'up'
				  and cus.id = p_cust_id
        GROUP BY cus.id;
					
	set errno=1039;				
	-- 玻、金、塑、纸--	重量占比
	update lh_dw.data_statistics_results as main,
           (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                   B.time_val,B.time_dims,B.group1
              from lh_dw.data_statistics_results as A
         left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                      from lh_dw.data_statistics_results as C,
                           (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   'weight-by-waste-class' as group1
                           ) as base 
                     where C.time_dims = base.time_dims 
                       and C.time_val = base.time_val 
                       and C.group1 = base.group1 
                     group by C.data_val
                   ) as B
                on A.data_val = B.data_val
             where A.time_dims = B.time_dims 
               and A.time_val = B.time_val 
               and A.group1 = B.group1 
             order by  A.data_val
           ) as detail
       set main.val2 = detail.rate * 100
     where main.time_dims = detail.time_dims
       and main.time_val = detail.time_val
       and main.group1 = detail.group1
       and main.id = detail.id;
					
	set errno=1040;
	
	-- 绿币(只算有价的。一吨一个绿币)
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(round((main.weight/1000)*1,1),0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'green-coin' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > 1546272000
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
								 
	set errno=1041;
	
	-- RDF值(只算低值的。一吨4.2)
	     insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, 
           (round(ifnull(main.m1/1000,0)*4.2,3)) as val1, 
           ifnull((case when main.m2 = 0 then 0 else (round((main.m1 - main.m2)/main.m2,3)) end),0) *100 as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'rdf-value' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select rest.data_val,
                   sum((case when rest.time_val = base.time_val then val1 else 0 end)) as m1,
                   sum((case when rest.time_val = base.time_val2 then val1 else 0 end)) as m2
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2   
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M'
               and rest.group1 = 'weight-by-waste-structure' 
               and rest.group2 = 'low-value-waste'
             group by rest.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
							 
	set errno=1042;
	
	-- 碳减排--低值废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val, oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results  as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-structure' 
               and oldRes.group2 = 'low-value-waste' 
               group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1043;
	
	-- 碳减排--玻璃
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'glass' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1044;	
	
	-- 碳减排--金属
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*4.77 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'metal' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'metal' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1045;
	
	-- 碳减排--塑料
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*2.37 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'plastic' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'plastic' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1046;	
	
	-- 碳减排--纸类
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*2.51 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'waste-paper' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'waste-paper' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
					
	set errno=1047;
	
	-- 碳减排--总量
      insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  0 as val1, 0 as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'certified-emission-reduction' as group1
           ) as base,
           uct_waste_customer as cus 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
				
	set errno=1048;	
	
	-- 处置费（低值废弃物的费用）
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(main.money,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'lw-disposal-cost' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FAmount) as money
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
								 
	set errno=1049;	
	
	-- 服务消费成本--清运人工费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'disposal-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID
 left join (select rest.data_val, rest.val1 
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M' 
               and rest.time_val = base.time_val2 
               and rest.group1 = 'service-cost' 
               and rest.group2 = 'disposal-cost'
               group by rest.data_val
           ) as last  
        on cus.id = last.data_val 
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	 
	 set errno=1050;
	 
		
	
	-- 服务消费成本--清运运输费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'transport-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
 left join (select rest.data_val, rest.val1 
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M' 
               and rest.time_val = base.time_val2 
               and rest.group1 = 'service-cost' 
               and rest.group2 = 'transport-cost'
             group by rest.data_val
           ) as last  
        on cus.id = last.data_val
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	 
	set errno=1052;
	
	
	
	-- 服务消费成本--辅材消耗费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'consumables-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
 left join (select rest.data_val, rest.val1 
             from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                  ) as base,
                  lh_dw.data_statistics_results as rest
            where rest.time_dims = 'M' 
              and rest.time_val = base.time_val2 
              and rest.group1 = 'service-cost' 
              and rest.group2 = 'consumables-cost'
            group by rest.data_val
           ) as last  
        on cus.id = last.data_val
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	 
	set errno=1054;
	
	
	
	-- 服务消费成本--分拣人工费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'sorting-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
 left join (select rest.data_val, rest.val1 
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M' 
               and rest.time_val = base.time_val2 
               and rest.group1 = 'service-cost' 
               and rest.group2 = 'sorting-cost'
             group by rest.data_val
           ) as last  
        on cus.id = last.data_val
     where cus.customer_type = 'up'
		   and cus.id = p_cust_id
     GROUP BY cus.id;
	
	set errno=1057;
	
	commit;
	
	if  errno = 1057 then
			set o_rv = 200;
			set o_err = "月报表数据生成成功.";
  end if;
  
  end main_proc;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_month_report_del
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_month_report_del`;
delimiter ;;
CREATE PROCEDURE `lh_dw_month_report_del`(IN `p_day` varchar(50),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_new_day       varchar(50);
  declare exit HANDLER for sqlexception
    begin
        select errno;
        set o_rv = errno;
        set o_err = "月报表数据删除失败.";
    end;
		
		
main_proc:begin
  
	set errno=100;
	
  select DATE_FORMAT(DATE_ADD(p_day, INTERVAL 0 MONTH),'%Y-%m') into v_new_day;
	
	if v_new_day is not null then
				set errno=101;
  end if;
	
	DELETE FROM lh_dw.data_statistics_results
  WHERE time_dims = 'M' and time_val = v_new_day;
	
	set errno=102;
	
	 if  errno = 102 then
				set o_rv = 200;
				set o_err = "月报表数据删除成功.";
		end if;
		
  end main_proc;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_month_report_mysql
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_month_report_mysql`;
delimiter ;;
CREATE PROCEDURE `lh_dw_month_report_mysql`(IN `p_day` varchar(50),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_new_day       varchar(50);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "月报表数据生成失败.";
    end;
		
		
main_proc:begin
  
	
  select DATE_FORMAT(DATE_ADD(p_day, INTERVAL 1 MONTH),'%Y-%m-%d') into v_new_day;
	
	if v_new_day is  null then
				set o_rv = 400;
				set o_err = "获取月份失败.";
				leave main_proc;
  end if;
	
	
	start transaction;
	set errno=1000;
	-- 月总收益
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.val1, det.val2, ((case when det.val2 = 0 then 0 else round((det.val1 - det.val2)/det.val2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(sum(main.TalFAmount),0) as val1,
                   ifnull((select val1 from lh_dw.data_statistics_results  where time_dims = base.time_dims and data_dims = base.data_dims
                   and time_val = base.time_val2 and group1 = base.group1 and data_val = cus.id),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'revenue' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR'
                    ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
          GROUP BY cus.id
           ) as det;

set errno=1001;

	-- 月总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.val1, det.val2, ((case when det.val2 = 0 then 0 else round((det.val1 - det.val2)/det.val2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(sum(main.TalFQty),0) as val1,
                   ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims  and data_dims = base.data_dims
                   and time_val = base.time_val2 and group1 = base.group1 and data_val = cus.id),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'weight' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR'
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
          GROUP BY cus.id
           ) as det;
 
 set errno=1002;
 
 -- 统计总收益
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select SUM(TalFAmount) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-revenue' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
							 
	set errno=1003;
							 
  -- 统计总处置量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,(det.m1 - det.m2) as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select SUM(TalFQty) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-weight' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
								 
	set errno=1004; 
								 
	
	-- 处置量-按废弃物结构-有价废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1, 
           ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims and time_val = base.time_val2  
                    and group1 = base.group1 and data_val = cus.id),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'recyclable-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
  GROUP BY cus.id;
					
	set errno=1005; 
					
	-- 处置量-按废弃物结构-低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1, 
           ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims and time_val = base.time_val2  
                    and group1 = base.group1 and data_val = cus.id),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
  GROUP BY cus.id;
					
	set errno=1006; 				
					
	-- 处置量-按废弃物结构-危险废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1, 
           ifnull((select val1 from lh_dw.data_statistics_results where time_dims = base.time_dims and time_val = base.time_val2  
                    and group1 = base.group1 and data_val = cus.id),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'hazardous-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'dangerous'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up' 
  GROUP BY cus.id;
					
	set errno=1007;
	
	
	-- 处置量-按废弃物结构-废弃物占比(百分比)	
	update lh_dw.data_statistics_results as main,
            (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                    B.time_val,B.time_dims,B.group1
               from lh_dw.data_statistics_results as A
          left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                       from lh_dw.data_statistics_results as C,
                            (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                    'M' as time_dims, 
                                    'weight-by-waste-structure' as group1
                            ) as base 
                      where C.time_dims = base.time_dims 
                        and C.time_val = base.time_val 
                        and C.group1 = base.group1 
                      group by C.data_val
                    ) as B
                 on A.data_val = B.data_val
              where A.time_dims = B.time_dims 
                and A.time_val = B.time_val 
                and A.group1 = B.group1 
              order by  A.data_val
            ) as detail
        set main.val3 = detail.rate * 100
      where main.time_dims = detail.time_dims
        and main.time_val = detail.time_val
        and main.group1 = detail.group1
        and main.id = detail.id;
		
	set errno=1011;	
	
	-- 首次清运日期
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(main.txt1,'2019-01-01') as txt1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'first-service-time' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select FSupplyID,left((MIN(FDate)),10) as txt1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > 1546272000
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
               group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
			 
	set errno=1012;	
	
  -- 月清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and 
                UNIX_TIMESTAMP(FDate) > base.begin_time and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as val1 
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-times' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1013;
	
	-- 累计清运次数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,det.m2 as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-service-times' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
						
	set errno=1014;		
	
	
	
  -- 订单响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1016;
	
	-- 订单响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1017;
	
	-- 订单响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1018;
	
	-- 订单响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tallot-oldLog.Tcreate)+((MAX(oldLog.Tallot-oldLog.Tcreate)+
                                             MIN(oldLog.Tallot-oldLog.Tcreate)+4*AVG(oldLog.Tallot-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1019;
	
	-- 清运响应时间--最快响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1020;
	
	-- 清运响应时间--平均响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1021;
	
	-- 清运响应时间--最慢响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1022;
	
	-- 清运响应时间--计划响应时间
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tpurchase-oldLog.Tcreate)+((MAX(oldLog.Tpurchase-oldLog.Tcreate)+
                                             MIN(oldLog.Tpurchase-oldLog.Tcreate)+4*AVG(oldLog.Tpurchase-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1023;
	
	-- 品类排名
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1, val1, val2)  
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  
           ifnull(main.name,'无品名') as txt1, ifnull(main.money,0) as val1, ifnull(main.weight,0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue-by-waste-cate' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, cate.name, sum(oldAssist.FAmount) as money, sum(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
         left join uct_waste_cate as cate
                on oldAssist.FItemID = cate.id
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID, cate.name
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id, main.name;
		 
	set errno=1024;	
	
  -- 品类排名-更新金额排名
	UPDATE lh_dw.data_statistics_results as a
            INNER JOIN (SELECT main.id, main.data_val, main.val1, CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                               @curGroup:= main.data_val,@preAge:= main.val1
                          FROM (select @curGroup :=0,
                                       @preAge :=0,
                                       @row :=0,
                                       'revenue-by-waste-cate' as group1,
                                       DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                       '客户' as data_dims
                               ) as base,
                               lh_dw.data_statistics_results as main
                         WHERE main.group1 = base.group1
                           AND main.time_val = base.time_val
                           AND main.data_dims = base.data_dims
                      ORDER BY main.data_val ASC, main.val1 DESC
                       ) b 
               ON a.id=b.id
        SET a.val3=b.urank;
				
	set errno=1025;	
	
	-- 品类排名-更新重量排名
	UPDATE lh_dw.data_statistics_results as a
          INNER JOIN (SELECT main.id, main.data_val, main.val2, 
                              CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                              @curGroup:= main.data_val,@preAge:= main.val2
                         FROM (select @curGroup :=0,
                                        @preAge :=0,
                                        @row :=0,
                                        'revenue-by-waste-cate' as group1,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        '客户' as data_dims
                              ) as base,
                              lh_dw.data_statistics_results as main
                    WHERE main.group1 = base.group1
                         AND main.time_val = base.time_val
                         AND main.data_dims = base.data_dims
                    ORDER BY main.data_val ASC, main.val2 DESC
                    ) b 
               ON a.id=b.id
        SET a.val4=b.urank;
				
	set errno=1026;	
	
	-- 采购重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2, val3) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'purchase-weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(if(oldAssist.value_type in ('valuable','unvaluable'),oldAssist.FQty,0)) as m1,
                   SUM(if(oldAssist.value_type = 'valuable',oldAssist.FQty,0)) as m2,
                   SUM(if(oldAssist.value_type = 'unvaluable',oldAssist.FQty,0)) as m3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FTranType = 'PUR'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
			
	set errno=1027;	
	
	-- 入库分析
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3, val4, val5)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3,
           ifnull(m4,0) as val4, ifnull(m5,0) as val5
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'inventory-analysis' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(oldAssist.FAmount) as m1,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FAmount,0)) as m2,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FAmount,0)) as m3,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FQty,0)) as m4,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FQty,0)) as m5
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
		 
	set errno=1028;	
	
  -- 雷达图--分拣成本
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,  
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                 and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                 and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull(round((select IFNULL(val4,0)  from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'inventory-analysis' and data_val = main.FSupplyID)/
                                (select val1 from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'weight' and data_val = main.FSupplyID),3),0) as val2,
                   ifnull(round((select IFNULL(val2,0) from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'inventory-analysis' and data_val = main.FSupplyID)/
                                (select val4 from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'inventory-analysis' and data_val = main.FSupplyID),3),0) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'sorting-cost' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                            ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
										 
	set errno=1029;	
	
	-- 雷达图--互信指数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'first_order_time' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'month_output' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3  
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((round((UNIX_TIMESTAMP(v_new_day) - 
                         (select UNIX_TIMESTAMP(txt1) as first from lh_dw.data_statistics_results where time_val = base.time_val 
                             and group1 = 'first-service-time' and data_val = main.FSupplyID))/86400,3)),0) as val2,
                   ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                             and data_val = main.FSupplyID),0) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'trust-index' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
										 
	set errno=1030;
	
	-- 雷达图--服务时效
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'service-effect' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   round((select  ifnull((SUM(G.sign_out_time-G.sign_in_time)/count(E.FCancellation)),0) as num 
                            from Trans_main_table as E left join uct_waste_purchase as F on E.FBillNo = F.order_id 
                       left join uct_purchase_sign_in_out as G on F.id = G.purchase_id where E.FCancellation = 1 and UNIX_TIMESTAMP(E.FDate) > base.begin_time 
                             and UNIX_TIMESTAMP(E.FDate) < base.end_time and E.FTranType = 'PUR' and G.sign_in_time > 0 and G.sign_out_time > 0 and E.FSupplyID = main.FSupplyID
                    ),2) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'service-effect' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
								
	set errno=1031;		
	
	-- 雷达图--满载率
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'load-factor' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select sec.time_dims, sec.time_val, sec.begin_time, sec.end_time, sec.data_dims, sec.data_val, sec.stat_code, sec.group1, sec.group2,
                   (case when sec.m2 = 0 then 0 else round((sec.m1/sec.m2),2) end) as val2
              from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                           ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                                          and data_val = main.FSupplyID),0) as m1,
                           ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'service-times' 
                                          and data_val = main.FSupplyID),0) as m2
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                                   'M' as time_dims, 
                                   '客户' as data_dims,
                                   'customer-monthly-report' as stat_code,
                                   'customer-index' as group1,
                                   'load-factor' as group2
                           ) as base,
                           uct_waste_customer as cus 
                 left join (select * 
                              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                                   ) as base,
                                   Trans_main_table 
                             where UNIX_TIMESTAMP(FDate) > base.begin_time
                               and UNIX_TIMESTAMP(FDate) < base.end_time 
                             group by FSupplyID
                           ) as main
                        on cus.id = main.FSupplyID  
										 where cus.customer_type = 'up'
                     GROUP BY cus.id
                   ) as sec
           ) as det;
							 
	set errno=1032;	
	
	-- 雷达图--废弃物结构
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3)    
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull(round((select IFNULL(val3,0)  from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'purchase-weight' and data_val = main.FSupplyID)/
                                (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight' 
                                    and data_val = main.FSupplyID),3),0) as val2,
                   ifnull(round((select IFNULL(val1,0) from lh_dw.data_statistics_results where time_val = base.time_val 
                                    and group1 = 'purchase-weight' and data_val = main.FSupplyID)/
                                (select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'purchase-weight' 
                                    and data_val = main.FSupplyID),3),0) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'waste-structure' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
	set errno=1033;	
	
	-- 雷达图--同行比较
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'industry-ranking' 
               and start_value <= det.val2 and end_value >= det.val2) as val1, det.val2
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' 
                              and group2 in ('sorting-cost','trust-index','service-effect','load-factor','waste-structure') and data_val = main.FSupplyID),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'industry-ranking' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
	set errno=1034;	
	
	-- 雷达图--获取总分数
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           ifnull((select SUM(val1) from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'customer-index' 
                    and group2 in ('sorting-cost','trust-index','service-effect','load-factor','waste-structure','industry-ranking') 
                    and data_val = main.FSupplyID),0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'customer-index' as group1,
                   'the_overall_score' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
						 
	set errno=1035;	
	
	-- 玻、金、塑、纸--	玻璃的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, 0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'weight-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
				
	set errno=1036;
	
	-- 玻、金、塑、纸--	金属的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
     select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
            base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-class' as group1,
                    'metal' as group2
            ) as base,
            uct_waste_customer as cus 
  left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                    ) as base,
                    Trans_main_table as oldMain
          left join Trans_assist_table as oldAssist
                 on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
          left join uct_waste_cate as cate
                 on oldAssist.FItemID = cate.id
              where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                and oldMain.FCancellation = 1
                and oldMain.FCorrent = 1  
                and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                and cate.top_class = 'metal'
                group by oldMain.FSupplyID
            ) as main
         on cus.id = main.FSupplyID  
			where cus.customer_type = 'up'
      GROUP BY cus.id;
					
	set errno=1037;
	
	-- 玻、金、塑、纸--	塑料的重量
	 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
      select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
             base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
        from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                     'M' as time_dims, 
                     '客户' as data_dims,
                     'customer-monthly-report' as stat_code,
                     'weight-by-waste-class' as group1,
                     'plastic' as group2
             ) as base,
             uct_waste_customer as cus 
   left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                     ) as base,
                     Trans_main_table as oldMain
           left join Trans_assist_table as oldAssist
                  on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
           left join uct_waste_cate as cate
                  on oldAssist.FItemID = cate.id
               where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                 and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                 and oldMain.FCancellation = 1
                 and oldMain.FCorrent = 1  
                 and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                 and cate.top_class = 'plastic'
                 group by oldMain.FSupplyID
             ) as main
          on cus.id = main.FSupplyID  
			 where cus.customer_type = 'up'
       GROUP BY cus.id;
				
	set errno=1038;
	-- 玻、金、塑、纸--	纸类的重量
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
       select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
              base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
         from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                      UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                      'M' as time_dims, 
                      '客户' as data_dims,
                      'customer-monthly-report' as stat_code,
                      'weight-by-waste-class' as group1,
                      'waste-paper' as group2
              ) as base,
              uct_waste_customer as cus 
    left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                 from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                              UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                      ) as base,
                      Trans_main_table as oldMain
            left join Trans_assist_table as oldAssist
                   on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
            left join uct_waste_cate as cate
                   on oldAssist.FItemID = cate.id
                where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                  and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                  and oldMain.FCancellation = 1
                  and oldMain.FCorrent = 1  
                  and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                  and cate.top_class = 'waste-paper'
                  group by oldMain.FSupplyID
              ) as main
           on cus.id = main.FSupplyID  
				where cus.customer_type = 'up'
        GROUP BY cus.id;
					
	set errno=1039;				
	-- 玻、金、塑、纸--	重量占比
	update lh_dw.data_statistics_results as main,
           (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                   B.time_val,B.time_dims,B.group1
              from lh_dw.data_statistics_results as A
         left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                      from lh_dw.data_statistics_results as C,
                           (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   'weight-by-waste-class' as group1
                           ) as base 
                     where C.time_dims = base.time_dims 
                       and C.time_val = base.time_val 
                       and C.group1 = base.group1 
                     group by C.data_val
                   ) as B
                on A.data_val = B.data_val
             where A.time_dims = B.time_dims 
               and A.time_val = B.time_val 
               and A.group1 = B.group1 
             order by  A.data_val
           ) as detail
       set main.val2 = detail.rate * 100
     where main.time_dims = detail.time_dims
       and main.time_val = detail.time_val
       and main.group1 = detail.group1
       and main.id = detail.id;
					
	set errno=1040;
	
	-- 绿币(只算有价的。一吨一个绿币)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(round((main.weight/1000)*1,1),0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'green-coin' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > 1546272000
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
								 
	set errno=1041;
	
	-- RDF值(只算低值的。一吨4.2)
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,  
           (round((det.m1/1000)*4.2,3)) as val1, ((case when det.m2 = 0 then 0 else (round((det.m1 - det.m2)/det.m2,3)) end) *100) as val2
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, 
                   ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and time_dims = base.time_dims
                                  and group1 = 'weight-by-waste-structure' and group2 = 'low-value-waste' and data_val = main.FSupplyID),0) as m1,
                   ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and time_dims = base.time_dims
                                  and group1 = 'weight-by-waste-structure' and group2 = 'low-value-waste' and data_val = main.FSupplyID),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'rdf-value' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                            ) as base,
                            Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR'
                     group by FSupplyID
                   ) as main
                on cus.id = main.FSupplyID  
						 where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
							 
	set errno=1042;
	
	-- 碳减排--低值废弃物
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-structure' 
                             and group2 = 'low-value-waste' and data_val = main.FSupplyID),0)/1000),3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1043;
	
	-- 碳减排--玻璃
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'glass' and data_val = main.FSupplyID),0)/1000),3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1044;	
	
	-- 碳减排--金属
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'metal' and data_val = main.FSupplyID),0)/1000),3)*4.77 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'metal' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1045;
	
	-- 碳减排--塑料
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'plastic' and data_val = main.FSupplyID),0)/1000),3)*2.37 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'plastic' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1046;	
	
	-- 碳减排--纸类
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val and group1 = 'weight-by-waste-class' 
                             and group2 = 'waste-paper' and data_val = main.FSupplyID),0)/1000),3)*2.51 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'waste-paper' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
					
	set errno=1047;
	
	-- 碳减排--总量
  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  0 as val1, 0 as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'certified-emission-reduction' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select * 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
             group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
				
	set errno=1048;	
	
	-- 处置费（低值废弃物的费用）
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(main.money,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'lw-disposal-cost' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FAmount) as money
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1049;	
	
	-- 服务消费成本--清运人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'disposal-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'disposal-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	 
	 set errno=1050;
	 
		
	
	-- 服务消费成本--清运运输费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'transport-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'transport-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	 
	set errno=1052;
	
	
	
	-- 服务消费成本--辅材消耗费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'consumables-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'consumables-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID  
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	 
	set errno=1054;
	
	
	
	-- 服务消费成本--分拣人工费用
	insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull(main.val1 - round((ifnull((select val1 from lh_dw.data_statistics_results where time_val = base.time_val2 and group1 = 'service-cost' 
                                     and group2 = 'sorting-cost' and data_val = main.FSupplyID),0)),3),
                 0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'sorting-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
		 where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1057;
	
	commit;
	
	if  errno = 1057 then
			set o_rv = 200;
			set o_err = "月报表数据生成成功.";
  end if;
  
  end main_proc;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_month_report_mysql_new
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_month_report_mysql_new`;
delimiter ;;
CREATE PROCEDURE `lh_dw_month_report_mysql_new`(IN `p_day` varchar(50),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_new_day       varchar(50);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "月报表数据生成失败.";
    end;
		
		
main_proc:begin
  
	
  select DATE_FORMAT(DATE_ADD(p_day, INTERVAL 1 MONTH),'%Y-%m-%d') into v_new_day;
	
	if v_new_day is  null then
				set o_rv = 400;
				set o_err = "获取月份失败.";
				leave main_proc;
  end if;
	
	
	start transaction;
	set errno=1000;
	-- 月总收益
	   insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull(main.m1,0) as val1, ifnull(main.m2,0) as val2, 
           ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0)*100 as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time and UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFAmount else 0 end)) as m1,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time2 and UNIX_TIMESTAMP(tmt.FDate) < base.end_time2 then tmt.TalFAmount else 0 end)) as m2 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 2 MONTH), '%Y-%m-01 00:00:00')) as begin_time2,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m-%d 23:59:59')) as end_time2
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;

set errno=1001;

	-- 月总处置量
	  insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull(main.m1,0) as val1, ifnull(main.m2,0) as val2, 
           ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0)*100 as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time and UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFQty else 0 end)) as m1,
                   sum((case when UNIX_TIMESTAMP(tmt.FDate) > base.begin_time2 and UNIX_TIMESTAMP(tmt.FDate) < base.end_time2 then tmt.TalFQty else 0 end)) as m2 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 2 MONTH), '%Y-%m-01 00:00:00')) as begin_time2,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m-%d 23:59:59')) as end_time2
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
 
 set errno=1002;
 
 -- 统计总收益
      insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1,
           ifnull(main.m1,0) as val1,ifnull((main.m1 - main.m2),0) as val2,
           (ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0) * 100) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cumulative-revenue' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID, 
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFAmount else 0 end)) as m1,
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < (base.begin_time - 1) then tmt.TalFAmount else 0 end)) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and UNIX_TIMESTAMP(tmt.FDate) > 1546272000 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
							 
	set errno=1003;
							 
  -- 统计总处置量
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1,
           ifnull(main.m1,0) as val1,ifnull((main.m1 - main.m2),0) as val2,
           (ifnull((case when main.m2 = 0 then 0 else round((main.m1 - main.m2)/main.m2,4) end),0) * 100) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cumulative-weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select tmt.FSupplyID, 
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < base.end_time then tmt.TalFQty else 0 end)) as m1,
                   SUM((case when UNIX_TIMESTAMP(tmt.FDate) < (base.begin_time - 1) then tmt.TalFQty else 0 end)) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as tmt
             where tmt.FCancellation = 1 
               and UNIX_TIMESTAMP(tmt.FDate) > 1546272000 
               and tmt.FTranType = 'PUR'
             group by tmt.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1004; 
								 
	
	-- 处置量-按废弃物结构-有价废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'recyclable-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up' 
  GROUP BY cus.id;
					
	set errno=1005; 
					
	-- 处置量-按废弃物结构-低值废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up' 
  GROUP BY cus.id;
					
	set errno=1006; 				
					
	-- 处置量-按废弃物结构-危险废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.total_w,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-structure' as group1,
                    'hazardous-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,ifnull(SUM(oldAssist.FQty),0) as total_w
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
               and oldMain.FSaleStyle in (0,1) 
               and UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldAssist.value_type = 'dangerous'
             group by oldMain.FSupplyID) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up' 
  GROUP BY cus.id;
					
	set errno=1007;
	
	
	-- 处置量-按废弃物结构-废弃物占比(百分比)	
	update lh_dw.data_statistics_results as main,
            (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                    B.time_val,B.time_dims,B.group1
               from lh_dw.data_statistics_results as A
          left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                       from lh_dw.data_statistics_results as C,
                            (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                    'M' as time_dims, 
                                    'weight-by-waste-structure' as group1
                            ) as base 
                      where C.time_dims = base.time_dims 
                        and C.time_val = base.time_val 
                        and C.group1 = base.group1 
                      group by C.data_val
                    ) as B
                 on A.data_val = B.data_val
              where A.time_dims = B.time_dims 
                and A.time_val = B.time_val 
                and A.group1 = B.group1 
              order by  A.data_val
            ) as detail
        set main.val3 = detail.rate * 100
      where main.time_dims = detail.time_dims
        and main.time_val = detail.time_val
        and main.group1 = detail.group1
        and main.id = detail.id;
		
	set errno=1011;	
	
	-- 首次清运日期
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, ifnull(main.txt1,'2019-01-01') as txt1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'first-service-time' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select FSupplyID,left((MIN(FDate)),10) as txt1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > 1546272000
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
               group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
			 
	set errno=1012;	
	
  -- 月清运次数
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code,  base.group1, 
           ifnull(main.num,0) as val1 
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-times' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select FSupplyID,count(distinct FBillNo) as num
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table 
             where UNIX_TIMESTAMP(FDate) > base.begin_time
               and UNIX_TIMESTAMP(FDate) < base.end_time 
               and FCancellation = 1 
               and FTranType = 'PUR'
               group by FSupplyID
           ) as main
        on cus.id = main.FSupplyID
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1013;
	
	-- 累计清运次数
		    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3)
    select det.time_dims, det.time_val,det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1,
           det.m1 as val1,det.m2 as val2,((case when det.m2 = 0 then 0 else round((det.m1 - det.m2)/det.m2,4) end) * 100) as val3
      from (select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
                   cus.id as data_val, base.stat_code, base.group1,
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < base.end_time and FSupplyID = cus.id),0) as m1, 
                   ifnull((select count(distinct FBillNo) from Trans_main_table where FCancellation = 1 and FTranType = 'PUR' and UNIX_TIMESTAMP(FDate) > 1546272000 
                      and UNIX_TIMESTAMP(FDate) < (base.begin_time - 1) and FSupplyID = cus.id),0) as m2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'cumulative-service-times' as group1
                   ) as base,
                   uct_waste_customer as cus 
         left join (select * 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table 
                     where UNIX_TIMESTAMP(FDate) > base.begin_time
                       and UNIX_TIMESTAMP(FDate) < base.end_time 
                       and FCancellation = 1 
                       and FTranType = 'PUR') as main
                on cus.id = main.FSupplyID 
             where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
						
	set errno=1014;		
	
	
	
  -- 订单响应时间--最快响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1016;
	
	-- 订单响应时间--平均响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1017;
	
	-- 订单响应时间--最慢响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tallot-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1018;
	
	-- 订单响应时间--计划响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'order-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tallot-oldLog.Tcreate)+((MAX(oldLog.Tallot-oldLog.Tcreate)+
                                             MIN(oldLog.Tallot-oldLog.Tcreate)+4*AVG(oldLog.Tallot-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1019;
	
	-- 清运响应时间--最快响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'fastest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MIN(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1020;
	
	-- 清运响应时间--平均响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'average-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(AVG(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1021;
	
	-- 清运响应时间--最慢响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1)      
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'slowest-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round(MAX(oldLog.Tpurchase-oldLog.Tcreate)/3600,2) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1022;
	
	-- 清运响应时间--计划响应时间
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'disposal-response-time' as group1,
                   'plan-resp-time' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, round((AVG(oldLog.Tpurchase-oldLog.Tcreate)+((MAX(oldLog.Tpurchase-oldLog.Tcreate)+
                                             MIN(oldLog.Tpurchase-oldLog.Tcreate)+4*AVG(oldLog.Tpurchase-oldLog.Tcreate))/3))/3600,1) as val1
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_log_table as oldLog
                on oldMain.FInterID = oldLog.FinterID and oldMain.FTranType = oldLog.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldLog.TallotOver = 1
            group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1023;
	
	-- 品类排名
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, txt1, val1, val2)  
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  
           ifnull(main.name,'无品名') as txt1, ifnull(main.money,0) as val1, ifnull(main.weight,0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'revenue-by-waste-cate' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, cate.name, sum(oldAssist.FAmount) as money, sum(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
         left join uct_waste_cate as cate
                on oldAssist.FItemID = cate.id
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FTranType = 'PUR'  
               and oldAssist.value_type = 'valuable'
             group by oldMain.FSupplyID, cate.name
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id, main.name;
		 
	set errno=1024;	
	
  -- 品类排名-更新金额排名
	UPDATE lh_dw.data_statistics_results as a
            INNER JOIN (SELECT main.id, main.data_val, main.val1, CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                               @curGroup:= main.data_val,@preAge:= main.val1
                          FROM (select @curGroup :=0,
                                       @preAge :=0,
                                       @row :=0,
                                       'revenue-by-waste-cate' as group1,
                                       DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                       '客户' as data_dims
                               ) as base,
                               lh_dw.data_statistics_results as main
                         WHERE main.group1 = base.group1
                           AND main.time_val = base.time_val
                           AND main.data_dims = base.data_dims
                      ORDER BY main.data_val ASC, main.val1 DESC
                       ) b 
               ON a.id=b.id
        SET a.val3=b.urank;
				
	set errno=1025;	
	
	-- 品类排名-更新重量排名
	UPDATE lh_dw.data_statistics_results as a
          INNER JOIN (SELECT main.id, main.data_val, main.val2, 
                              CASE WHEN @curGroup=main.data_val THEN @row := @row + 1 WHEN @curGroup<>main.data_val THEN @row:=1 END urank,
                              @curGroup:= main.data_val,@preAge:= main.val2
                         FROM (select @curGroup :=0,
                                        @preAge :=0,
                                        @row :=0,
                                        'revenue-by-waste-cate' as group1,
                                        DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                        '客户' as data_dims
                              ) as base,
                              lh_dw.data_statistics_results as main
                    WHERE main.group1 = base.group1
                         AND main.time_val = base.time_val
                         AND main.data_dims = base.data_dims
                    ORDER BY main.data_val ASC, main.val2 DESC
                    ) b 
               ON a.id=b.id
        SET a.val4=b.urank;
				
	set errno=1026;	
	
	-- 采购重量
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2, val3) 
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'purchase-weight' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(if(oldAssist.value_type in ('valuable','unvaluable'),oldAssist.FQty,0)) as m1,
                   SUM(if(oldAssist.value_type = 'valuable',oldAssist.FQty,0)) as m2,
                   SUM(if(oldAssist.value_type = 'unvaluable',oldAssist.FQty,0)) as m3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FTranType = 'PUR'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
			
	set errno=1027;	
	
	-- 入库分析
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2, val3, val4, val5)
    select base.time_dims, base.time_val,FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time, base.data_dims, 
           cus.id as data_val, base.stat_code, base.group1, ifnull(m1,0) as val1, ifnull(m2,0) as val2, ifnull(m3,0) as val3,
           ifnull(m4,0) as val4, ifnull(m5,0) as val5
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'inventory-analysis' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID,
                   SUM(oldAssist.FAmount) as m1,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FAmount,0)) as m2,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FAmount,0)) as m3,
                   SUM(if(oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'sorting',oldAssist.FQty,0)) as m4,
                   SUM(if(((oldAssist.FTranType = 'SOR' and oldAssist.disposal_way = 'weighing') or (oldAssist.FTranType = 'SEL')),oldAssist.FQty,0)) as m5
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType 
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1 
               and oldMain.FCorrent = 1
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
		 
	set errno=1028;	
	
  -- 雷达图--分拣成本
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,  
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                 and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                 and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, 
                    (case when inv.val1 = 0 then 0 else round((inv.val4/inv.val1),3) end) as val2,
                    (case when inv.val4 = 0 then 0 else round((inv.val2/inv.val4),3) end) as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'sorting-cost' as group2
                   ) as base,
                   uct_waste_customer as cus
         left join (select rest.data_val,  
                           sum((case when rest.group1 = 'inventory-analysis' then rest.val4 else 0 end)) as val4,
                           sum((case when rest.group1 = 'inventory-analysis' then rest.val2 else 0 end)) as val2, 
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                           ) as base,
                           lh_dw.data_statistics_results as rest 
                     where rest.time_val = base.time_val
                       and rest.time_dims = 'M'
                       and rest.group1 in ('inventory-analysis','weight')
                       group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
										 
	set errno=1029;	
	
	-- 雷达图--互信指数
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'first_order_time' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'month_output' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3  
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                    round((base.end_time - inv.m1)/86400,3) as val2, inv.m2 as val3
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'trust-index' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val, 
                           sum((case when rest.group1 = 'first-service-time' then UNIX_TIMESTAMP(rest.txt1) else 0 end)) as m1, 
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as m2
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                           ) as base,
                           lh_dw.data_statistics_results as rest 
                     where rest.time_val = base.time_val
                       and rest.time_dims = 'M'
                       and rest.group1 in ('first-service-time','weight')
                      group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
										 
	set errno=1030;
	
	-- 雷达图--服务时效
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'service-effect' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((case when inv.m2 = 0 then 0 else round(inv.m1/inv.m2,3) end),0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'service-effect' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select E.FSupplyID, ifnull(SUM(G.sign_out_time-G.sign_in_time),0) as m1, ifnull(count(E.FCancellation),0) as m2 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time     
                           ) as base,
                           Trans_main_table as E 
                 left join uct_waste_purchase as F 
                        on E.FBillNo = F.order_id 
                 left join uct_purchase_sign_in_out as G 
                        on F.id = G.purchase_id 
                     where E.FCancellation = 1 
                       and UNIX_TIMESTAMP(E.FDate) > base.begin_time 
                       and UNIX_TIMESTAMP(E.FDate) < base.end_time 
                       and E.FTranType = 'PUR' 
                       and G.sign_in_time > 0 
                       and G.sign_out_time > 0  
                     group by E.FSupplyID
                   ) as inv
                on cus.id = inv.FSupplyID 
             where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
								
	set errno=1031;		
	
	-- 雷达图--满载率
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2)
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'load-factor' 
               and start_value <= det.val2 and end_value > det.val2) as val1, det.val2 
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   (case when inv.m2 = 0 then 0 else round((inv.m1/inv.m2),2) end) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'load-factor' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val,
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as m1,
                           sum((case when rest.group1 = 'service-times' then rest.val1 else 0 end)) as m2 
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val     
                           ) as base,
                           lh_dw.data_statistics_results as rest
                     where rest.time_dims = 'M'
                       and rest.time_val = base.time_val
                       and rest.group1 in ('service-times','weight')   
                     group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
             GROUP BY cus.id       
           ) as det;
							 
	set errno=1032;	
	
	-- 雷达图--废弃物结构
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2, val3)    
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           ((select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'sorting_accounted' 
                and start_value <= det.val2 and end_value > det.val2) + 
            (select (case when det.val3 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where vice_code = 'the_unit_price' 
                and start_value <= det.val3 and end_value > det.val3)
           ) as val1, det.val2, det.val3
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull((case when inv.m1 = 0 then 0  else round((inv.m4/inv.m1),3) end),0) as val2,
                   ifnull((case when inv.m2 = 0 then 0  else round((inv.m3/inv.m2),3) end),0) as val3 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'waste-structure' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val, 
                           sum((case when rest.group1 = 'weight' then rest.val1  else 0 end)) as m1,
                           sum((case when rest.group1 = 'purchase-weight' then rest.val1 else 0 end)) as m2,
                           sum((case when rest.group1 = 'purchase-weight' then rest.val2 else 0 end)) as m3,
                           sum((case when rest.group1 = 'purchase-weight' then rest.val3 else 0 end)) as m4
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val 
                           ) as base,
                           lh_dw.data_statistics_results as rest
                     where rest.time_dims = 'M' 
                       and rest.time_val = base.time_val
                       and rest.group1 in ('purchase-weight','weight') 
                     group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
	set errno=1033;	
	
	-- 雷达图--同行比较
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2,  val1, val2) 
    select det.time_dims, det.time_val, det.begin_time, det.end_time, det.data_dims, det.data_val, det.stat_code, det.group1, det.group2,
           (select (case when det.val2 = 0 then 0 else output_value end) from lh_dw.data_statistics_value_interval where main_code = 'industry-ranking' 
               and start_value <= det.val2 and end_value >= det.val2) as val1, det.val2
      from (select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
                   base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
                   ifnull(inv.num,0) as val2
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                           'M' as time_dims, 
                           '客户' as data_dims,
                           'customer-monthly-report' as stat_code,
                           'customer-index' as group1,
                           'industry-ranking' as group2
                   ) as base,
                   uct_waste_customer as cus 
         left join (select rest.data_val,SUM(rest.val1) as num
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val 
                           ) as base,
                           lh_dw.data_statistics_results as rest
                     where rest.time_dims = 'M' 
                       and rest.time_val = base.time_val 
                       and rest.group1 = 'customer-index' 
                       and rest.group2 in ('sorting-cost','trust-index','service-effect','load-factor','waste-structure')
                     group by rest.data_val
                   ) as inv
                on cus.id = inv.data_val 
             where cus.customer_type = 'up'
             GROUP BY cus.id
           ) as det;
	set errno=1034;	
	
	-- 雷达图--获取总分数
	   insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1)
   select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
          base.data_dims, rest.data_val as data_val, base.stat_code, base.group1, base.group2,ifnull(SUM(val1),0) as val1
     from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                  UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                  DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                  'M' as time_dims, 
                  '客户' as data_dims,
                  'customer-monthly-report' as stat_code,
                  'customer-index' as group1,
                  'the_overall_score' as group2
          ) as base,
          lh_dw.data_statistics_results as rest 
    where rest.time_dims = base.time_dims
      and rest.time_val = base.time_val
      and rest.group1 = base.group1
    GROUP BY rest.data_val;
						 
	set errno=1035;	
	
	-- 玻、金、塑、纸--	玻璃的重量
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, 0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'weight-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
				
	set errno=1036;
	
	-- 玻、金、塑、纸--	金属的重量
	     insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
     select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
            base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
       from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                    UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                    DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                    'M' as time_dims, 
                    '客户' as data_dims,
                    'customer-monthly-report' as stat_code,
                    'weight-by-waste-class' as group1,
                    'metal' as group2
            ) as base,
            uct_waste_customer as cus 
  left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
               from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                            UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                    ) as base,
                    Trans_main_table as oldMain
          left join Trans_assist_table as oldAssist
                 on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
          left join uct_waste_cate as cate
                 on oldAssist.FItemID = cate.id
              where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                and oldMain.FCancellation = 1
                and oldMain.FCorrent = 1  
                and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                and cate.top_class = 'metal'
                group by oldMain.FSupplyID
            ) as main
         on cus.id = main.FSupplyID 
      where cus.customer_type = 'up'
      GROUP BY cus.id;
					
	set errno=1037;
	
	-- 玻、金、塑、纸--	塑料的重量
	       insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
      select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
             base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
        from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                     'M' as time_dims, 
                     '客户' as data_dims,
                     'customer-monthly-report' as stat_code,
                     'weight-by-waste-class' as group1,
                     'plastic' as group2
             ) as base,
             uct_waste_customer as cus 
   left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                     ) as base,
                     Trans_main_table as oldMain
           left join Trans_assist_table as oldAssist
                  on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
           left join uct_waste_cate as cate
                  on oldAssist.FItemID = cate.id
               where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                 and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                 and oldMain.FCancellation = 1
                 and oldMain.FCorrent = 1  
                 and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                 and cate.top_class = 'plastic'
                 group by oldMain.FSupplyID
             ) as main
          on cus.id = main.FSupplyID 
       where cus.customer_type = 'up'
       GROUP BY cus.id;
				
	set errno=1038;
	-- 玻、金、塑、纸--	纸类的重量
	       insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
       select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
              base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.weight,0) as val1
         from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                      UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                      DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                      'M' as time_dims, 
                      '客户' as data_dims,
                      'customer-monthly-report' as stat_code,
                      'weight-by-waste-class' as group1,
                      'waste-paper' as group2
              ) as base,
              uct_waste_customer as cus 
    left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
                 from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                              UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                      ) as base,
                      Trans_main_table as oldMain
            left join Trans_assist_table as oldAssist
                   on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
            left join uct_waste_cate as cate
                   on oldAssist.FItemID = cate.id
                where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
                  and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
                  and oldMain.FCancellation = 1
                  and oldMain.FCorrent = 1  
                  and ((oldMain.FTranType = 'SOR') or (oldMain.FTranType = 'SEL' and oldMain.FSaleStyle = 1))
                  and cate.top_class = 'waste-paper'
                  group by oldMain.FSupplyID
              ) as main
           on cus.id = main.FSupplyID 
        where cus.customer_type	= 'up'
        GROUP BY cus.id;
					
	set errno=1039;				
	-- 玻、金、塑、纸--	重量占比
	update lh_dw.data_statistics_results as main,
           (select A.id,A.data_val,A.val1,B.weight,(case when B.weight = 0 then 0 else round((A.val1/B.weight),4) end) as rate,
                   B.time_val,B.time_dims,B.group1
              from lh_dw.data_statistics_results as A
         left join (select data_val,SUM(val1) as weight,base.time_val,base.time_dims,base.group1  
                      from lh_dw.data_statistics_results as C,
                           (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                                   'M' as time_dims, 
                                   'weight-by-waste-class' as group1
                           ) as base 
                     where C.time_dims = base.time_dims 
                       and C.time_val = base.time_val 
                       and C.group1 = base.group1 
                     group by C.data_val
                   ) as B
                on A.data_val = B.data_val
             where A.time_dims = B.time_dims 
               and A.time_val = B.time_val 
               and A.group1 = B.group1 
             order by  A.data_val
           ) as detail
       set main.val2 = detail.rate * 100
     where main.time_dims = detail.time_dims
       and main.time_val = detail.time_val
       and main.group1 = detail.group1
       and main.id = detail.id;
					
	set errno=1040;
	
	-- 绿币(只算有价的。一吨一个绿币)
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(round((main.weight/1000)*1,1),0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'green-coin' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FQty) as weight
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > 1546272000
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
								 
	set errno=1041;
	
	-- RDF值(只算低值的。一吨4.2)
	     insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1,  val1, val2) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, 
           (round(ifnull(main.m1/1000,0)*4.2,3)) as val1, 
           ifnull((case when main.m2 = 0 then 0 else (round((main.m1 - main.m2)/main.m2,3)) end),0) *100 as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'rdf-value' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select rest.data_val,
                   sum((case when rest.time_val = base.time_val then val1 else 0 end)) as m1,
                   sum((case when rest.time_val = base.time_val2 then val1 else 0 end)) as m2
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2   
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M'
               and rest.group1 = 'weight-by-waste-structure' 
               and rest.group2 = 'low-value-waste'
             group by rest.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
							 
	set errno=1042;
	
	-- 碳减排--低值废弃物
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'low-value-waste' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val, oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results  as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-structure' 
               and oldRes.group2 = 'low-value-waste' 
               group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1043;
	
	-- 碳减排--玻璃
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*0 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'glass' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'glass' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1044;	
	
	-- 碳减排--金属
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*4.77 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'metal' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'metal' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1045;
	
	-- 碳减排--塑料
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*2.37 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'plastic' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'plastic' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1046;	
	
	-- 碳减排--纸类
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2,
           round(ifnull(main.val1,0)/1000,3)*2.51 as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'cers-by-waste-class' as group1,
                   'waste-paper' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select oldRes.data_val,oldRes.val1 
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
                   ) as base,
                   lh_dw.data_statistics_results as oldRes
             where oldRes.time_val = base.time_val 
               and oldRes.time_dims = 'M'
               and oldRes.group1 = 'weight-by-waste-class' 
               and oldRes.group2 = 'waste-paper' 
             group by oldRes.data_val
           ) as main
        on cus.id = main.data_val 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
					
	set errno=1047;
	
	-- 碳减排--总量
      insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1, val2) 
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1,  0 as val1, 0 as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'certified-emission-reduction' as group1
           ) as base,
           uct_waste_customer as cus 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
				
	set errno=1048;	
	
	-- 处置费（低值废弃物的费用）
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, val1)
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, ifnull(main.money,0) as val1
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'lw-disposal-cost' as group1
           ) as base,
           uct_waste_customer as cus 
 left join (select oldMain.FSupplyID, SUM(oldAssist.FAmount) as money
              from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                           UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                   ) as base,
                   Trans_main_table as oldMain
         left join Trans_assist_table as oldAssist
                on oldMain.FInterID = oldAssist.FinterID and oldMain.FTranType = oldAssist.FTranType
             where UNIX_TIMESTAMP(oldMain.FDate) > base.begin_time
               and UNIX_TIMESTAMP(oldMain.FDate) < base.end_time 
               and oldMain.FCancellation = 1
               and oldMain.FCorrent = 1  
               and oldMain.FSaleStyle in (0,1)
               and (oldMain.FTranType = 'SOR' or oldMain.FTranType = 'SEL')  
               and oldAssist.value_type = 'unvaluable'
             group by oldMain.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
								 
	set errno=1049;	
	
	-- 服务消费成本--清运人工费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'disposal-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID
 left join (select rest.data_val, rest.val1 
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M' 
               and rest.time_val = base.time_val2 
               and rest.group1 = 'service-cost' 
               and rest.group2 = 'disposal-cost'
               group by rest.data_val
           ) as last  
        on cus.id = last.data_val 
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	 
	 set errno=1050;
	 
		
	
	-- 服务消费成本--清运运输费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'transport-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'PUR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
 left join (select rest.data_val, rest.val1 
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M' 
               and rest.time_val = base.time_val2 
               and rest.group1 = 'service-cost' 
               and rest.group2 = 'transport-cost'
             group by rest.data_val
           ) as last  
        on cus.id = last.data_val
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	 
	set errno=1052;
	
	
	
	-- 服务消费成本--辅材消耗费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'consumables-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalSecond else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
 left join (select rest.data_val, rest.val1 
             from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                          DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                  ) as base,
                  lh_dw.data_statistics_results as rest
            where rest.time_dims = 'M' 
              and rest.time_val = base.time_val2 
              and rest.group1 = 'service-cost' 
              and rest.group2 = 'consumables-cost'
            group by rest.data_val
           ) as last  
        on cus.id = last.data_val
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	 
	set errno=1054;
	
	
	
	-- 服务消费成本--分拣人工费用
	    insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, group1, group2, val1, val2)    
    select base.time_dims, base.time_val, FROM_UNIXTIME(base.begin_time) as begin_time, FROM_UNIXTIME(base.end_time) as end_time,
           base.data_dims, cus.id as data_val, base.stat_code, base.group1, base.group2, ifnull(main.val1,0) as val1,
           ifnull((main.val1 - last.val1),0) as val2
      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                   DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2,
                   'M' as time_dims, 
                   '客户' as data_dims,
                   'customer-monthly-report' as stat_code,
                   'service-cost' as group1,
                   'sorting-cost' as group2
           ) as base,
           uct_waste_customer as cus 
 left join (select detail.FSupplyID, SUM(detail.val1) as  val1
              from (select oldMain.FBillNo,oldMain.FSupplyID, base.begin_time, base.end_time, 
                           MAX(CASE oldMain.`FTranType` WHEN 'SOR' THEN oldMain.`FDate`
                                                WHEN 'SEL' THEN oldMain.`FDate`
                                                ELSE '1970-01-01 00:00:00'
                                                END) AS maxDate,
                           ifnull(sum(case oldMain.FTranType when 'SOR' then oldMain.TalThird else '0' end),0) as val1
                      from (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(v_new_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                                   UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                           ) as base,
                           Trans_main_table as oldMain
                     where oldMain.FCancellation = 1
                       and oldMain.FCorrent = 1
                     group by oldMain.FBillNo
                    having UNIX_TIMESTAMP(maxDate) > base.begin_time
                       and UNIX_TIMESTAMP(maxDate) < base.end_time
                   ) as detail
             group by detail.FSupplyID
           ) as main
        on cus.id = main.FSupplyID 
 left join (select rest.data_val, rest.val1 
              from (select DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                           DATE_FORMAT(LAST_DAY(DATE_SUB(v_new_day, INTERVAL 2 MONTH)), '%Y-%m') as time_val2
                   ) as base,
                   lh_dw.data_statistics_results as rest
             where rest.time_dims = 'M' 
               and rest.time_val = base.time_val2 
               and rest.group1 = 'service-cost' 
               and rest.group2 = 'sorting-cost'
             group by rest.data_val
           ) as last  
        on cus.id = last.data_val
     where cus.customer_type = 'up'
     GROUP BY cus.id;
	
	set errno=1057;
	
	commit;
	
	if  errno = 1057 then
			set o_rv = 200;
			set o_err = "月报表数据生成成功.";
  end if;
  
  end main_proc;
  
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_operating_check_to_execute
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_operating_check_to_execute`;
delimiter ;;
CREATE PROCEDURE `lh_dw_operating_check_to_execute`()
BEGIN
	declare v_id           											   int;
	declare v_pre_tasks           								 varchar(100);
	declare v_exec_way           									 varchar(20);
	declare v_exec_alg           									 varchar(10000);
	declare v_err_logs           									 varchar(200);
	declare o_rv           								 				 int;
	declare o_err           									     varchar(100);
	declare v_exec_state           								 int;
	declare sqlUp           									     varchar(800);
	declare sqlStr           									   	 varchar(800);
	declare v_sql           									   	 varchar(800);
	declare v_sql_str           									 varchar(800);
	declare statu           							         varchar(20);
	declare v_filed           							       varchar(20);
	declare v_status           							 			 int;
	declare v_res_exec_state           						 int;
	declare v_res_err_logs           							 varchar(200);
	declare errno           											 int;
	declare v_exec_code                            varchar(300);
	declare v_count_num                            int;
	declare v_log_type                             varchar(30);
	declare v_res_exec_type                        varchar(30);
	
	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
	DECLARE report CURSOR FOR select id,pre_tasks,exec_way,exec_alg,err_logs,exec_state,code from lh_dw.data_statistics_execution where UNIX_TIMESTAMP(exec_time) <= UNIX_TIMESTAMP(now()) and exec_way = 'sql' and code like 'oper-m-%' and exec_state IN (0,2);
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state,v_exec_code;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	
	while s<>1 do
	-- 执行业务逻辑
				set v_exec_alg = trim(v_exec_alg);
				set v_id = trim(v_id); 

				-- 查询这个是不是在运行中
				select count(*) into v_count_num from lh_dw.data_statistics_execution_log where exec_id = v_id;
				if v_count_num > 0 then
            -- 查询这个是不是在运行中
						select ifnull(exec_type,'waiting') into v_log_type 
						  from lh_dw.data_statistics_execution_log 
						 where exec_id = v_id 
						 order by create_at desc 
						 limit 1;
        end if;

				-- 生成执行的日志
				if v_count_num = 0 or v_log_type = "failed" then
						insert into lh_dw.data_statistics_execution_log (exec_id,exec_code,exec_type)
								 values (v_id, v_exec_code, "waiting");
				end if;

				-- 可以运行的
				if v_count_num = 0 or (v_log_type = "waiting" or v_log_type = "failed") then
					if v_pre_tasks = '' or v_pre_tasks = ' ' or v_pre_tasks = null then
							-- 改变状态
							update lh_dw.data_statistics_execution_log  
								 set exec_type = "operation" 
							 where exec_id = v_id and finish_at is null;
							-- 没有前置的任务就可以直接调用存储过程
							set @o_rv  = '0';
							set @o_err = '';
							call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
							select @o_rv, @o_err;
							if @o_rv = 200 then
									set v_res_exec_state = 1;
									set v_res_err_logs = '';
									set v_res_exec_type = "finish";
							end if;
							if @o_rv = 400 then
									set v_res_exec_state = 2;
									set v_res_err_logs = @o_err;
									set v_res_exec_type = "failed";
							end if;
							update lh_dw.data_statistics_execution  
								 set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
							 where id = v_id;
							 -- 完成后更新状态和完成时间
							update lh_dw.data_statistics_execution_log  
								 set exec_type = v_res_exec_type, finish_at = now() 
							 where exec_id = v_id and finish_at is null;
					else
							-- 有前置任务就进行处理，确认前置任务全部完成后再调用
								select EXP(SUM(LN(if(exec_state = 1,1,2)))) into v_status 
									from lh_dw.data_statistics_execution 
								 where find_in_set(id,v_pre_tasks);
								-- 状态码是1.就可以进行下一步操作了
								if v_status = 1 then
										-- 改变状态
										update lh_dw.data_statistics_execution_log  
											 set exec_type = "operation" 
										 where exec_id = v_id and finish_at is null;
										-- 调用存储过程
										set @o_rv  = '0';
										set @o_err = '';
										call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
										select @o_rv, @o_err;
										if @o_rv = 200 then
													set v_res_exec_state = 1;
													set v_res_err_logs = '';
													set v_res_exec_type = "finish";
										end if;
										if @o_rv = 400 then
													set v_res_exec_state = 2;
													set v_res_err_logs = @o_err;
													set v_res_exec_type = "failed";
										end if;
										update lh_dw.data_statistics_execution  
											 set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
										 where id = v_id;
										 -- 完成后更新状态和完成时间
										update lh_dw.data_statistics_execution_log  
											 set exec_type = v_res_exec_type, finish_at = now() 
										 where exec_id = v_id and finish_at is null;
								end if;
					end if;
				end if;

	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state,v_exec_code;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
	END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_table_check1_to_execute
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_table_check1_to_execute`;
delimiter ;;
CREATE PROCEDURE `lh_dw_table_check1_to_execute`()
BEGIN
	declare v_id           											   int;
	declare v_pre_tasks           								 varchar(32);
	declare v_exec_way           									 varchar(20);
	declare v_exec_alg           									 varchar(10000);
	declare v_err_logs           									 varchar(200);
	declare o_rv           								 				 int;
	declare o_err           									     varchar(100);
	declare v_exec_state           								 int;
	declare sqlUp           									     varchar(800);
	declare sqlStr           									   	 varchar(800);
	declare v_sql           									   	 varchar(800);
	declare v_sql_str           									 varchar(800);
	declare statu           							         varchar(20);
	declare v_filed           							       varchar(20);
	declare v_status           							 			 int;
	declare v_res_exec_state           						 int;
	declare v_res_err_logs           							 varchar(200);
	declare errno           											 int;
	
	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
-- 	DECLARE report CURSOR FOR select id,pre_tasks,exec_way,exec_alg,err_logs,exec_state from lh_dw.data_statistics_execution where UNIX_TIMESTAMP(exec_time) <= UNIX_TIMESTAMP(now()) and exec_state IN (0,2);
	DECLARE report CURSOR FOR select id,pre_tasks,exec_way,exec_alg,err_logs,exec_state from lh_dw.data_statistics_execution where UNIX_TIMESTAMP(exec_time) <= UNIX_TIMESTAMP(now()) and exec_state = 3;
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	
	while s<>1 do
	-- 执行业务逻辑
				set v_exec_alg = trim(v_exec_alg);
				set v_id = trim(v_id); 
				if v_pre_tasks = '' or v_pre_tasks = ' ' or v_pre_tasks = null then
						-- 没有前置的任务就可以直接调用存储过程
						set @o_rv  = '0';
            set @o_err = '';
            call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
            select @o_rv, @o_err;
						if @o_rv = 200 then
								set v_res_exec_state = 1;
								set v_res_err_logs = '';
						end if;
						if @o_rv = 400 then
								set v_res_exec_state = 2;
								set v_res_err_logs = @o_err;
						end if;
						update lh_dw.data_statistics_execution  
						   set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
						 where id = v_id;
				else
						-- 有前置任务就进行处理，确认前置任务全部完成后再调用
							select EXP(SUM(LN(if(exec_state = 1,1,2)))) into v_status 
							  from lh_dw.data_statistics_execution 
							 where find_in_set(id,v_pre_tasks);
							-- 状态码是1.就可以进行下一步操作了
							if v_status = 1 then
									-- 调用存储过程
									set @o_rv  = '0';
									set @o_err = '';
									call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
									select @o_rv, @o_err;
									if @o_rv = 200 then
												set v_res_exec_state = 1;
												set v_res_err_logs = '';
									end if;
									if @o_rv = 400 then
											  set v_res_exec_state = 2;
												set v_res_err_logs = @o_err;
									end if;
									update lh_dw.data_statistics_execution  
										 set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
									 where id = v_id;
							end if;
				end if;
	
	
	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
	END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_table_check_to_execute
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_table_check_to_execute`;
delimiter ;;
CREATE PROCEDURE `lh_dw_table_check_to_execute`()
BEGIN
	declare v_id           											   int;
	declare v_pre_tasks           								 varchar(100);
	declare v_exec_way           									 varchar(20);
	declare v_exec_alg           									 varchar(10000);
	declare v_err_logs           									 varchar(200);
	declare o_rv           								 				 int;
	declare o_err           									     varchar(100);
	declare v_exec_state           								 int;
	declare sqlUp           									     varchar(800);
	declare sqlStr           									   	 varchar(800);
	declare v_sql           									   	 varchar(800);
	declare v_sql_str           									 varchar(800);
	declare statu           							         varchar(20);
	declare v_filed           							       varchar(20);
	declare v_status           							 			 int;
	declare v_res_exec_state           						 int;
	declare v_res_err_logs           							 varchar(200);
	declare errno           											 int;
	declare v_exec_code                            varchar(300);
	declare v_count_num                            int;
	declare v_log_type                             varchar(30);
	declare v_res_exec_type                        varchar(30);
	
	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
	DECLARE report CURSOR FOR select id,pre_tasks,exec_way,exec_alg,err_logs,exec_state,code from lh_dw.data_statistics_execution where UNIX_TIMESTAMP(exec_time) <= UNIX_TIMESTAMP(now()) and exec_way = 'sql' and code like 'cust-m-%' and exec_state IN (0,2);
-- 		DECLARE report CURSOR FOR select id,pre_tasks,exec_way,exec_alg,err_logs,exec_state,`code` from lh_dw.data_statistics_execution where UNIX_TIMESTAMP(exec_time) <= UNIX_TIMESTAMP(now()) and exec_way = 'sql' and code like 'cust-m-%' and  id in (33592,33693,33694,33695);
-- 	 DECLARE report CURSOR FOR select id,pre_tasks,exec_way,exec_alg,err_logs,exec_state from lh_dw.data_statistics_execution where UNIX_TIMESTAMP(exec_time) >= UNIX_TIMESTAMP('2021-08-31 23:59:59') and UNIX_TIMESTAMP(exec_time) <= UNIX_TIMESTAMP(now()) and exec_way = 'sql' and code like 'cust-m-%' and exec_state IN (0,2);
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state,v_exec_code;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	
	while s<>1 do
	-- 执行业务逻辑
				set v_exec_alg = trim(v_exec_alg);
				set v_id = trim(v_id); 

				-- 查询这个是不是在运行中
				select count(*) into v_count_num from lh_dw.data_statistics_execution_log where exec_id = v_id;
				if v_count_num > 0 then
            -- 查询这个是不是在运行中
						select ifnull(exec_type,'waiting') into v_log_type 
						  from lh_dw.data_statistics_execution_log 
						 where exec_id = v_id 
						 order by create_at desc 
						 limit 1;
        end if;

				-- 生成执行的日志
				if v_count_num = 0 or v_log_type = "failed" then
						insert into lh_dw.data_statistics_execution_log (exec_id,exec_code,exec_type)
								 values (v_id, v_exec_code, "waiting");
				end if;

				-- 可以运行的
				if v_count_num = 0 or (v_log_type = "waiting" or v_log_type = "failed") then
					if v_pre_tasks = '' or v_pre_tasks = ' ' or v_pre_tasks = null then
							-- 改变状态
							update lh_dw.data_statistics_execution_log  
								 set exec_type = "operation" 
							 where exec_id = v_id and finish_at is null;
							-- 没有前置的任务就可以直接调用存储过程
							set @o_rv  = '0';
							set @o_err = '';
							call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
							select @o_rv, @o_err;
							if @o_rv = 200 then
									set v_res_exec_state = 1;
									set v_res_err_logs = '';
									set v_res_exec_type = "finish";
							end if;
							if @o_rv = 400 then
									set v_res_exec_state = 2;
									set v_res_err_logs = @o_err;
									set v_res_exec_type = "failed";
							end if;
							update lh_dw.data_statistics_execution  
								 set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
							 where id = v_id;
							 -- 完成后更新状态和完成时间
							update lh_dw.data_statistics_execution_log  
								 set exec_type = v_res_exec_type, finish_at = now() 
							 where exec_id = v_id and finish_at is null;
					else
							-- 有前置任务就进行处理，确认前置任务全部完成后再调用
								select EXP(SUM(LN(if(exec_state = 1,1,2)))) into v_status 
									from lh_dw.data_statistics_execution 
								 where find_in_set(id,v_pre_tasks);
								-- 状态码是1.就可以进行下一步操作了
								if v_status = 1 then
										-- 改变状态
										update lh_dw.data_statistics_execution_log  
											 set exec_type = "operation" 
										 where exec_id = v_id and finish_at is null;
										-- 调用存储过程
										set @o_rv  = '0';
										set @o_err = '';
										call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
										select @o_rv, @o_err;
										if @o_rv = 200 then
													set v_res_exec_state = 1;
													set v_res_err_logs = '';
													set v_res_exec_type = "finish";
										end if;
										if @o_rv = 400 then
													set v_res_exec_state = 2;
													set v_res_err_logs = @o_err;
													set v_res_exec_type = "failed";
										end if;
										update lh_dw.data_statistics_execution  
											 set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
										 where id = v_id;
										 -- 完成后更新状态和完成时间
										update lh_dw.data_statistics_execution_log  
											 set exec_type = v_res_exec_type, finish_at = now() 
										 where exec_id = v_id and finish_at is null;
								end if;
					end if;
				end if;

	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state,v_exec_code;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
	END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_table_data_execution
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_table_data_execution`;
delimiter ;;
CREATE PROCEDURE `lh_dw_table_data_execution`(in p_id    		  integer,
in p_content    varchar(10000),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           											 int;

		DECLARE EXIT HANDLER FOR 1062
		begin
			set o_rv = 400;
			set o_err = 'MySQL error code 1062 invoked';
		end;
		
		DECLARE EXIT HANDLER FOR SQLEXCEPTION 
		begin
			set o_rv = 400;
			set o_err =  'SQLException encountered';
		end;

		DECLARE EXIT HANDLER FOR SQLSTATE '23000' 
		begin
			set o_rv = 400;
			set o_err =  'SQLSTATE 23000 invoked';
		end;

		DECLARE EXIT HANDLER FOR NOT FOUND 
		begin
			set o_rv = 400;
			set o_err =  'NOT FOUND';
		end;

		
		begin
				set o_rv = 400;
				set o_err = '存储过程运行失败';
		end;
	
	
	main_proc:begin
							
-- 		  start transaction;   #开启事物
			set errno=0;
			
-- 				EXECUTE v_sql;
-- 					SET @SQL = CONCAT(v_sql);	
					SET @SQL = p_content;
					PREPARE stmt FROM @SQL;
					EXECUTE stmt;
					DEALLOCATE PREPARE stmt;

      set errno=1;	
-- 			commit;
			 if errno = 1 then
					set o_rv = 200;
					set o_err = "执行成功.";
			end if;
	end main_proc;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_visual_check_to_execute
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_visual_check_to_execute`;
delimiter ;;
CREATE PROCEDURE `lh_dw_visual_check_to_execute`()
BEGIN
	declare v_id           											   int;
	declare v_pre_tasks           								 varchar(100);
	declare v_exec_way           									 varchar(20);
	declare v_exec_alg           									 varchar(10000);
	declare v_err_logs           									 varchar(200);
	declare o_rv           								 				 int;
	declare o_err           									     varchar(100);
	declare v_exec_state           								 int;
	declare sqlUp           									     varchar(800);
	declare sqlStr           									   	 varchar(800);
	declare v_sql           									   	 varchar(800);
	declare v_sql_str           									 varchar(800);
	declare statu           							         varchar(20);
	declare v_filed           							       varchar(20);
	declare v_status           							 			 int;
	declare v_res_exec_state           						 int;
	declare v_res_err_logs           							 varchar(200);
	declare errno           											 int;
	declare v_exec_code                            varchar(300);
	declare v_count_num                            int;
	declare v_log_type                             varchar(30);
	declare v_res_exec_type                        varchar(30);
	
	-- 定义变量
	DECLARE s int DEFAULT 0;

	-- 定义游标，并将sql结果集赋值到游标中
	DECLARE report CURSOR FOR select id,pre_tasks,exec_way,exec_alg,err_logs,exec_state,code from lh_dw.data_statistics_execution where UNIX_TIMESTAMP(exec_time) <= UNIX_TIMESTAMP(now()) and exec_way = 'sql' and code like 'visualization-large-data%' and exec_state IN (0,2);
	-- 声明当游标遍历完后将标志变量置成某个值
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET s=1;
	
	-- 打开游标
	open report;
	-- 将游标中的值赋值给变量，注意：变量名不要和返回的列名同名，变量顺序要和sql结果列的顺序一致
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state,v_exec_code;
	-- 当s不等于1，也就是未遍历完时，会一直循环
	
	while s<>1 do
	-- 执行业务逻辑
				set v_exec_alg = trim(v_exec_alg);
				set v_id = trim(v_id); 

				-- 查询这个是不是在运行中
				select count(*) into v_count_num from lh_dw.data_statistics_execution_log where exec_id = v_id;
				if v_count_num > 0 then
            -- 查询这个是不是在运行中
						select ifnull(exec_type,'waiting') into v_log_type 
						  from lh_dw.data_statistics_execution_log 
						 where exec_id = v_id 
						 order by create_at desc 
						 limit 1;
        end if;

				-- 生成执行的日志
				if v_count_num = 0 or v_log_type = "failed" then
						insert into lh_dw.data_statistics_execution_log (exec_id,exec_code,exec_type)
								 values (v_id, v_exec_code, "waiting");
				end if;

				-- 可以运行的
				if v_count_num = 0 or (v_log_type = "waiting" or v_log_type = "failed") then
					if v_pre_tasks = '' or v_pre_tasks = ' ' or v_pre_tasks = null then
							-- 改变状态
							update lh_dw.data_statistics_execution_log  
								 set exec_type = "operation" 
							 where exec_id = v_id and finish_at is null;
							-- 没有前置的任务就可以直接调用存储过程
							set @o_rv  = '0';
							set @o_err = '';
							call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
							select @o_rv, @o_err;
							if @o_rv = 200 then
									set v_res_exec_state = 1;
									set v_res_err_logs = '';
									set v_res_exec_type = "finish";
							end if;
							if @o_rv = 400 then
									set v_res_exec_state = 2;
									set v_res_err_logs = @o_err;
									set v_res_exec_type = "failed";
							end if;
							update lh_dw.data_statistics_execution  
								 set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
							 where id = v_id;
							 -- 完成后更新状态和完成时间
							update lh_dw.data_statistics_execution_log  
								 set exec_type = v_res_exec_type, finish_at = now() 
							 where exec_id = v_id and finish_at is null;
					else
							-- 有前置任务就进行处理，确认前置任务全部完成后再调用
								select EXP(SUM(LN(if(exec_state = 1,1,2)))) into v_status 
									from lh_dw.data_statistics_execution 
								 where find_in_set(id,v_pre_tasks);
								-- 状态码是1.就可以进行下一步操作了
								if v_status = 1 then
										-- 改变状态
										update lh_dw.data_statistics_execution_log  
											 set exec_type = "operation" 
										 where exec_id = v_id and finish_at is null;
										-- 调用存储过程
										set @o_rv  = '0';
										set @o_err = '';
										call lh_dw_table_data_execution(v_id, v_exec_alg, @o_rv, @o_err);
										select @o_rv, @o_err;
										if @o_rv = 200 then
													set v_res_exec_state = 1;
													set v_res_err_logs = '';
													set v_res_exec_type = "finish";
										end if;
										if @o_rv = 400 then
													set v_res_exec_state = 2;
													set v_res_err_logs = @o_err;
													set v_res_exec_type = "failed";
										end if;
										update lh_dw.data_statistics_execution  
											 set exec_state = v_res_exec_state, err_logs = v_res_err_logs 
										 where id = v_id;
										 -- 完成后更新状态和完成时间
										update lh_dw.data_statistics_execution_log  
											 set exec_type = v_res_exec_type, finish_at = now() 
										 where exec_id = v_id and finish_at is null;
								end if;
					end if;
				end if;

	-- 将游标中的值再赋值给变量，供下次循环使用
	fetch report into v_id,v_pre_tasks,v_exec_way,v_exec_alg,v_err_logs,v_exec_state,v_exec_code;
	-- 当s等于1时表明遍历以完成，退出循环
	end while;
	-- 关闭游标
	close report;
	
	END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_warehouse_day_mysql
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_warehouse_day_mysql`;
delimiter ;;
CREATE PROCEDURE `lh_dw_warehouse_day_mysql`(IN `p_day` varchar(50),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_month_begin   int;
	declare v_month_end     int;
	declare v_month         varchar(20);
	declare v_last_day      varchar(20);
	declare v_before_day    varchar(20);
	declare v_today_day     int;
	declare v_new_day       varchar(20);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "仓库数据生成失败.";
    end;
		
		
main_proc:begin

		select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(now(), INTERVAL 0 MONTH), '%Y-%m-01 00:00:00')),
         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(now(), INTERVAL 0 MONTH)), '%Y-%m-%d 23:59:59')),
         DATE_FORMAT(LAST_DAY(DATE_SUB(now(), INTERVAL 0 MONTH)), '%Y-%m'),
				 DATE_FORMAT(DATE_SUB(now(), INTERVAL 0 MONTH), '%Y-%m-%d'),
				 DATE_FORMAT(LAST_DAY(DATE_SUB(now(), INTERVAL 1 MONTH)), '%Y-%m-%d'),
				 UNIX_TIMESTAMP(CONCAT(p_day,' 12:00:00')) 
				 into v_month_begin,v_month_end,v_month,v_last_day,v_before_day,v_today_day;

	if v_today_day > v_month_end then
				set o_rv = 400;
				set o_err = "不能给定未来的日期";
				leave main_proc;
  end if;          
	if v_today_day < v_month_begin then
				set v_new_day = v_before_day;
  end if;
	if v_month_begin < v_today_day and v_today_day < v_month_end then
				set v_new_day = v_last_day;
  end if;
	
  
	start transaction;
	set errno=1000;
	
	-- 仓库整体数据-- 进-重量 + 进-有价 + 进-低值 + 销-重量 + 销-金额
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, val1, val2, val3, val4, val5) 
      SELECT 'D' as time_dims,baseTime.time_val,FROM_UNIXTIME(baseTime.begin_time) as begin_time, FROM_UNIXTIME(baseTime.end_time) as end_time,
             '分部-仓库' as data_dims,ware.branch_id as data_val,'warehouse-daily-report' as stat_code,'warehouse-weight' as group1,'PUR/SEL' as group2,ware.name as txt1,
             ifnull(detail.totalWeight,0) as val1,ifnull(detail.totalValue,0) as val2,
             ifnull(detail.totalUnvalue,0) as val3,ifnull(selTotal.toatlQty,0) as val4,
             ifnull(selTotal.toatlAmout,0) as val5
        FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time,
                     DATE_SUB(p_day,INTERVAL 1 DAY) as time_val
             ) as baseTime,
             (SELECT *
                FROM uct_waste_warehouse
               WHERE parent_id = 0
                 AND state = 1
             )  AS ware
   LEFT JOIN (SELECT house.branch_id,main.FDCStockID,
                     ROUND(SUM(deat.FQty),3) as totalWeight,
                     ROUND(SUM(case when deat.value_type = 'valuable' then deat.FQty else 0 end),3) as totalValue,
                     ROUND(SUM(case when deat.value_type = 'unvaluable' then deat.FQty else 0 end),3) as totalUnvalue
                FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time
                     ) as base,
                     Trans_assist_table AS deat
           LEFT JOIN Trans_main_table AS main
                  ON deat.FinterID = main.FInterID AND deat.FTranType = main.FTranType
           LEFT JOIN uct_waste_warehouse as house
                  ON SUBSTRING(main.FDCStockID,3) = house.id 
               WHERE main.FCancellation <> 0
                 AND UNIX_TIMESTAMP(deat.FDCTime) BETWEEN base.begin_time AND base.end_time 
                 AND house.parent_id = 0
                 AND house.state = 1
								 AND main.FTranType = 'SOR'
                 group by house.branch_id
             ) as detail
          ON ware.branch_id = detail.branch_id
   LEFT JOIN (SELECT house.branch_id,main.FDCStockID,ROUND(SUM(deat.FQty),3) as toatlQty,
                     ROUND(SUM(deat.FAmount),3) as toatlAmout
                FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time
                     ) as base,
                     Trans_assist_table AS deat
           LEFT JOIN Trans_main_table AS main
                  ON deat.FinterID = main.FInterID AND deat.FTranType = main.FTranType
           LEFT JOIN uct_waste_warehouse as house
                  ON SUBSTRING(main.FSCStockID,3) = house.id 
               WHERE main.FCancellation <> 0
                 AND UNIX_TIMESTAMP(deat.FDCTime) BETWEEN base.begin_time AND base.end_time 
                 AND house.parent_id = 0
                 AND house.state = 1
								 AND main.FTranType = 'SEL' 
								 AND main.FSaleStyle = 2 
								 AND main.FCorrent = 1 
                 group by house.branch_id
             ) as selTotal
          ON ware.branch_id = selTotal.branch_id;
	

	set errno=1001;
	
	-- 仓库整体数据-- 存-重量 + 存-价值
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, val1, val2) 
      SELECT 'D' as time_dims,baseTime.time_val,FROM_UNIXTIME(baseTime.begin_time) as begin_time, FROM_UNIXTIME(baseTime.end_time) as end_time,
             '分部-仓库' as data_dims,ware.branch_id as data_val,'warehouse-daily-report' as stat_code,'warehouse-weight' as group1,'storage' as group2,ware.name as txt1,
             ifnull(detail.FQty,0) as val1,ifnull(detail.Amount,0) as val2
        FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time,
                     DATE_SUB(p_day,INTERVAL 1 DAY) as time_val
             ) as baseTime,
             (SELECT *
                FROM uct_waste_warehouse
               WHERE parent_id = 0
                 AND state = 1
             )  AS ware
   LEFT JOIN (SELECT main.FRelateBrID,ROUND(SUM(main.FQty),3) as FQty,ROUND(SUM(main.FQty*cate.presell_price),3) as Amount
                FROM (SELECT stoC.FRelateBrID AS FRelateBrID,stoC.FItemID AS FItemID, 
                             if(ifnull(unix_timestamp(stodif.FdifTime), '0') > unix_timestamp(v_new_day), ifnull(stodif.FdifQty, 0) - ifnull(SUM(stoiod.FDCQty), 0) + ifnull(SUM(stoiod.FSCQty), 0) + ifnull(SUM(stoiod.FdifQty), 0), ifnull(stodif.FdifQty, 0) + ifnull(SUM(stoiod.FDCQty), 0) - ifnull(SUM(stoiod.FSCQty), 0)) AS FQty
                        FROM Accoding_stock_cate stoC
                   LEFT JOIN Accoding_stock_dif stodif
                          ON stoC.FStockID = stodif.FStockID AND stoC.FItemID = stodif.FItemID
                   LEFT JOIN Accoding_stock_iod stoiod
                          ON (convert(stoC.FStockID USING utf8) = stoiod.FStockID) AND (stoC.FItemID = stoiod.FItemID)
                                AND if(ifnull(unix_timestamp(stodif.FdifTime), '0') > unix_timestamp(v_new_day), unix_timestamp(stoiod.FDCTime) BETWEEN unix_timestamp(v_new_day) + 1 AND ifnull(unix_timestamp(stodif.FdifTime), '0'), unix_timestamp(stoiod.FDCTime) BETWEEN ifnull(unix_timestamp(stodif.FdifTime) + 1, '0') AND unix_timestamp(v_new_day))
                        GROUP BY stoC.FStockID, stoC.FItemID
                     ) AS main
                JOIN uct_waste_cate cate
               WHERE cate.id = main.FItemID
                group by main.FRelateBrID
             ) as detail
          ON ware.branch_id = detail.FRelateBrID;
	
	
	set errno=1002;	
	
	
	-- 仓库整体数据-- 分拣完成的车次
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, val1) 
      SELECT 'D' as time_dims,baseTime.time_val,FROM_UNIXTIME(baseTime.begin_time) as begin_time, FROM_UNIXTIME(baseTime.end_time) as end_time,
             '分部-仓库' as data_dims,ware.branch_id as data_val,'warehouse-daily-report' as stat_code,'warehouse-weight' as group1,'vehicle' as group2,ware.name as txt1,
             ifnull(detail.totalNum,0) as val1
        FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time,
                     DATE_SUB(p_day,INTERVAL 1 DAY) as time_val
             ) as baseTime,
             (SELECT *
                FROM uct_waste_warehouse
               WHERE parent_id = 0
                 AND state = 1
             )  AS ware
   LEFT JOIN (SELECT ware.branch_id,ROUND(SUM(main.FTrainNum),1) as totalNum
                FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time
                     ) as base,
                     Trans_main_table AS main
           LEFT JOIN Trans_log_table AS logt
                  ON main.FInterID = logt.FInterID 
           LEFT JOIN uct_waste_warehouse AS ware
                  ON main.FRelateBrID = ware.branch_id
               WHERE main.FCancellation <> 0
                 AND ware.parent_id = 0
                 AND SUBSTRING(main.FDCStockID,3) = ware.id
                 AND main.FTranType = 'SOR'
                 AND logt.FTranType = 'PUR'
                 AND logt.Tsort BETWEEN base.begin_time AND base.end_time
                 AND main.FSaleStyle = 0
                 AND logt.TsortOver = 1
                group by ware.branch_id
             ) as detail
          ON ware.branch_id = detail.branch_id;



	set errno=1003;
	
	
	-- 分拣组日排名-- 分拣重量 + 过磅重量 + 有价重量 + 低值重量 + 已交接车次 + 已分拣车次
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, val1, val2, val3, val4, val5, val6, val7) 
      SELECT 'D' as time_dims,baseTime.time_val,FROM_UNIXTIME(baseTime.begin_time) as begin_time, FROM_UNIXTIME(baseTime.end_time) as end_time,
             '分部-仓库' as data_dims,warehouse.branch_id as data_val,'warehouse-daily-report' as stat_code,'sorting-group' as group1,'weight' as group2,ifnull(warehouse.name,0) as txt1,
             ifnull(warehouse.toatlQtySort,0) as val1,ifnull(warehouse.toatlQtyWeig,0) as val2,
             ifnull(warehouse.toatlQtyVal,0) as val3,ifnull(warehouse.toatlQtyUnval,0) as val4,
             ifnull(warehouse.handoverNum,0) as val5,ifnull(warehouse.waitSortingNum,0) as val6,ifnull(warehouse.sortingNum,0) as val7
        FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time,
                     DATE_SUB(p_day,INTERVAL 1 DAY) as time_val
             ) as baseTime,
             (SELECT sorting.parent_id,sorting.branch_id,sorting.name,ifnull(detail.toatlQtySort,0) as toatlQtySort,ifnull(detail.toatlQtyWeig,0) as toatlQtyWeig,ifnull(detail.toatlQtyVal,0) as toatlQtyVal,ifnull(detail.toatlQtyUnval,0) as toatlQtyUnval,
                     ifnull(vehicle.handoverNum,0) as handoverNum,ifnull(vehicle.waitSortingNum,0) as waitSortingNum,ifnull(vehicle.sortingNum,0) as sortingNum
                FROM (SELECT * 
                         FROM uct_waste_warehouse
                        WHERE parent_id <> 0
                          AND state = 1
                        group by id
                       order by parent_id ASC
                      ) as sorting
            LEFT JOIN (SELECT ware.id,ware.parent_id,ware.branch_id,ware.name,
                             ROUND(SUM(case when deat.disposal_way = 'sorting' then deat.FQty else 0 end),3) as toatlQtySort,
                             ROUND(SUM(case when deat.disposal_way = 'weighing' then deat.FQty else 0 end),3) as toatlQtyWeig,
                             ROUND(SUM(case when deat.value_type = 'valuable' then deat.FQty else 0 end),3) as toatlQtyVal,
                             ROUND(SUM(case when deat.value_type = 'unvaluable' then deat.FQty else 0 end),3) as toatlQtyUnval
                        FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                                     UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time
                             ) as base,
                             Trans_assist_table AS deat
                   LEFT JOIN Trans_main_table AS main
                          ON deat.FinterID = main.FInterID AND deat.FTranType = main.FTranType
                   LEFT JOIN uct_waste_warehouse AS ware
                          ON main.FBillerID = ware.admin_id
                       WHERE main.FCancellation <> 0
                         AND ware.parent_id <> 0
                         AND deat.FTranType = 'SOR'
                         AND UNIX_TIMESTAMP(deat.FDCTime) BETWEEN base.begin_time AND base.end_time 
                    group by ware.id
                     ) as detail
								  ON sorting.id = detail.id
           LEFT JOIN (SELECT ware.id,ware.parent_id,ware.branch_id,ware.name,
                             ROUND(SUM(case when logt.TchangeOver = 1 AND logt.Tchange BETWEEN base.begin_time AND base.end_time then main.FTrainNum else 0 end),1) as handoverNum,
														 ROUND(SUM(case when logt.TchangeOver = 1 AND logt.TsortOver = 0 then main.FTrainNum else 0 end),1) as waitSortingNum,
                             ROUND(SUM(case when logt.TsortOver = 1 AND logt.Tsort BETWEEN base.begin_time AND base.end_time  then main.FTrainNum else 0 end),1) as sortingNum
                        FROM (select UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 00:00:00')) as begin_time,
                                     UNIX_TIMESTAMP(CONCAT(DATE_SUB(p_day,INTERVAL 1 DAY),' 23:59:59')) as end_time
                             ) as base,
                             Trans_main_table AS main
                   LEFT JOIN Trans_log_table AS logt
                          ON main.FInterID = logt.FInterID 
                   LEFT JOIN uct_waste_warehouse AS ware
                          ON main.FBillerID = ware.admin_id
                       WHERE main.FCancellation <> 0
                         AND ware.parent_id <> 0
                         AND main.FTranType = 'SOR'
                         AND logt.FTranType = 'PUR'
                         AND main.FSaleStyle = 0
                         AND ware.state = 1
                    group by ware.id
                     ) as vehicle
                  ON detail.id = vehicle.id
             ) as warehouse
    ORDER BY warehouse.branch_id,warehouse.toatlQtyVal DESC;

	
	
	set errno=1004;
	
	
	
	commit;
	
	if  errno = 1004 then
			set o_rv = 200;
			set o_err = "仓库数据生成成功.";
  end if;
  
  end main_proc;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lh_dw_warehouse_month_mysql
-- ----------------------------
DROP PROCEDURE IF EXISTS `lh_dw_warehouse_month_mysql`;
delimiter ;;
CREATE PROCEDURE `lh_dw_warehouse_month_mysql`(IN `p_day` varchar(50),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;
	declare v_month_begin   int;
	declare v_month_end     int;
	declare v_month         varchar(20);
	declare v_last_day      varchar(20);
	declare v_before_day    varchar(20);
	declare v_today_day     int;
	declare v_new_day       varchar(20);
  declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = errno;
        set o_err = "仓库月数据生成失败.";
    end;
		
		
main_proc:begin

	select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(now(), INTERVAL 0 MONTH), '%Y-%m-01 00:00:00')),
         UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(now(), INTERVAL 0 MONTH)), '%Y-%m-%d 23:59:59')),
         DATE_FORMAT(LAST_DAY(DATE_SUB(now(), INTERVAL 0 MONTH)), '%Y-%m'),
				 DATE_FORMAT(DATE_SUB(now(), INTERVAL 0 MONTH), '%Y-%m-%d'),
				 DATE_FORMAT(LAST_DAY(DATE_SUB(now(), INTERVAL 1 MONTH)), '%Y-%m-%d'),
				 UNIX_TIMESTAMP(CONCAT(p_day,' 12:00:00')) 
				 into v_month_begin,v_month_end,v_month,v_last_day,v_before_day,v_today_day;

	if v_today_day > v_month_end then
				set o_rv = 400;
				set o_err = "不能给定未来的日期";
				leave main_proc;
  end if;          
	if v_today_day < v_month_begin then
				set v_new_day = v_before_day;
  end if;
	

	if v_month_begin < v_today_day and v_today_day < v_month_end then
				set v_new_day = v_last_day;
  end if;
  
	
         
       
	start transaction;
	set errno=1000;

	-- 仓库整体数据-- 进-重量 + 进-有价 + 进-低值 + 销-重量 + 销-金额--月数据
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, val1, val2, val3, val4, val5) 
      SELECT 'M' as time_dims,baseTime.time_val,FROM_UNIXTIME(baseTime.begin_time) as begin_time, FROM_UNIXTIME(baseTime.end_time) as end_time,
             '分部-仓库' as data_dims,ware.branch_id as data_val,'warehouse-month-report' as stat_code,'warehouse-weight' as group1,'PUR/SEL' as group2,ware.name as txt1,
             ifnull(detail.totalWeight,0) as val1,ifnull(detail.totalValue,0) as val2,
             ifnull(detail.totalUnvalue,0) as val3,ifnull(selTotal.toatlQty,0) as val4,
             ifnull(selTotal.toatlAmout,0) as val5
        FROM (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
             ) as baseTime,
             (SELECT *
                FROM uct_waste_warehouse
               WHERE parent_id = 0
                 AND state = 1
             )  AS ware
   LEFT JOIN (SELECT house.branch_id,main.FDCStockID,
                     ROUND(SUM(deat.FQty),3) as totalWeight,
                     ROUND(SUM(case when deat.value_type = 'valuable' then deat.FQty else 0 end),3) as totalValue,
                     ROUND(SUM(case when deat.value_type = 'unvaluable' then deat.FQty else 0 end),3) as totalUnvalue
                FROM (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                     ) as base,
                     Trans_assist_table AS deat
           LEFT JOIN Trans_main_table AS main
                  ON deat.FinterID = main.FInterID AND deat.FTranType = main.FTranType
           LEFT JOIN uct_waste_warehouse as house
                  ON SUBSTRING(main.FDCStockID,3) = house.id
               WHERE main.FCancellation <> 0
                 AND UNIX_TIMESTAMP(deat.FDCTime) BETWEEN base.begin_time AND base.end_time 
                 AND house.parent_id = 0
                 AND house.state = 1
                 AND main.FTranType = 'SOR'
                 group by house.branch_id
             ) as detail
          ON ware.branch_id = detail.branch_id
   LEFT JOIN (SELECT house.branch_id,main.FDCStockID,ROUND(SUM(deat.FQty),3) as toatlQty,ROUND(SUM(deat.FAmount),3) as toatlAmout
                FROM (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                     ) as base,
                     Trans_assist_table AS deat
           LEFT JOIN Trans_main_table AS main
                  ON deat.FinterID = main.FInterID AND deat.FTranType = main.FTranType
           LEFT JOIN uct_waste_warehouse as house
                  ON SUBSTRING(main.FSCStockID,3) = house.id
               WHERE main.FCancellation <> 0
                 AND UNIX_TIMESTAMP(deat.FDCTime) BETWEEN base.begin_time AND base.end_time 
                 AND house.parent_id = 0
                 AND house.state = 1
                 AND main.FTranType = 'SEL' 
                 AND main.FSaleStyle = 2 
                 AND main.FCorrent = 1
                 group by house.branch_id
             ) as selTotal
          ON ware.branch_id = selTotal.branch_id;

	set errno=1001;

	-- 仓库整体数据-- 存-重量 + 存-价值--月数据
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, val1, val2) 
      SELECT 'M' as time_dims,baseTime.time_val,FROM_UNIXTIME(baseTime.begin_time) as begin_time, FROM_UNIXTIME(baseTime.end_time) as end_time,
             '分部-仓库' as data_dims,ware.branch_id as data_val,'warehouse-month-report' as stat_code,'warehouse-weight' as group1,'storage' as group2,ware.name as txt1,
             ifnull(detail.FQty,0) as val1,ifnull(detail.Amount,0) as val2
        FROM (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
             ) as baseTime,
             (SELECT *
                FROM uct_waste_warehouse
               WHERE parent_id = 0
                 AND state = 1
             )  AS ware
   LEFT JOIN (SELECT main.FRelateBrID,ROUND(SUM(main.FQty),3) as FQty,ROUND(SUM(main.FQty*cate.presell_price),3) as Amount
                FROM (SELECT stoC.FRelateBrID AS FRelateBrID,stoC.FItemID AS FItemID, 
                             if(ifnull(unix_timestamp(stodif.FdifTime), '0') > unix_timestamp(v_new_day), ifnull(stodif.FdifQty, 0) - ifnull(SUM(stoiod.FDCQty), 0) + ifnull(SUM(stoiod.FSCQty), 0) + ifnull(SUM(stoiod.FdifQty), 0), ifnull(stodif.FdifQty, 0) + ifnull(SUM(stoiod.FDCQty), 0) - ifnull(SUM(stoiod.FSCQty), 0)) AS FQty
                        FROM Accoding_stock_cate stoC
                   LEFT JOIN Accoding_stock_dif stodif
                          ON stoC.FStockID = stodif.FStockID AND stoC.FItemID = stodif.FItemID
                   LEFT JOIN Accoding_stock_iod stoiod
                          ON (convert(stoC.FStockID USING utf8) = stoiod.FStockID) AND (stoC.FItemID = stoiod.FItemID)
                                AND if(ifnull(unix_timestamp(stodif.FdifTime), '0') > unix_timestamp(v_new_day), unix_timestamp(stoiod.FDCTime) BETWEEN unix_timestamp(v_new_day) + 1 AND ifnull(unix_timestamp(stodif.FdifTime), '0'), unix_timestamp(stoiod.FDCTime) BETWEEN ifnull(unix_timestamp(stodif.FdifTime) + 1, '0') AND unix_timestamp(v_new_day))
                        GROUP BY stoC.FStockID, stoC.FItemID
                     ) AS main
                JOIN uct_waste_cate cate
               WHERE cate.id = main.FItemID
                group by main.FRelateBrID
             ) as detail
          ON ware.branch_id = detail.FRelateBrID;

	set errno=1002;

	-- 仓库整体数据-- 分拣完成的车次--月数据
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, val1) 
      SELECT 'M' as time_dims,baseTime.time_val,FROM_UNIXTIME(baseTime.begin_time) as begin_time, FROM_UNIXTIME(baseTime.end_time) as end_time,
             '分部-仓库' as data_dims,ware.branch_id as data_val,'warehouse-month-report' as stat_code,'warehouse-weight' as group1,'vehicle' as group2,ware.name as txt1,
             ifnull(detail.totalNum,0) as val1
        FROM (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                     UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                     DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val
             ) as baseTime,
             (SELECT *
                FROM uct_waste_warehouse
               WHERE parent_id = 0
                 AND state = 1
             )  AS ware
   LEFT JOIN (SELECT ware.branch_id,ROUND(SUM(main.FTrainNum),1) as totalNum
                FROM (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time
                     ) as base,
                     Trans_main_table AS main
           LEFT JOIN Trans_log_table AS logt
                  ON main.FInterID = logt.FInterID 
           LEFT JOIN uct_waste_warehouse AS ware
                  ON SUBSTRING(main.FDCStockID,3) = ware.id
               WHERE main.FCancellation <> 0
                 AND ware.parent_id = 0
                 AND main.FTranType = 'SOR'
                 AND logt.FTranType = 'PUR'
                 AND logt.Tsort BETWEEN base.begin_time AND base.end_time
                 AND main.FSaleStyle = 0
                 AND logt.TsortOver = 1
                group by ware.branch_id
             ) as detail
          ON ware.branch_id = detail.branch_id;

	set errno=1003;

	-- 运营分部的入库环比--月数据				
 insert into lh_dw.data_statistics_results (time_dims, time_val, begin_time, end_time, data_dims, data_val, stat_code, 
             group1, group2, txt1, txt2, val1, val2, val3) 
      SELECT 'M' as time_dims,data.time_val,FROM_UNIXTIME(data.begin_time) as begin_time, FROM_UNIXTIME(data.end_time) as end_time,
             '分部-仓库' as data_dims,data.FRelateBrID as data_val,'warehouse-month-report' as stat_code,'warehouse-weight' as group1,'month-receipt' as group2,
             data.name as txt1,data.id as txt2,ROUND(data.toatlQty,3) as val1,ROUND(data.toatlQtyBefore,3) as val2,
             (case when data.toatlQtyBefore = 0 then 0 else ROUND((data.toatlQty - data.toatlQtyBefore)/data.toatlQtyBefore,3) end) as val3
        FROM (SELECT main.FRelateBrID,branch.name,ware.id,base.begin_time,base.end_time,base.time_val,
                     ifnull(SUM(case when UNIX_TIMESTAMP(deat.FDCTime) BETWEEN base.begin_time AND base.end_time then deat.FQty else 0 end),0) as toatlQty,
                     ifnull(SUM(case when UNIX_TIMESTAMP(deat.FDCTime) BETWEEN base.begin_time_before AND base.end_time_before then deat.FQty else 0 end),0) as toatlQtyBefore
                FROM (select UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 1 MONTH), '%Y-%m-01 00:00:00')) as begin_time,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m-%d 23:59:59')) as end_time,
                             DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 1 MONTH)), '%Y-%m') as time_val,
                             UNIX_TIMESTAMP(DATE_FORMAT(DATE_SUB(p_day, INTERVAL 2 MONTH), '%Y-%m-01 00:00:00')) as begin_time_before,
                             UNIX_TIMESTAMP(DATE_FORMAT(LAST_DAY(DATE_SUB(p_day, INTERVAL 2 MONTH)), '%Y-%m-%d 23:59:59')) as end_time_before
                     ) as base,
                     Trans_assist_table AS deat
           LEFT JOIN Trans_main_table AS main
                  ON main.FInterID = deat.FinterID AND main.FTranType = deat.FTranType
           LEFT JOIN uct_waste_warehouse AS ware
                  ON SUBSTRING(main.FDCStockID,3) = ware.id
           LEFT JOIN uct_branch AS branch
                  ON main.FRelateBrID = branch.setting_key
               WHERE main.FCancellation <> 0
                 AND ware.parent_id = 0
                 AND ware.state = 1
                 AND deat.FTranType = 'SOR'
            GROUP BY main.FRelateBrID 
            ORDER BY ware.id ASC
             ) as data
       WHERE data.toatlQty > 0;

	set errno=1004;
	
	commit;
	
	if  errno = 1004 then
			set o_rv = 200;
			set o_err = "仓库月数据生成成功.";
  end if;
  
  end main_proc;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for lvhuan_customer_report_data
-- ----------------------------
DROP PROCEDURE IF EXISTS `lvhuan_customer_report_data`;
delimiter ;;
CREATE PROCEDURE `lvhuan_customer_report_data`(in p_cus_id    varchar(20),
in p_month         varchar(20),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
	declare errno           int;

  declare exit HANDLER for sqlexception
  begin
        rollback;
        select errno;
        set o_rv = 400;
        set o_err = "失败.";
  end;
	
	main_proc:begin
			start transaction;   #开启事物
			set errno=0;
			
			insert into data_statistics_results
                    (time_dims,
                    time_val,
                    data_dims,
                    data_val)
             values ('M',
                    p_month,
                    '客户',
                    p_cus_id);
        set errno=1;
				
				 if  errno = 1 then
            set o_rv = 200;
            set o_err = "成功.";
        end if;
	end main_proc;
END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for one_level_wall_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `one_level_wall_report`;
delimiter ;;
CREATE PROCEDURE `one_level_wall_report`(IN `region_type` varchar(50))
BEGIN 

DECLARE group_field varchar(50);
DECLARE region_where varchar(50);
DECLARE nowdate date DEFAULT NOW();
set nowdate = DATE_FORMAT(date_sub(curdate(),interval 1 day),'%Y-%m-%d');


/*判断区域类型*/
if(region_type = 'area') then       /*区县*/
    set group_field = 'cf.province,cf.city,cf.area';
    set region_where = 'ad.name = cf.area';
elseif(region_type = 'city') then   /*城市*/
    set group_field = 'cf.province,cf.city';
    set region_where = 'ad.name = cf.city';
else                                /*省*/
    set group_field = 'cf.province';
    set region_where = 'ad.name = cf.province';
end if;



set @sql = concat("insert into uct_one_level_day_wall_report(adcode,name,weight,carbon,report_date) select ad.adcode,c3.name,round(sum(FQty),2) as weight , round(sum(FQty*c2.carbon_parm),2) as carbon, '",nowdate,"' as report_date from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-09-30' and date_format(mt2.FDate,'%Y-%m-%d') =  date_format('",nowdate,"','%Y-%m-%d')  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on " ,region_where, " join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   
join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  join  uct_waste_cate c3 on c2.parent_id = c3.id  
where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",group_field,",c3.name order by weight");

prepare stmt1 from @sql;
execute stmt1;
DEALLOCATE PREPARE stmt1;  



set @sql = concat("replace into uct_one_level_accumulate_wall_report(adcode,name,weight,carbon) select ad.adcode,c3.name,round(sum(FQty),2) as weight , round(sum(FQty*c2.carbon_parm),2) as carbon from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-09-30' and date_format(mt2.FDate,'%Y-%m-%d') =  date_format('",nowdate,"','%Y-%m-%d')  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on " ,region_where, " join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   
join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  join  uct_waste_cate c3 on c2.parent_id = c3.id  
where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",group_field,",c3.name order by weight");

prepare stmt2 from @sql;
execute stmt2;
DEALLOCATE PREPARE stmt2;  


END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for operate-daily-report
-- ----------------------------
DROP PROCEDURE IF EXISTS `operate-daily-report`;
delimiter ;;
CREATE PROCEDURE `operate-daily-report`()
begin

declare _test_date DATE default '2020-01-01';

start transaction;

while _test_date < curdate() do


/*入库量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code, 'stock-in' as group1 ,  round(sum(ifnull(mt.TalFQty,0)),2) as val1, round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'stock-in' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*毛利润*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'gross-profit' as group1 ,  
round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1, 
round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) - ifnull(r.val1,0) as val2, 
ifnull(round((round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3 
from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo  right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'gross-profit' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*亏损订单*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,group3,val1) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims , mt2.FEmpID as data_val, 'operate-daily-report' as stat_code, 'order-detail-loss-list' as group1, mt.FBillNo group2, c.name group3,   round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo join uct_waste_customer c on c.id = mt2.FSupplyID 
where  mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   group by mt.FBillNo having  round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) < 0; 

insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,group3,val1) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims , mt2.FEmpID as data_val, 'operate-daily-report' as stat_code , 'order-detail-profit-list' as group1, mt.FBillNo as group2, c.name as group3,   round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo join uct_waste_customer c on c.id = mt2.FSupplyID 
where  mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   group by mt.FBillNo having  round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) > 0; 

/*服务成本 运输成本*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3)  select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'service-cost' as group1 , 'transport-cost' as group2 ,  round(sum(ifnull(mt2.TalSecond,0)),2) as val1, round(sum(ifnull(mt2.TalSecond,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(mt2.TalSecond,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'service-cost' and r.group2 = 'transport-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*服务成本 分拣成本*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'service-cost' as group1, 'sorting-cost' as group2 ,  round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalFrist`,0) ELSE 0 END),2) as val1, round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalFrist`,0) ELSE 0 END),2) - ifnull(r.val1,0) as val2, ifnull(round((round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalFrist`,0) ELSE 0 END),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType = 'SOR'  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'service-cost' and r.group2 = 'sorting-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*服务成本 耗材费用*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'service-cost' as group1 , 'consumables-cost' as group2 ,  round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalSecond`,0) ELSE 0 END),2) as val1, round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalSecond`,0) ELSE 0 END),2) - ifnull(r.val1,0) as val2, ifnull(round((round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalSecond`,0) ELSE 0 END),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3   from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType = 'SOR'  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'service-cost' and r.group2 = 'consumables-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*服务成本 低值处置费用*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'service-cost' as group1 , 'lw-disposal-cost' as group2,  round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) as val1 , round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo  left join Trans_fee_table ft on mt2.FInterID = ft.FInterID and  mt2.FTranType = ft.FTranType and ft.FFeeID = '低值废弃物处理费'  left join  Trans_assist_table at on  at.FInterID = mt.FInterID and at.FTranType = mt.FTranType    and  at.value_type =  'unvaluable'
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType = 'SOR'  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'service-cost' and r.group2 = 'lw-disposal-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*订单数量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'order-count' as group1 ,sum(if(date_format(mt.FDate,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY) and  mt.FCorrent = 1,1,0)) as val1, sum(if(mt2.FCorrent = 0,1,0)) as val2, sum(case date_format(mt2.FDate, '%Y-%m-%d')  when DATE_SUB(_test_date,INTERVAL 1 DAY)  then 1 else 0 end ) as val3  from Trans_main_table mt right join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR'  right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'order-count' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*客户评价 服务效果*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3,val4) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'customer-evaluation' as group1, 'service-result' as group2,  max(ifnull(pe.remove_level_star,0)) as val1,min(ifnull(pe.remove_level_star,0)) as val2,round(avg(ifnull(pe.remove_level_star,0)),2) as val3, ifnull(round(avg(ifnull(pe.remove_level_star,0)) - ifnull(r.val3,0)/ifnull(r.val3,0),2),0) as val4 from uct_waste_purchase_evaluate pe join Trans_main_table mt on  pe.purchase_id = mt.FInterID 
right join lh_dw.data_statistics_results as r on r.data_val = mt.FEmpID and mt.FCancellation = 1 and mt.FSaleStyle != 2 and  mt.FTranType = 'PUR' and FROM_UNIXTIME(pe.createtime,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'customer-evaluation' and r.group2 = 'service-result' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id;

/*客户评价 清运及时*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3,val4) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'customer-evaluation' as group1 , 'service-timely' as group2,  max(ifnull(pe.remove_fast_star,0)) as val1,min(ifnull(pe.remove_fast_star,0)) as val2,round(avg(ifnull(pe.remove_fast_star,0)),2) as val3, ifnull(round(avg(ifnull(pe.remove_fast_star,0)) - ifnull(r.val3,0)/ifnull(r.val3,0),2),0) as val4 from uct_waste_purchase_evaluate pe join Trans_main_table mt on  pe.purchase_id = mt.FInterID 
right join lh_dw.data_statistics_results as r on r.data_val = mt.FEmpID and mt.FCancellation = 1 and mt.FSaleStyle != 2 and  mt.FTranType = 'PUR' and FROM_UNIXTIME(pe.createtime,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'customer-evaluation' and r.group2 = 'service-timely' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id;

/*客户评价 服务态度*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3,val4) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'customer-evaluation' as group1 , 'service-manner' as group2,  max(ifnull(pe.service_attitude_star,0)) as val1,min(ifnull(pe.service_attitude_star,0)) as val2,round(avg(ifnull(pe.service_attitude_star,0)),2) val3, ifnull(round(avg(ifnull(pe.service_attitude_star,0)) - ifnull(r.val3,0)/ifnull(r.val3,0),2),0) as val4 from uct_waste_purchase_evaluate pe join Trans_main_table mt on  pe.purchase_id = mt.FInterID 
right join lh_dw.data_statistics_results as r on r.data_val = mt.FEmpID and mt.FCancellation = 1 and mt.FSaleStyle != 2 and  mt.FTranType = 'PUR' and FROM_UNIXTIME(pe.createtime,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'customer-evaluation' and r.group2 = 'service-manner' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id;

/*订单详情 粒度为客企服专员*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,group3,txt1,val1,val2,val3,val4,val5,val6,val7)select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims , mt2.FEmpID as data_val, 'operate-daily-report' as stat_code, 'order-detail-list' as group1, mt.FBillNo as group2, c.customer_code group3, c.name as txt1, round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1,round(sum(ifnull(mt.TalFQty,0)),2) as val2,  round(sum(ifnull(at.FQty,0)),2) as val3,round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) as val4 , ifnull(remove_fast_star,0) as val5 , ifnull(remove_level_star,0) as val6, ifnull(service_attitude_star,0) as val7  from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo join uct_waste_customer c on c.id = mt2.FSupplyID  left join Trans_fee_table ft on mt2.FInterID = ft.FInterID and  mt2.FTranType = ft.FTranType and ft.FFeeID = '低值废弃物处理费'  left join  Trans_assist_table at on  at.FInterID = mt.FInterID and at.FTranType = mt.FTranType    and  at.value_type =  'unvaluable'  left join uct_waste_purchase_evaluate pe on pe.purchase_id = mt2.FInterID 
where  mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   group by mt.FBillNo;


/*运营分析 运输成本*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'operate-analyse' as group1, 'transport-cost' as group2 , ifnull(round(sum(ifnull(mt2.TalSecond,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3),0) as val1, ifnull(round(sum(ifnull(mt2.TalSecond,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3) - ifnull(r.val1,0),0) as val2, ifnull(round((round(sum(ifnull(mt2.TalSecond,0)) / sum(ifnull(mt2.TalFQty,0) * 1000),3) - ifnull(r.val1,0))/ifnull(r.val1,0),3),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType = 'SOR'  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'operate-analyse' and r.group2 = 'transport-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*运营分析 分拣成本*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'operate-analyse' as group1, 'sorting-cost' as group2 , ifnull(round(sum(ifnull(mt.TalFrist,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3),0) as val1, ifnull(round(sum(ifnull(mt.TalFrist,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3) - ifnull(r.val1,0),0) as val2, ifnull(round((round(sum(ifnull(mt.TalFrist,0)) / sum(ifnull(mt2.TalFQty,0) * 1000),3) - ifnull(r.val1,0))/ifnull(r.val1,0),3),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'operate-analyse' and r.group2 = 'sorting-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*运营分析 耗材费用*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'operate-analyse' as group1 , 'consumables-cost' as group2 , ifnull(round(sum(ifnull(mt.TalSecond,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3),0) as val1, ifnull(round(sum(ifnull(mt.TalSecond,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3) - ifnull(r.val1,0),0), ifnull(round((round(sum(ifnull(mt.TalSecond,0)) / sum(ifnull(mt2.TalFQty,0) * 1000),3) - ifnull(r.val1,0))/ifnull(r.val1,0),3),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'operate-analyse' and r.group2 = 'consumables-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

/*运营分析 低值处置费用*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'operate-daily-report' as stat_code , 'operate-analyse' as group1 , 'lw-disposal-cost' as group2,  ifnull(round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3),0) as val1, round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)) / sum(ifnull(mt2.TalFQty,0)) * 1000,3) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo  left join Trans_fee_table ft on mt2.FInterID = ft.FInterID and  mt2.FTranType = ft.FTranType and ft.FFeeID = '低值废弃物处理费'  left join  Trans_assist_table at on  at.FInterID = mt.FInterID and at.FTranType = mt.FTranType    and  at.value_type =  'unvaluable'
right join lh_dw.data_statistics_results as r on r.data_val = mt2.FEmpID and mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'operate-daily-report' and  r.group1 = 'operate-analyse' and r.group2 = 'lw-disposal-cost' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id; 

set _test_date = date_add(_test_date,interval 1 day);
end while;

commit;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for operate-daily-report-v1
-- ----------------------------
DROP PROCEDURE IF EXISTS `operate-daily-report-v1`;
delimiter ;;
CREATE PROCEDURE `operate-daily-report-v1`()
begin

declare _test_date DATE default '2020-01-01';

start transaction;

while _test_date < curdate() do

/*入库量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code, 'stock-in'  as group1,  round(sum(ifnull(mt.TalFQty,0)),2) as val1, round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = concat(mt.FRelateBrID,'-',mt.FDeptID) and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle in('0','1','3') and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'stock-in'   group by  bs.key;

/*毛利润*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code , 'gross-profit' as group1 , 
round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1, 
round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) - ifnull(r.val1,0) as val2, 
ifnull(round((round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3  
from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo right join lh_dw.data_statistics_results as r on r.data_val = concat(mt.FRelateBrID,'-',mt.FDeptID) and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'gross-profit'   group by  bs.key;

/*服务成本 运输成本*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code , 'service-cost' as group1 , 'transport-cost' as group2 ,  round(sum(ifnull(mt2.TalSecond,0)),2) as val1, round(sum(ifnull(mt2.TalSecond,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(mt2.TalSecond,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3  from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = concat(mt.FRelateBrID,'-',mt.FDeptID) and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'service-cost' and r.group2 = 'transport-cost'   group by  bs.key;

/*服务成本 分拣成本*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code , 'service-cost' as group1, 'sorting-cost' as group2,  round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalFrist`,0) ELSE 0 END),2) as val1, round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalFrist`,0) ELSE 0 END),2) - ifnull(r.val1,0) as val2, ifnull(round((round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalFrist`,0) ELSE 0 END),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = concat(mt.FRelateBrID,'-',mt.FDeptID) and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType = 'SOR'  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'service-cost' and r.group2 = 'sorting-cost'   group by  bs.key;

/*服务成本 耗材费用*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code , 'service-cost' as group1, 'consumables-cost' as group2,  round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalSecond`,0) ELSE 0 END),2) as val1, round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalSecond`,0) ELSE 0 END),2) - ifnull(r.val1,0) as val2, ifnull(round((round(SUM(CASE mt.`FTranType`  WHEN  'SOR' THEN ifnull(mt.`TalSecond`,0) ELSE 0 END),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = concat(mt.FRelateBrID,'-',mt.FDeptID) and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType = 'SOR'  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'service-cost' and r.group2 = 'consumables-cost'   group by  bs.key;

/*服务成本 低废处置费用*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(curdate(),INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code , 'service-cost' as group1, 'lw-disposal-cost' as group2,  round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) as val1, round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0) as val3 from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo  left join Trans_fee_table ft on mt2.FInterID = ft.FInterID and  mt2.FTranType = ft.FTranType and ft.FFeeID = '低值废弃物处理费'  left join  Trans_assist_table at on  at.FInterID = mt.FInterID and at.FTranType = mt.FTranType    and  at.value_type =  'unvaluable'
right join lh_dw.data_statistics_results as r on r.data_val = concat(mt.FRelateBrID,'-',mt.FDeptID) and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType = 'SOR'  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'service-cost' and r.group2 = 'lw-disposal-cost'   group by  bs.key;

/*订单数量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code , 'order-count' as group1,sum(if(date_format(mt.FDate,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY) and  mt.FCorrent = 1,1,0)) as val1, sum(if(mt2.FCorrent = 0,1,0)) as val2, sum(case date_format(mt2.FDate, '%Y-%m-%d')  when DATE_SUB(_test_date,INTERVAL 1 DAY)  then 1 else 0 end ) as val3 from Trans_main_table mt right join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo 
right join lh_dw.data_statistics_results as r on r.data_val = concat(mt.FRelateBrID,'-',mt.FDeptID) and mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'order-count'   group by  bs.key;

/*客户数量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, bs.key as data_val , 'operate-daily-report-v1' as stat_code , 'customer-count' as group1, count(c.id) as val1,sum(if(FROM_UNIXTIME(createtime,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY),1,0)) as val2 from uct_waste_customer c
right join lh_dw.data_statistics_results as r on r.data_val = concat(c.branch_id,'-',c.service_department) and c.branch_id is not null and c.service_department is not null and c.state = 'enabled'  right join (select concat(b.setting_key,'-',s.setting_key) as `key` from uct_branch b join uct_waste_settings s on s.group = 'service_department') as bs on bs.key = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部-部门' and r.stat_code = 'operate-daily-report-v1' and r.group1 = 'customer-count'   group by  bs.key;   

/*人员绩效-毛利润/入库量*/ 
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,val3,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,rows.val2 ,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部-部门' as data_dims , concat(a.branch_id,'-',if(ga.group_id = 32,1,2)) as data_val , 'operate-daily-report-v1' as stat_code , 'performance-profit-weight' as group1  ,  a.nickname as group2,
round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1, round(sum(ifnull(mt.TalFQty,0)),2) as val2
from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo   and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)   right join uct_admin a on cast(a.id as char ) = mt2.FEmpID join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id order by concat(a.branch_id,'-',if(ga.group_id = 32,1,2)) , round(sum(ifnull(mt.TalFQty,0)),2) desc ) as rows , (select @rank := 0,@classname := NULL) as rank;

/*人员绩效-客户评价*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,val3,val4,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,rows.val2,rows.val3 ,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部-部门' as data_dims , concat(a.branch_id,'-',if(ga.group_id = 32,1,2)) as data_val , 'operate-daily-report-v1' as stat_code , 'performance-evaluation' as group1 , a.nickname as group2 , round(avg(ifnull(pe.remove_level_star,0)),3) as val1, round(avg(ifnull(pe.remove_fast_star,0)),3) as val2, round(avg(ifnull(pe.service_attitude_star,0)),3) as val3  from uct_waste_purchase_evaluate pe join Trans_main_table mt on  pe.purchase_id = mt.FInterID 
 and mt.FCancellation = '1' and mt.FSaleStyle != '2' and  mt.FTranType = 'PUR' and FROM_UNIXTIME(pe.createtime,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY) right join uct_admin a on cast(a.id as char ) = mt.FEmpID   join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id order by  concat(a.branch_id,'-',if(ga.group_id = 32,1,2)) ,  ifnull(pe.remove_level_star,0)+ifnull(pe.remove_fast_star,0)+ifnull(pe.service_attitude_star,0) desc) as rows , (select @rank := 0,@classname := NULL) as rank;

insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部-部门' as data_dims , concat(a.branch_id,'-',if(ga.group_id = 32,1,2)) as data_val , 'operate-daily-report-v1' as stat_code  , 'performance-loss' as group1 , a.nickname as group2 , round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1  from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo join uct_waste_customer c on c.id = mt2.FSupplyID 
and  mt.FCancellation = 1 and mt.FSaleStyle != 2 and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY) right join uct_admin a on cast(a.id as char ) = mt2.FEmpID join uct_auth_group_access ga on ga.uid = a.id and ga.group_id in(32,36) group by a.id having  round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) < 0 order by concat(a.branch_id,'-',if(ga.group_id = 32,1,2)),round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2)
) as rows , (select @rank := 0,@classname := NULL) as rank;


/*订单详情 粒度为客企服经理*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,group3,txt1,val1,val2,val3,val4,val5,val6,val7) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部-部门' as data_dims, concat(mt2.FRelateBrID,'-',mt2.FDeptID) as data_val, 'operate-daily-report-v1' as stat_code , 'operate-order-detail-profit-list-v1' as group1 , mt.FBillNo as group2, c.customer_code as group3, c.name as txt1, round(SUM(CASE mt.`FTranType`   WHEN 'SOR' THEN   ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) - ifnull(mt.`TalThird`,0)   -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   WHEN 'SEL' THEN    ifnull(mt.`TalFAmount`,0) - ifnull(mt.`TalFrist`,0) - ifnull(mt.`TalSecond`,0) -ifnull(mt2.`TalFAmount`,0) - ifnull(mt2.`TalFrist`,0) - ifnull(mt2.`TalSecond`,0) - ifnull(mt2.`TalThird`,0) - ifnull(mt2.`TalForth`,0)   ELSE '0' END),2) as val1 ,round(sum(ifnull(mt.TalFQty,0)),2) as val2,  round(sum(ifnull(at.FQty,0)),2) as val3 ,round(sum(ifnull(at.FAmount,0) + ifnull(ft.FFeeAmount,0)),2) as val4, ifnull(remove_fast_star,0) as val5, ifnull(remove_level_star,0) as val6, ifnull(service_attitude_star,0) as val7   from Trans_main_table mt join Trans_main_table mt2 on  mt.FBillNo = mt2.FBillNo join uct_waste_customer c on c.id = mt2.FSupplyID  left join Trans_fee_table ft on mt2.FInterID = ft.FInterID and  mt2.FTranType = ft.FTranType and ft.FFeeID = '低值废弃物处理费'  left join  Trans_assist_table at on  at.FInterID = mt.FInterID and at.FTranType = mt.FTranType    and  at.value_type =  'unvaluable'  left join uct_waste_purchase_evaluate pe on pe.purchase_id = mt2.FInterID 
where  mt.FCancellation = '1' and mt.FSaleStyle != '2' and mt.FTranType in ('SOR','SEL')  and  mt2.FTranType = 'PUR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  group by mt.FBillNo;


set _test_date = date_add(_test_date,interval 1 day);
end while;

commit;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for order_cancel
-- ----------------------------
DROP PROCEDURE IF EXISTS `order_cancel`;
delimiter ;;
CREATE PROCEDURE `order_cancel`()
begin

	-- uct_order_cancel表字段
	declare id_field int;
	declare order_id_field int;
	declare order_num_field varchar(50);
	declare type_field varchar(5);
	declare hand_mouth_data_field int;
	declare corrent_field int;
	declare handle_field int;

	-- 订单类型
	declare order_type varchar(10);

	-- 遍历数据结束标志
    DECLARE done INT DEFAULT FALSE;
    -- 待取消处理的订单
	declare order_cancel_cur CURSOR for select id,order_id,order_num,type,hand_mouth_data,corrent,handle from uct_order_cancel where handle = 0;
	-- declare order_purchase_cur CURSOR for select 1,2,3,4,5;  
    -- 将结束标志绑定到游标
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    START TRANSACTION; 
	open order_cancel_cur;
	out_loop:loop
		fetch next from order_cancel_cur into id_field,order_id_field,order_num_field,type_field,hand_mouth_data_field,corrent_field,handle_field; 	
		if done then 
			leave out_loop;
		end if;
		-- select order_id_field,type_field,hand_mouth_data_field,corrent_field,handle_field;

		-- 将该行记录设置为已完成
		update uct_order_cancel set handle = 1 where id = id_field;

		set order_type = 'PUR,SOR';
		if type_field = 'SEL' then
			set order_type = 'SEL';
		end if;

		update Trans_main_table set FCancellation = 0,TalFQty = 0,TalFAmount = 0,TalFrist = 0,TalSecond = 0,TalThird = 0,TalForth =0,TalFeeFifth =0,is_hedge = 1,red_ink_time = now() where FInterID = order_id_field and find_in_set(FTranType,order_type);
		-- select * from Trans_main_table where FInterID = order_id_field and find_in_set(FTranType,type_field);

		-- 判断是否完成订单
-- 		if corrent_field = 1 then
			-- 费用表
			update Trans_fee_table set is_hedge = 1 where FInterID = order_id_field and find_in_set(FTranType,order_type);
			insert into Trans_fee_table  select FInterID,FTranType,Ffeesence,FEntryID,FFeeID,FFeeType,FFeePerson,FFeeExplain,-FFeeAmount,FFeebaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,FPriceRef,FFeetime,now(),is_hedge,revise_state from Trans_fee_table where FInterID = order_id_field and find_in_set(FTranType,order_type);
			-- 辅材表
			update Trans_materiel_table set is_hedge = 1 where FInterID = order_id_field and find_in_set(FTranType,order_type);
			insert into Trans_materiel_table select FInterID,FTranType,FEntryID,FMaterielID,-FUseCount,FPrice,-FMeterielAmount,FMeterieltime,now(),is_hedge,revise_state from Trans_materiel_table where FInterID = order_id_field and find_in_set(FTranType,order_type);
			-- 货物表
			update Trans_assist_table set is_hedge = 1 where FinterID = order_id_field and find_in_set(FTranType,order_type);
			insert into Trans_assist_table select FinterID,FTranType,FEntryID,FItemID,FUnitID,-FQty,FPrice,-FAmount,disposal_way,value_type,FbasePrice,FbaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,FPriceRef,FDCTime,FSourceInterId,FSourceTranType,now(),is_hedge,revise_state from Trans_assist_table where FinterID = order_id_field and find_in_set(FTranType,order_type);
-- 		end if;	


		-- 判断是否还有现买现卖订单
		if hand_mouth_data_field = 1 then
			if type_field = 'PUR' then
				set order_type = 'SEL';
				select order_type;
				select id into order_id_field from uct_waste_sell where order_id = order_num_field;
				select order_id_field;
			else
				set order_type = 'PUR';
				select id into order_id_field from uct_waste_purchase where order_id = order_num_field;
			end if;

			update Trans_main_table set FCancellation = 0,TalFQty = 0,TalFAmount = 0,TalFrist = 0,TalSecond = 0,TalThird = 0,TalForth =0,TalFeeFifth =0,is_hedge = 1,red_ink_time = now() where FInterID = order_id_field and find_in_set(FTranType,order_type);

			if corrent_field = 1 then
				-- 费用表
				update Trans_fee_table set is_hedge = 1 where FInterID = order_id_field and FTranType = order_type; 
				insert into Trans_fee_table  select FInterID,FTranType,Ffeesence,FEntryID,FFeeID,FFeeType,FFeePerson,FFeeExplain,-FFeeAmount,FFeebaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,FPriceRef,FFeetime,now(),is_hedge,revise_state from Trans_fee_table where FInterID = order_id_field and FTranType = order_type;
				-- 辅材表
				update Trans_materiel_table set is_hedge = 1 where FInterID = order_id_field and FTranType = order_type; 
				insert into Trans_materiel_table select FInterID,FTranType,FEntryID,FMaterielID,-FUseCount,FPrice,-FMeterielAmount,FMeterieltime,now(),is_hedge,revise_state from Trans_materiel_table where FInterID = order_id_field and FTranType = order_type;
				-- 货物表
				update Trans_assist_table set is_hedge = 1 where FinterID = order_id_field and FTranType = order_type; 
				insert into Trans_assist_table select FinterID,FTranType,FEntryID,FItemID,FUnitID,-FQty,FPrice,-FAmount,disposal_way,value_type,FbasePrice,FbaseAmount,Ftaxrate,Fbasetax,Fbasetaxamount,FPriceRef,FDCTime,FSourceInterId,FSourceTranType,now(),is_hedge,revise_state from Trans_assist_table where FinterID = order_id_field and FTranType = order_type;
			end if;		
		end if;

	end loop out_loop;	
	commit;
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for province_wall_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `province_wall_report`;
delimiter ;;
CREATE PROCEDURE `province_wall_report`()
BEGIN

DECLARE nowdate date DEFAULT NOW();
set nowdate = DATE_FORMAT(date_sub(curdate(),interval 1 day),'%Y-%m-%d');

/*存入今日数据*/

insert into uct_day_wall_report(adcode,weight,availability,rubbish,rdf,carbon,box,customer_num,report_date) select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num,nowdate as report_date from uct_adcode ad left join 
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-9-30' and date_format(mt2.FDate,'%Y-%m-%d') = DATE_FORMAT(nowdate,'%Y-%m-%d') join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.province    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.province join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-9-30' and date_format(mt.FDate,'%Y-%m-%d') = DATE_FORMAT(nowdate,'%Y-%m-%d')  and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by cf.province order by cf.area ) box  on box.adcode = ad.adcode

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by cf.province order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on up.company_province = ad.name and first_business_time = DATE_FORMAT(nowdate,'%Y-%m-%d') group by company_province) customer on customer.adcode = ad.adcode

where right(ad.adcode,4) = '0000';

/*存入历史数据*/

update uct_accumulate_wall_report report join  (select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num from uct_adcode ad left join
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-9-30'  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.province    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.province join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-9-30' and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by cf.province order by cf.area ) box  on box.adcode = ad.adcode

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by cf.province order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on up.company_province = ad.name  group by company_province) customer on customer.adcode = ad.adcode

where right(ad.adcode,4) = '0000') data on report.adcode = data.adcode  
set  report.weight = data.weight , report.availability = data.availability , report.rubbish = data.rubbish ,report.rdf = data.rdf , report.carbon = data.carbon , report.box = data.box , report.customer_num = data.customer_num ; 

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_allot
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_allot`;
delimiter ;;
CREATE PROCEDURE `pur_allot`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(hand_mouth_data = 1) then  /*现买现卖*/
    call Trans_log_pur_hand(id);
    call Trans_main_pur(id);
elseif(give_frame = 1) then   /*送框流程*/
	call Trans_log_pur_give(id);
    call Trans_main_pur(id);
else                          /*采购回库*/
    call Trans_log_pur(id);
    call Trans_main_pur(id);
end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_apply_materiel
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_apply_materiel`;
delimiter ;;
CREATE PROCEDURE `pur_apply_materiel`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(give_frame = 1) then    /*送框*/
	call Trans_materiel_pur(id);
	call Trans_log_pur_give(id);
	call Trans_main_pur(id);
else                       /*采购订单*/
	call Trans_materiel_pur(id);
	call Trans_log_pur(id);
	call Trans_main_pur(id);

end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_fillin_return_fee
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_fillin_return_fee`;
delimiter ;;
CREATE PROCEDURE `pur_fillin_return_fee`(in `pur_id` int)
begin
    
    declare sel_id int;
    select id into sel_id from uct_waste_sell where purchase_id = pur_id;
	call Trans_fee_rf(pur_id);
	call Trans_log_pur_hand(pur_id);
	call Trans_main_pur(pur_id);
	call Trans_main_sel_hand(sel_id);
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_pick_cargo
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_pick_cargo`;
delimiter ;;
CREATE PROCEDURE `pur_pick_cargo`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(hand_mouth_data = 1) then  /*现买现卖*/
	call Trans_fee_pc(id);
	call Trans_assist_pur(id);
	call Trans_log_pur_hand(id);
	call Trans_main_pur(id);
elseif(give_frame = 1) then   /*送框流程*/
	call Trans_fee_pc(id);
	call Trans_assist_pur(id);
	call Trans_log_pur_give(id);
	call Trans_main_pur(id);
else                          /*采购回库*/
	call Trans_fee_pc(id);
	call Trans_assist_pur(id);
	call Trans_log_pur(id);
	call Trans_main_pur(id);
end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_pick_materiel
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_pick_materiel`;
delimiter ;;
CREATE PROCEDURE `pur_pick_materiel`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(give_frame = 1) then    /*送框*/
	call Trans_materiel_pur(id);
	call Trans_log_pur_give(id);
	call Trans_main_pur(id);
else
	call Trans_materiel_pur(id);
	call Trans_log_pur(id);
	call Trans_main_pur(id);
end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_receive
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_receive`;
delimiter ;;
CREATE PROCEDURE `pur_receive`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(hand_mouth_data = 1) then  /*现买现卖*/
    call Trans_log_pur_hand(id);
    call Trans_main_pur(id);
elseif(give_frame = 1) then   /*送框流程*/
	call Trans_log_pur_give(id);
    call Trans_main_pur(id);
else                          /*采购回库*/
    call Trans_log_pur(id);
    call Trans_main_pur(id);
end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_return_fee_confirm
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_return_fee_confirm`;
delimiter ;;
CREATE PROCEDURE `pur_return_fee_confirm`(in `pur_id` int,in `hand_mouth_data` int,in `give_frame` int)
begin
declare sel_id int;
declare cw_id int;
declare cw_createtime int;

select admin_id,createtime into cw_id,cw_createtime from uct_waste_purchase_log where purchase_id = pur_id and state_value = 'wait_confirm_return_fee';

if(hand_mouth_data = 1) then  /*现买现卖*/
    select id into sel_id from uct_waste_sell where purchase_id = pur_id;
    call Trans_log_pur_hand(pur_id);
    -- call Trans_main_pur(pur_id);
    -- call Trans_main_sel_hand(sel_id);
    /*只更新两个状态值*/
    update Trans_main_table set FStatus = 1 , FNowState = 'finish' , FCheckerID = cw_id , FCheckDate = cw_createtime where FInterID = pur_id and FTranType = 'PUR';  
    update Trans_main_table set FStatus = 1 , FNowState = 'finish' , FCheckerID = cw_id , FCheckDate = cw_createtime where FInterID = sel_id and FTranType = 'SEL';  
else /*采购回库*/
	call Trans_log_pur(pur_id);
	-- call Trans_main_pur(pur_id);
	-- call Trans_main_sor(pur_id);
	/*只更新两个状态值*/
	update Trans_main_table set FStatus = 1 , FNowState = 'finish' , FCheckerID = cw_id , FCheckDate = cw_createtime where FInterID = pur_id and FTranType in ('PUR','SOR');
end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_signin_materiel
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_signin_materiel`;
delimiter ;;
CREATE PROCEDURE `pur_signin_materiel`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(give_frame = 1) then    /*送框*/
	call Trans_log_pur_give(id);
	call Trans_main_pur(id);
else
	call Trans_log_pur(id);
	call Trans_main_pur(id);
end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_storage_confirm
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_storage_confirm`;
delimiter ;;
CREATE PROCEDURE `pur_storage_confirm`(in `id` int)
begin

call Trans_log_pur(id);
call Trans_main_pur(id);
call Trans_main_sor(id);

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_storage_connect
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_storage_connect`;
delimiter ;;
CREATE PROCEDURE `pur_storage_connect`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(give_frame = 1) then    /*送框*/
	call Trans_fee_so(id);
	call Trans_materiel_pur(id);
	call Trans_log_pur_give(id);
	call Trans_main_pur(id);
	call Trans_main_sor(id);
else
	call Trans_fee_so(id);
	call Trans_materiel_pur(id);
	call Trans_log_pur(id);
	call Trans_main_pur(id);
	call Trans_main_sor(id);
end if;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_storage_connect_confirm
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_storage_connect_confirm`;
delimiter ;;
CREATE PROCEDURE `pur_storage_connect_confirm`(in `id` int,in `hand_mouth_data` int,in `give_frame` int)
begin

if(give_frame = 1) then    /*送框*/
	call Trans_fee_rf(id);
	call Trans_log_pur_give(id);
	call Trans_main_pur(id);
	call Trans_main_sor(id);
else                       /*采购订单*/
	call Trans_fee_rf(id);
	call Trans_log_pur(id);
	call Trans_main_pur(id);
	call Trans_main_sor(id);
end if;


end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for pur_storage_sort
-- ----------------------------
DROP PROCEDURE IF EXISTS `pur_storage_sort`;
delimiter ;;
CREATE PROCEDURE `pur_storage_sort`(in `id` int)
begin

call Trans_fee_ss(id);
call Trans_assist_sor(id);
call Trans_materiel_sor(id);
call Trans_log_pur(id);
call Trans_main_pur(id);
call Trans_main_sor(id);

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_accoding_stock_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_accoding_stock_report`;
delimiter ;;
CREATE PROCEDURE `p_accoding_stock_report`()
BEGIN

start transaction;
insert into Accoding_stock_iod_table   select * from Accoding_stock_iod where FDCTime =  DATE_FORMAT(now(),'%Y-%m-%d');
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_constitute_forCustomer_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_constitute_forCustomer_report`;
delimiter ;;
CREATE PROCEDURE `p_constitute_forCustomer_report`()
BEGIN

start transaction;
insert into Trans_constitute_forCustomer_table select * from Trans_constitute_forCustomer;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_forCustomer_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_forCustomer_report`;
delimiter ;;
CREATE PROCEDURE `p_forCustomer_report`()
BEGIN

start transaction;
insert into Trans_forCustomer_table select * from Trans_forCustomer;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_INVforDep_day_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_INVforDep_day_report`;
delimiter ;;
CREATE PROCEDURE `p_INVforDep_day_report`()
BEGIN

start transaction;
delete from Trans_daily_INVforDep_table;
insert into Trans_daily_INVforDep_table select * from Trans_daily_INVforDep;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_INVforDep_month_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_INVforDep_month_report`;
delimiter ;;
CREATE PROCEDURE `p_INVforDep_month_report`()
BEGIN

start transaction;
insert into Trans_month_INVforDep_table select * from Trans_month_INVforDep;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_profit_day_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_profit_day_report`;
delimiter ;;
CREATE PROCEDURE `p_profit_day_report`()
BEGIN

start transaction;
delete from Trans_daily_WH_profit_table;
insert into Trans_daily_WH_profit_table select * from Trans_daily_WH_profit;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_profit_month_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_profit_month_report`;
delimiter ;;
CREATE PROCEDURE `p_profit_month_report`()
BEGIN

start transaction;
insert into Trans_month_WH_profit_table select * from Trans_month_WH_profit;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_purchase_day_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_purchase_day_report`;
delimiter ;;
CREATE PROCEDURE `p_purchase_day_report`()
BEGIN

start transaction;
delete from Trans_daily_SOR_table;
insert into Trans_daily_SOR_table select * from Trans_daily_SOR;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_purchase_month_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_purchase_month_report`;
delimiter ;;
CREATE PROCEDURE `p_purchase_month_report`()
BEGIN

start transaction;
insert into Trans_month_SOR_table select * from Trans_month_SOR;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_sel_day_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_sel_day_report`;
delimiter ;;
CREATE PROCEDURE `p_sel_day_report`()
BEGIN

start transaction;
delete from Trans_daily_SEL_table;
insert into Trans_daily_SEL_table select * from Trans_daily_SEL;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_sel_month_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_sel_month_report`;
delimiter ;;
CREATE PROCEDURE `p_sel_month_report`()
BEGIN

start transaction;
insert into Trans_month_SEL_table select * from Trans_month_SEL;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for p_sel_rank_month_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `p_sel_rank_month_report`;
delimiter ;;
CREATE PROCEDURE `p_sel_rank_month_report`()
BEGIN
start transaction;
insert into Trans_month_SEL_rank_table select * from Trans_month_SEL_rank;
commit;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for region_wall_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `region_wall_report`;
delimiter ;;
CREATE PROCEDURE `region_wall_report`()
BEGIN

DECLARE nowdate date DEFAULT NOW();
set nowdate = DATE_FORMAT(date_sub(curdate(),interval 1 day),'%Y-%m-%d');

/*存入今日数据*/

insert into uct_day_wall_report(adcode,weight,availability,rubbish,rdf,carbon,box,customer_num,report_date) select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num,nowdate as report_date from uct_adcode ad left join 
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-9-30' and date_format(mt2.FDate,'%Y-%m-%d') = DATE_FORMAT(nowdate,'%Y-%m-%d') join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.area    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.area join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-9-30' and date_format(mt.FDate,'%Y-%m-%d') = DATE_FORMAT(nowdate,'%Y-%m-%d')  and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by cf.province,cf.city,cf.area order by cf.area ) box  on box.adcode = ad.adcode   

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by cf.province,cf.city,cf.area order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on up.company_region = ad.name and first_business_time = DATE_FORMAT(nowdate,'%Y-%m-%d') group by company_province,company_city,company_region) customer on customer.adcode = ad.adcode

where right(ad.adcode,4) != '0000' and right(ad.adcode,2) != '00'; 

/*存入历史数据*/

update uct_accumulate_wall_report report join  (select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num from uct_adcode ad left join 
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-9-30'  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.area    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  cf.area join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-9-30' and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by cf.province,cf.city,cf.area order by cf.area ) box  on box.adcode = ad.adcode   

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by cf.province,cf.city,cf.area order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on up.company_region = ad.name  group by company_province,company_city,company_region) customer on customer.adcode = ad.adcode

where right(ad.adcode,4) = '0000' and right(ad.adcode,2) != '00') data on report.adcode = data.adcode  
set  report.weight = data.weight , report.availability = data.availability , report.rubbish = data.rubbish ,report.rdf = data.rdf , report.carbon = data.carbon , report.box = data.box , report.customer_num = data.customer_num ; 


END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sales-daily-report
-- ----------------------------
DROP PROCEDURE IF EXISTS `sales-daily-report`;
delimiter ;;
CREATE PROCEDURE `sales-daily-report`()
begin

declare _test_date DATE default '2020-01-01';

start transaction;

while _test_date < curdate() do

/*出库量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims , b.setting_key as data_val, 'sales-daily-report' as stat_code, 'stock-out' as group1 ,  round(sum(ifnull(mt.TalFQty,0)),2) as val1, round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle = '2' and mt.FTranType = 'SEL'  and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'sales-daily-report' and r.group1 = 'stock-out'   group by  b.setting_key;

/*销售额*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims , b.setting_key as data_val, 'sales-daily-report' as stat_code, 'sales-amount' as group1 ,  round(sum(ifnull(mt.TalFAmount + mt.TalFrist + mt.TalSecond,0)),2) as val1, round(sum(ifnull(mt.TalFAmount + mt.TalFrist + mt.TalSecond,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(mt.TalFAmount + mt.TalFrist + mt.TalSecond,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle = '2' and mt.FTranType = 'SEL'  and mt.Date  = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'sales-daily-report' and r.group1 = 'sales-amount'   group by  b.setting_key;

/*销售计划*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims , b.setting_key as data_val, 'sales-daily-report' as stat_code , 'sales-planning-count' as group1 ,  count(ali.id) as val1 from uct_waste_cate_actual_log as al join uct_waste_cate_actual_log_item as ali on al.id = ali.actual_log_id and al.status = 5 and ali.state = 1 and FROM_UNIXTIME(ali.start_time,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)
right join lh_dw.data_statistics_results as r on r.data_val = al.branch_id  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'sales-daily-report' and r.group1 = 'sales-planning-count'   group by  b.setting_key;

/*销售回库数量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims , b.setting_key as data_val, 'sales-daily-report' as stat_code , 'sales-order-count' as group1 ,  count(mt.FBillNo) as val1 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle = '2' and mt.FTranType = 'SEL'  and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'sales-daily-report' and r.group1 = 'sales-order-count'   group by  b.setting_key;

/*直销数量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims , b.setting_key as data_val, 'sales-daily-report' as stat_code , 'direct-sale-order-count' as group1 ,  count(mt.FBillNo) as val1 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = '1'  and mt.FSaleStyle = '1' and mt.FTranType = 'PUR'  and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'sales-daily-report' and r.group1 = 'direct-sale-order-count'   group by  b.setting_key;

/*客户配合度*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims , b.setting_key as data_val, 'sales-daily-report' as stat_code , 'customer-cooperation' as group1, count(at.FItemID) as val1, count(ali.cate_id) as val2, ifnull(round(count(at.FItemID)/count(ali.cate_id) * 100,2),0) as val3 from  Trans_main_table mt  join Trans_assist_table at on mt.FInterID = at.FinterID and at.FTranType = mt.FTranType and  at.FTranType = 'SEL'  and  mt.FCancellation = 1 and mt.FSaleStyle = 2 and mt.FTranType = 'SEL' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY) right join uct_waste_cate_actual_log_item as ali on ali.cate_id = at.FItemID and ali.customer_id = mt.FSupplyID join uct_waste_cate c on c.id = ali.cate_id  right join uct_branch as b on cast(b.setting_key as char) = c.branch_id and FROM_UNIXTIME(ali.start_time,'%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)  group by  b.setting_key;

/*订单详情*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,group3,txt1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims, mt.FRelateBrID as data_val, 'sales-daily-report' as stat_code, 'sales-order-detail-list' as group1, mt.FBillNo as group2, c.name as group3, case FSaleStyle when '1' then '直销' when '2' then '销售出库' end as txt1, round(sum(ifnull(mt.TalFQty,0)),2) as val1, round(sum(ifnull(mt.TalFAmount + mt.TalFrist + mt.TalSecond,0)),2) as val2, case ev.active when 1 then 1 else 0 end val3 from Trans_main_table mt join uct_waste_customer c on mt.FSupplyID = c.id
and mt.FCancellation = '1' and mt.FCorrent = '1'  and mt.FTranType = 'SEL'  and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  left join uct_waste_sell_evidence_voucher ev  on ev.sell_id = mt.FInterID group by mt.FBillNo;


/*价格变动 涨幅排名*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,val3,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,rows.val2,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val , CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims , c.branch_id as data_val , 'sales-daily-report' as stat_code , 'price-increase' as group1 , c.name as group2 ,round(ifnull(cl.value,0),3) as val1 ,ifnull(round((ifnull(cl.value,0)-ifnull(cl.before_value,0))/ifnull(cl.before_value,0),3) * 100,0) as val2  from uct_waste_cate_log cl join uct_waste_cate c on c.id = cl.cate_id  where cl.createtime between UNIX_TIMESTAMP(_test_date)-60*60*24 and UNIX_TIMESTAMP(_test_date) and round(ifnull(cl.value,0),3) > round(ifnull(cl.before_value,0),3) order by c.branch_id,round((ifnull(cl.value,0)-ifnull(cl.before_value,0))/ifnull(cl.before_value,0),3) * 100 desc) as rows , (select @rank := 0,@classname := NULL) as rank;
/*价格变动 跌幅排名*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,val3,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,rows.val2,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val , CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims , c.branch_id as data_val , 'sales-daily-report' as stat_code , 'price-decline' as group1 , c.name as group2 ,round(ifnull(cl.value,0),3) as val1 ,ifnull(round((ifnull(cl.value,0)-ifnull(cl.before_value,0))/ifnull(cl.before_value,0),3) * 100,0) as val2  from uct_waste_cate_log cl join uct_waste_cate c on c.id = cl.cate_id  where cl.createtime between UNIX_TIMESTAMP(_test_date)-60*60*24 and UNIX_TIMESTAMP(_test_date) and round(ifnull(cl.value,0),3) < round(ifnull(cl.before_value,0),3) order by c.branch_id,round((ifnull(cl.value,0)-ifnull(cl.before_value,0))/ifnull(cl.before_value,0),3) * 100 ) as rows , (select @rank := 0,@classname := NULL) as rank;


set _test_date = date_add(_test_date,interval 1 day);
end while;

commit;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sel_add
-- ----------------------------
DROP PROCEDURE IF EXISTS `sel_add`;
delimiter ;;
CREATE PROCEDURE `sel_add`(in `id` int,in `pur_id` int)
begin

DECLARE move INT DEFAULT 0;

if(pur_id) then /*现买现卖订单*/
    call Trans_fee_sl(id);
	call Trans_assist_sel(id);
	call Trans_materiel_sel(id);
    call Trans_log_pur_hand(pur_id);
	call Trans_main_sel_hand(id);
	call Trans_materiel_pur(pur_id);
else /*销售订单*/
	/*如果是是普通的销售订单 不执行Trans_assist_sel*/
	select `is_move` into move from uct_waste_sell as s where s.id = id;
	if(move = 1) then
		call Trans_assist_sel(id);			
	end if;
	/*call Trans_assist_sel(id);*/
	call Trans_materiel_sel(id);
	call Trans_log_sel(id);
	call Trans_main_sel(id);
end if; 

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sel_commit_order
-- ----------------------------
DROP PROCEDURE IF EXISTS `sel_commit_order`;
delimiter ;;
CREATE PROCEDURE `sel_commit_order`(in `id` int,in `pur_id` int)
begin

call Trans_log_pur_hand(pur_id);
call Trans_main_sel_hand(id);

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sel_confirm_gather
-- ----------------------------
DROP PROCEDURE IF EXISTS `sel_confirm_gather`;
delimiter ;;
CREATE PROCEDURE `sel_confirm_gather`(in `id` int,in `pur_id` int)
begin

if(pur_id) then /*现买现卖订单*/
    call Trans_log_pur_hand(pur_id);
	call Trans_main_sel_hand(id);

	-- 更新状态
    -- call Trans_log_pur_hand(pur_id);
    -- update Trans_main_table set FNowState = 'finish' where FInterID = id and FTranType = 'SEL';

else /*销售订单*/
	-- call Trans_log_sel(id);
	-- call Trans_main_sel(id);

	-- 更新状态
	call Trans_log_sel(id);
	update Trans_main_table set FNowState = 'finish' where FInterID = id and FTranType = 'SEL';
end if; 

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sel_confirm_order
-- ----------------------------
DROP PROCEDURE IF EXISTS `sel_confirm_order`;
delimiter ;;
CREATE PROCEDURE `sel_confirm_order`(in `id` int)
begin

call Trans_log_sel(id);
call Trans_main_sel(id);

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sel_weigh
-- ----------------------------
DROP PROCEDURE IF EXISTS `sel_weigh`;
delimiter ;;
CREATE PROCEDURE `sel_weigh`(in `id` int)
begin


call Trans_materiel_sel(id);
call Trans_assist_sel(id);
call Trans_fee_sl(id);
call Trans_log_sel(id);
call Trans_main_sel(id);

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sorting-daily-report
-- ----------------------------
DROP PROCEDURE IF EXISTS `sorting-daily-report`;
delimiter ;;
CREATE PROCEDURE `sorting-daily-report`()
begin

declare _test_date DATE default '2020-01-01';

start transaction;

while _test_date < curdate() do

insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'sorting-daily-report' as stat_code , 'weight' as group1 ,  round(sum(ifnull(at.FQty,0)),2) as val1, round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_assist_table at join Trans_main_table mt on mt.FInterID = at.FinterID and mt.FTranType = at.FTranType and mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)
right join lh_dw.data_statistics_results as r on  r.data_val = mt.FEmpID  right join uct_admin a on cast(a.id as char) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'sorting-daily-report' and r.group1 = 'weight' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id;

insert into  lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3,val4)  select rows.* ,@rank := @rank + 1  from (select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val, 'sorting-daily-report' as stat_code , 'weight-by-waste-structure' as group1 , 'RW' as group2,  round(sum(ifnull(at.FQty,0)),2) as val1, round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from  Trans_assist_table at join Trans_main_table mt on mt.FInterID = at.FinterID and mt.FTranType = at.FTranType and mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)
right join lh_dw.data_statistics_results as r on  r.data_val = mt.FEmpID and at.value_type = 'valuable'  right join uct_admin a on cast(a.id as char) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'sorting-daily-report' and r.group1 = 'weight-by-waste-structure' and r.group2 = 'RW' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id  order by round(sum(ifnull(at.FQty,0)),2)  desc) as rows , (select @rank := 0) as rank;

insert into  lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3,val4)  select rows.* ,@rank := @rank + 1  from (select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val , 'sorting-daily-report' as stat_code, 'weight-by-waste-structure' as group1, 'LW' as group2,  round(sum(ifnull(at.FQty,0)),2) as val1, round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from  Trans_assist_table at join Trans_main_table mt on mt.FInterID = at.FinterID and mt.FTranType = at.FTranType and mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)
right join lh_dw.data_statistics_results as r on  r.data_val = mt.FEmpID and at.value_type = 'unvaluable'  right join uct_admin a on cast(a.id as char) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'sorting-daily-report' and r.group1 = 'weight-by-waste-structure' and r.group2 = 'LW' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id  order by round(sum(ifnull(at.FQty,0)),2)  desc) as rows , (select @rank := 0) as rank;

insert into  lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3,val4)  select rows.* ,@rank := @rank + 1  from (select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val , 'sorting-daily-report' as stat_code , 'weight-by-waste-sorting' as group1, 'sorting' as group2, round(sum(ifnull(at.FQty,0)),2) as val1, round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from  Trans_assist_table at join Trans_main_table mt on mt.FInterID = at.FinterID and mt.FTranType = at.FTranType and mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)
right join lh_dw.data_statistics_results as r on  r.data_val = mt.FEmpID and at.disposal_way = 'sorting'  right join uct_admin a on cast(a.id as char) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'sorting-daily-report' and r.group1 = 'weight-by-waste-sorting' and r.group2 = 'sorting' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id  order by round(sum(ifnull(at.FQty,0)),2)  desc) as rows , (select @rank := 0) as rank;

insert into  lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3,val4)  select rows.* ,@rank := @rank + 1  from (select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val , 'sorting-daily-report' as stat_code , 'weight-by-waste-sorting' as group1, 'weigh' as group2 ,  round(sum(ifnull(at.FQty,0)),2) as val1 , round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from  Trans_assist_table at join Trans_main_table mt on mt.FInterID = at.FinterID and mt.FTranType = at.FTranType and mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)
right join lh_dw.data_statistics_results as r on  r.data_val = mt.FEmpID and at.disposal_way = 'weighing'  right join uct_admin a on cast(a.id as char) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'sorting-daily-report' and r.group1 = 'weight-by-waste-sorting' and r.group2 = 'weigh' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id  order by round(sum(ifnull(at.FQty,0)),2)  desc) as rows , (select @rank := 0) as rank;

insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val , 'sorting-daily-report' as stat_code , 'commission' as group1,  round(sum(ifnull(mt.TalForth,0)),2) as val1 , round(sum(ifnull(mt.TalForth,0)),2) - ifnull(r.val1,0) as val2 ,  ifnull(round((sum(ifnull(mt.TalForth,0)) - ifnull(r.val1,0)) / ifnull(r.val1,0),2),0)*100 as val3 from  Trans_main_table mt  right join lh_dw.data_statistics_results as r on  r.data_val = mt.FEmpID and mt.FCancellation = '1' and mt.FCorrent = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY) right join uct_admin a on cast(a.id as char) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '角色' and r.stat_code = 'sorting-daily-report' and  r.group1 = 'commission' join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id;  

insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims , d1.admin_id as data_val, 'sorting-daily-report' as stat_code , 'order-count' as group1 , d1.num as val1, d2.num as val2 from 
(select a.id as admin_id, count(lt.FInterID) as num from  Trans_main_table mt join Trans_log_table lt on mt.FInterID = lt.FInterID and lt.TsortOver = '1' and lt.FTranType = 'PUR'  and mt.FCancellation = '1'  and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and from_unixtime(lt.Tsort, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY) right join uct_admin a on a.id = mt.FEmpID  join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id) as d1  
join 
(select a.id as admin_id, count(lt.FInterID) as num from  Trans_main_table mt join Trans_log_table lt on mt.FInterID = lt.FInterID and lt.TsortOver != '1' and lt.FTranType = 'PUR'  and mt.FCancellation = '1'  and mt.FSaleStyle = '0' and mt.FTranType = 'SOR'  right join uct_admin a on a.id = mt.FEmpID  join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id) as d2 
on d1.admin_id = d2.admin_id; 

insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2) 
select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '角色' as data_dims, a.id as data_val , 'sorting-daily-report' as stat_code , 'order-detail-list' as group1 , mt.FBillNo as group2,  sum(if(at.value_type='valuable',at.FQty,0)) as val1, sum(if(at.value_type='unvaluable',at.FQty,0)) val2 from  Trans_assist_table at join Trans_main_table mt on mt.FInterID = at.FinterID and mt.FTranType = at.FTranType and mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)  join uct_admin a on a.id = mt.FEmpID  join uct_waste_customer c on  c.id = mt.FSupplyID  group by mt.FinterID; 


set _test_date = date_add(_test_date,interval 1 day);
end while;

commit;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sorting_end_and_edit
-- ----------------------------
DROP PROCEDURE IF EXISTS `sorting_end_and_edit`;
delimiter ;;
CREATE PROCEDURE `sorting_end_and_edit`(in p_line_id    varchar(20),
in p_po         varchar(20),
out o_rv        integer,
out o_err       varchar(200))
BEGIN
    declare v_id            integer;
    declare v_leader        integer;
    declare v_priority      integer;
    declare v_num           integer;
    declare v_number        integer;
    declare v_pur_id        integer;
    declare v_sub_id        integer;
    declare v_check_id      integer;
    declare v_old_weight    float;
    declare v_old_money     float;
    declare v_now_weight    float;
    declare v_now_money     float;
    declare v_total_weight  float;
    declare v_total_money   float;
    declare v_sort_height   float;
    declare v_sort_low      float;
    declare v_weight_height float;
    declare v_weight_low    float;
    declare v_sort_cargo_price      float;
    declare v_weight_cargo_price    float;
    declare v_sort_labor_price      float;
    declare v_weight_labor_price    float;
    declare v_commission    float;
    declare v_artificial    float;
    declare errno           int;

    declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = 400;
        set o_err = "批次完成处理失败.";
    end;

    main_proc:begin
    
         select  id, leader, priority into v_id, v_leader, v_priority
           from  uct_sorting_jobs
          where  ( status = 'startup' or status = 'waiting' )
            and  line_id = p_line_id
            and  purchase_order_no = p_po
          limit  1;

        if v_id is  null then
            set o_rv = 400;
            set o_err = "获取任务表id失败.";
            leave main_proc;
        end if;

    
        select  count(1) into v_sub_id
          from  uct_sorting_commit
         where  line_id = p_line_id
           and  purchase_order_no = p_po
           and  process = 'pending';

        if v_sub_id > 0 then
            set o_rv = 400;
            set o_err = "请对这个批次的所有数据进行确认后，再点击批次完成.";
            leave main_proc;
        end if;

    
        select  ifnull(MAX(revision),0)+1 into v_num
          from  uct_sorting_job_logs
         where  line_id = p_line_id
           and  purchase_order_no = p_po;

        if v_num is null then
            set o_rv = 400;
            set o_err = "获取最大的版本号失败.";
            leave main_proc;
        end if;

    
        select id, ifnull(storage_weight,0), ifnull(storage_cargo_price,0) 
				  into v_pur_id, v_old_weight, v_old_money
          from uct_waste_purchase
         where order_id = p_po;

        if v_pur_id is null then
            set o_rv = 400;
            set o_err = "获取订单表的自增id失败.";
            leave main_proc;
        end if;


        select  count(1), ifnull(SUM(net_weight * presell_price),0), ifnull(SUM(net_weight),0)
          into  v_check_id, v_now_money,  v_now_weight
          from  uct_sorting_commit
         where  sub_time = 0
           and  process = 'passed'
           and  line_id = p_line_id
           and  purchase_order_no = p_po;


        set v_total_weight = v_old_weight + v_now_weight;
        set v_total_money  = v_old_money + v_now_money;


        select count(id)  into  v_number
          from uct_sorting_jobs
         where priority > v_priority
           and line_id = p_line_id;


        select ifnull(SUM(a.net_weight),0) into v_sort_height
          from uct_sorting_commit as a
     left join uct_waste_cate as b
            on a.cate_id = b.id
         where a.process = 'passed'
           and a.disposal_way = 'sorting'
           and a.sub_time = 0
           and b.value_type = 'valuable'
           and a.purchase_order_no = p_po
           and a.line_id = p_line_id;

    
        select ifnull(SUM(a.net_weight),0) into v_sort_low
          from uct_sorting_commit as a
     left join uct_waste_cate as b
            on a.cate_id = b.id
         where a.process = 'passed'
           and a.disposal_way = 'sorting'
           and a.sub_time = 0
           and b.value_type = 'unvaluable'
           and a.purchase_order_no = p_po
           and a.line_id = p_line_id;

    
        select ifnull(SUM(a.net_weight),0) into v_weight_height
         from uct_sorting_commit as a
    left join uct_waste_cate as b
           on a.cate_id = b.id
        where a.process = 'passed'
          and a.disposal_way = 'weighing'
          and a.sub_time = 0
          and b.value_type = 'valuable'
          and a.purchase_order_no = p_po
          and a.line_id = p_line_id;
                     
       select ifnull(SUM(a.net_weight),0) into v_weight_low
         from uct_sorting_commit as a
    left join uct_waste_cate as b
           on a.cate_id = b.id
        where a.process = 'passed'
          and a.disposal_way = 'weighing'
          and a.sub_time = 0
          and b.value_type = 'unvaluable'
          and a.purchase_order_no = p_po
          and a.line_id = p_line_id;

    
       select b.sorting_unit_cargo_price,
              b.weigh_unit_cargo_price,
              b.sorting_unit_labor_price,
              b.weigh_unit_labor_price
         into v_sort_cargo_price,
              v_weight_cargo_price,
              v_sort_labor_price,
              v_weight_labor_price
         from uct_waste_purchase as a
    left join uct_branch as b
           on a.branch_id = b.setting_key
        where a.order_id = p_po;
        
        
        
        set  v_commission  =  (v_sort_height  *  v_sort_cargo_price  +  v_weight_height  *  v_weight_cargo_price)/1000;
        set  v_artificial  = ( (v_sort_height  +  v_sort_low)  *  v_sort_labor_price  +  (v_weight_height  +  v_weight_low)  *  v_weight_labor_price)/1000;



    start transaction;   #开启事物
        set errno=0;
        
        update uct_sorting_jobs  set status = 'finish',priority = 0 where id = v_id;
        set errno=6;
        
        if v_priority > 0 and v_number > 0 then
            update uct_sorting_jobs  set priority = priority - 1 where priority > v_priority;
        end if;

        set errno=1;
        
        insert into uct_sorting_job_logs
                    (line_id,
                    purchase_order_no,
                    status,
                    revision,
                    leader)
             values (p_line_id,
                    p_po,
                    'finish',
                    v_num,
                    v_leader);
        set errno=2;

        
        update uct_bas_station set status = 'stand-by' where status = 'working' and line_id = p_line_id;
        set errno=3;

        

        update  uct_waste_purchase set
                storage_weight = v_total_weight,
                storage_cargo_price = v_total_money,
                sorting_valuable_weight = ifnull((sorting_valuable_weight),0)  + v_sort_height,
                sorting_unvaluable_weight = ifnull((sorting_unvaluable_weight),0) + v_sort_low,
                weigh_valuable_weight  =  ifnull((weigh_valuable_weight),0) + v_weight_height,
                weigh_unvaluable_weight  =  ifnull((weigh_unvaluable_weight),0) + v_weight_low,
                total_cargo_price  =  ifnull((total_cargo_price),0) + v_commission,
                total_labor_price =  ifnull((total_labor_price),0) + v_artificial
         where  id = v_pur_id;
        set errno=4;

        
        insert into uct_waste_storage_sort
                    (purchase_id, cargo_sort, total_weight, net_weight, rough_weight,
                     presell_price, sort_time, createtime, disposal_way, value_type)
             select v_pur_id,
                    a.cate_id,
                    SUM(a.net_weight) as weight,
                    SUM(a.net_weight) as weight,
                    0,
                    min(a.presell_price) ,
                    UNIX_TIMESTAMP(max(a.end_time)),
                    UNIX_TIMESTAMP(now()),
                    a.disposal_way,
                    b.value_type
               from uct_sorting_commit as a
          left join uct_waste_cate as b
                 on a.cate_id = b.id
              where a.process = 'passed'
                and a.sub_time = 0
                and a.line_id = p_line_id
                and a.purchase_order_no = p_po
           group by a.cate_id;

        set errno=5;

        
        update uct_sorting_commit
           set sub_time = UNIX_TIMESTAMP(now())
         where sub_time = 0
           and purchase_order_no = p_po
           and line_id = p_line_id;
        set errno=7;

        commit;

        if  errno = 7 then
            set o_rv = 200;
            set o_err = "批次完成处理成功.";
        end if;

  end main_proc;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for sorting_end_and_edit_once
-- ----------------------------
DROP PROCEDURE IF EXISTS `sorting_end_and_edit_once`;
delimiter ;;
CREATE PROCEDURE `sorting_end_and_edit_once`(in  p_line_id varchar(20),
in  p_po      varchar(20),
out o_rv      integer,
out o_err     varchar(200))
BEGIN
    declare v_id            integer;
    declare v_leader        integer;
    declare v_priority      integer;
    declare v_num           integer;
    declare v_number        integer;
    declare v_pur_id        integer;
    declare v_sub_id        integer;
    declare v_check_id      integer;
    declare v_sum_id        integer;
    declare v_old_weight    float;
    declare v_old_money     float;
    declare v_now_weight    float;
    declare v_now_money     float;
    declare v_total_weight  float;
    declare v_total_money   float;
    declare v_sort_height   float;
    declare v_sort_low      float;
    declare v_weight_height float;
    declare v_weight_low    float;
    declare v_sort_cargo_price      float;
    declare v_weight_cargo_price    float;
    declare v_sort_labor_price      float;
    declare v_weight_labor_price    float;
    declare v_commission    float;
    declare v_artificial    float;
    declare errno           int;

    declare exit HANDLER for sqlexception
    begin
        rollback;
        select errno;
        set o_rv = 400;
        set o_err = "批次完成处理失败.";
    end;

    main_proc:begin
    
         select id, leader, priority into v_id, v_leader, v_priority
           from uct_sorting_jobs
          where line_id = p_line_id
            and purchase_order_no = p_po
          limit 1;

        if v_id is  null then
            set o_rv = 400;
            set o_err = "获取任务表id失败.";
            leave main_proc;
        end if;

    
      select count(1) into v_sum_id
        from uct_sorting_commit
       where sub_time = 0
         and line_id = p_line_id
         and purchase_order_no = p_po;

    if v_sum_id < 1 then
        set o_rv = 400;
        set o_err = "没有可以入库的数据.";
        leave main_proc;
    end if;

    
    select count(1) into v_sub_id
      from uct_sorting_commit
     where sub_time = 0
       and line_id = p_line_id
       and purchase_order_no = p_po
       and process = 'pending';

    if v_sub_id > 0 then
        set o_rv = 400;
        set o_err = "请对这个批次的所有数据进行确认后，再点击单次入库.";
        leave main_proc;
    end if;

    
    select ifnull(MAX(revision),0)+1 into v_num
      from uct_sorting_job_logs
     where line_id = p_line_id
       and purchase_order_no = p_po;

    if v_num is null then
        set o_rv = 400;
        set o_err = "获取最大的版本号失败.";
        leave main_proc;
    end if;

    
    select id, ifnull(storage_weight, 0), ifnull(storage_cargo_price, 0)
      into v_pur_id, v_old_weight, v_old_money
      from uct_waste_purchase
     where order_id = p_po;

    if v_pur_id is null then
        set o_rv = 400;
        set o_err = "获取订单表的自增id失败.";
        leave main_proc;
    end if;

    
     select count(1), ifnull(SUM(net_weight * presell_price), 0), ifnull(SUM(net_weight), 0)
       into v_check_id, v_now_money,  v_now_weight
       from uct_sorting_commit
      where sub_time = 0
        and process = 'passed'
        and line_id = p_line_id
        and purchase_order_no = p_po;

    if v_check_id < 1 then
        set o_rv = 400;
        set o_err = "获取单次总重量或总金额失败.";
        leave main_proc;
    end if;


    set v_total_weight = v_old_weight + v_now_weight;
    set v_total_money  = v_old_money + v_now_money;


    select ifnull(SUM(a.net_weight),0) into v_sort_height
      from uct_sorting_commit   as a
 left join uct_waste_cate as b
        on a.cate_id = b.id
     where a.process = 'passed'
       and a.disposal_way = 'sorting'
       and a.sub_time = 0
       and b.value_type = 'valuable'
       and a.purchase_order_no = p_po
       and a.line_id = p_line_id;

    
    select ifnull(SUM(a.net_weight),0) into v_sort_low
      from uct_sorting_commit as a
 left join uct_waste_cate as b
        on a.cate_id = b.id
     where a.process = 'passed'
       and a.disposal_way = 'sorting'
       and a.sub_time = 0
       and b.value_type = 'unvaluable'
       and a.purchase_order_no = p_po
       and a.line_id = p_line_id;

    
    select ifnull(SUM(a.net_weight),0) into v_weight_height
      from uct_sorting_commit as a
 left join uct_waste_cate as b
        on a.cate_id = b.id
     where a.process = 'passed'
       and a.disposal_way = 'weighing'
       and a.sub_time = 0
       and b.value_type = 'valuable'
       and a.purchase_order_no = p_po
       and a.line_id = p_line_id;

    
    select ifnull(SUM(a.net_weight),0) into v_weight_low
      from uct_sorting_commit as a
 left join uct_waste_cate as b
        on a.cate_id = b.id
     where a.process = 'passed'
       and a.disposal_way = 'weighing'
       and a.sub_time = 0
       and b.value_type = 'unvaluable'
       and a.purchase_order_no = p_po
       and a.line_id = p_line_id;

    
    select b.sorting_unit_cargo_price,
           b.weigh_unit_cargo_price,
           b.sorting_unit_labor_price,
           b.weigh_unit_labor_price
      into v_sort_cargo_price,
           v_weight_cargo_price,
           v_sort_labor_price,
           v_weight_labor_price
      from uct_waste_purchase as a
 left join uct_branch as b
        on a.branch_id = b.setting_key
     where a.order_id = p_po;

    
    
    
    set  v_commission  =  (v_sort_height  *  v_sort_cargo_price  +  v_weight_height  *  v_weight_cargo_price)/1000;
    set  v_artificial  =  ((v_sort_height  +  v_sort_low)  *  v_sort_labor_price  +  (v_weight_height  +  v_weight_low)  *  v_weight_labor_price)/1000;




    start transaction;   #开启事物
        set errno=0;
        
        
        update uct_waste_purchase set
               storage_weight = v_total_weight,
               storage_cargo_price = v_total_money,
               sorting_valuable_weight = ifnull((sorting_valuable_weight ),0) + v_sort_height,
               sorting_unvaluable_weight = ifnull((sorting_unvaluable_weight ),0) + v_sort_low,
               weigh_valuable_weight  =  ifnull((weigh_valuable_weight),0) + v_weight_height,
               weigh_unvaluable_weight  =  ifnull((weigh_unvaluable_weight),0) + v_weight_low,
               total_cargo_price  =  ifnull((total_cargo_price),0) + v_commission,
               total_labor_price =  ifnull((total_labor_price),0) + v_artificial
         where id = v_pur_id;

        set errno=1;
        insert into uct_waste_storage_sort
                    (purchase_id,
                    cargo_sort,
                    total_weight,
                    net_weight,
                    rough_weight,
                    presell_price,
                    sort_time,
                    createtime,
                    disposal_way,
                    value_type)
            select  v_pur_id,
                    a.cate_id,
                    SUM(a.net_weight) as weight,
                    SUM(a.net_weight) as weight,
                    0,
                    min(a.presell_price) ,
                    UNIX_TIMESTAMP(max(a.end_time)),
                    UNIX_TIMESTAMP(now()),
                    a.disposal_way,
                    b.value_type
               from uct_sorting_commit as a
          left join uct_waste_cate as b
                 on a.cate_id = b.id
              where a.process = 'passed'
                and a.sub_time = 0
                and a.line_id = p_line_id
                and a.purchase_order_no = p_po
           group by a.cate_id;

        set errno=2;
        
        update uct_sorting_commit
           set sub_time = UNIX_TIMESTAMP(now())
         where sub_time = 0
           and purchase_order_no = p_po
           and line_id = p_line_id;

        set errno=3;
        commit;

        if  errno = 3 then
            set o_rv = 200;
            set o_err = "单次入库处理成功.";
        end if;

  end main_proc;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for star_history
-- ----------------------------
DROP PROCEDURE IF EXISTS `star_history`;
delimiter ;;
CREATE PROCEDURE `star_history`(in `start_time` date,in `end_time` date)
begin

declare nowdate date;
start transaction;
set nowdate = end_time;
while nowdate >= start_time do
	select nowdate;
	set nowdate = date_format(DATE_SUB(nowdate, INTERVAL 1 MONTH), '%Y-%m-%d');
end while;
commit;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for test
-- ----------------------------
DROP PROCEDURE IF EXISTS `test`;
delimiter ;;
CREATE PROCEDURE `test`(IN `customer_id` int)
SELECT cus.name, cus.company_address, main.FRelateBrID, MIN(main.Date) AS startSevr
		, COUNT(main.FBillNo) AS countSevr, SUM(main.TalFQty) AS sumTalWaste
	FROM Trans_main_table main
		JOIN uct_waste_customer cus
	WHERE main.FTranType = 'PUR'
		AND main.FCorrent = 1
		AND main.FCancellation = 1
		AND cus.id = main.FSupplyID
		AND main.FDate BETWEEN '2021-01-01 00:00:00' AND '2021-12-31 23:59:59'
		AND main.FSupplyID = customer_id
	GROUP BY main.FSupplyID
;;
delimiter ;

-- ----------------------------
-- Procedure structure for test1
-- ----------------------------
DROP PROCEDURE IF EXISTS `test1`;
delimiter ;;
CREATE PROCEDURE `test1`()
begin

Declare l_int int;
Set @l_int = 5;
Select @l_int; 

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for test20210105
-- ----------------------------
DROP PROCEDURE IF EXISTS `test20210105`;
delimiter ;;
CREATE PROCEDURE `test20210105`()
begin
			start TRANSACTION;
			select count(*) from uct_waste_purchase;
			select sleep(20);
			commit;
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for test_proc
-- ----------------------------
DROP PROCEDURE IF EXISTS `test_proc`;
delimiter ;;
CREATE PROCEDURE `test_proc`(IN `region_type` varchar(50))
BEGIN
  #Routine body goes here...

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_assist_pur
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_assist_pur`;
delimiter ;;
CREATE PROCEDURE `Trans_assist_pur`(in `id` int)
begin

delete from Trans_assist_table where FTranType = 'PUR' and FInterID = id;
insert into Trans_assist_table SELECT `uct_waste_purchase_cargo`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, `uct_waste_purchase_cargo`.`id` AS `FEntryID`, `uct_waste_purchase_cargo`.`cate_id` AS `FItemID`, '1' AS `FUnitID`
	, `uct_waste_purchase_cargo`.`net_weight` AS `FQty`, `uct_waste_purchase_cargo`.`unit_price` AS `FPrice`, round(`uct_waste_purchase_cargo`.`total_price`, 2) AS `FAmount`,'sorting' as `disposal_way`,`uct_waste_cate`.`value_type` as `value_type`
	, '' AS `FbasePrice`, '' AS `FbaseAmount`, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`
	, '' AS `FPriceRef`, date_format(from_unixtime(`uct_waste_purchase_cargo`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FDCTime`
	, '' AS `FSourceInterID`, '' AS `FSourceTranType`,NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_purchase_cargo` join `uct_waste_cate` on `uct_waste_cate`.`id` = `uct_waste_purchase_cargo`.`cate_id`  where `uct_waste_purchase_cargo`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_assist_sel
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_assist_sel`;
delimiter ;;
CREATE PROCEDURE `Trans_assist_sel`(in `id` int)
begin

delete from Trans_assist_table where FTranType = 'SEL' and FInterID = id;
insert into Trans_assist_table SELECT `uct_waste_sell_cargo`.`sell_id` AS `FInterID`, 'SEL' AS `FTranType`, `uct_waste_sell_cargo`.`id` AS `FEntryID`, `uct_waste_sell_cargo`.`cate_id` AS `FItemID`, '1' AS `FUnitID`
	, `uct_waste_sell_cargo`.`net_weight` AS `FQty`
	, `uct_waste_sell_cargo`.`unit_price` AS `FPrice`
	, round(`uct_waste_sell_cargo`.`unit_price` * `uct_waste_sell_cargo`.`net_weight`, 2) AS `FAmount`,'sorting' as `disposal_way`,'valuable' as `value_type`
	, '' AS `FbasePrice`, '' AS `FbaseAmount`, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`
	, '' AS `FPriceRef`, date_format(from_unixtime(`uct_waste_sell_cargo`.`updatetime`), '%Y-%m-%d %H:%i:%S') AS `FDCTime`
	, if(`uct_waste_sell`.`purchase_id` > 0, `uct_waste_sell`.`purchase_id`, '') AS `FSourceInterID`
	, if(`uct_waste_sell`.`purchase_id` > 0, 'PUR', '') AS `FSourceTranType`,NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_sell_cargo`
	JOIN `uct_waste_sell`
WHERE `uct_waste_sell_cargo`.`sell_id` = `uct_waste_sell`.`id` and `uct_waste_sell`.`id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_assist_sor
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_assist_sor`;
delimiter ;;
CREATE PROCEDURE `Trans_assist_sor`(in `id` int)
begin

delete from Trans_assist_table where FTranType = 'SOR' and FInterID = id;
insert into Trans_assist_table SELECT `uct_waste_storage_sort`.`purchase_id` AS `FInterID`, 'SOR' AS `FTranType`, `uct_waste_storage_sort`.`id` AS `FEntryID`, `uct_waste_storage_sort`.`cargo_sort` AS `FItemID`, '1' AS `FUnitID`
	, `uct_waste_storage_sort`.`net_weight` AS `FQty`, `uct_waste_storage_sort`.`presell_price` AS `FPrice`
	, round(`uct_waste_storage_sort`.`presell_price` * `uct_waste_storage_sort`.`net_weight`, 2) AS `FAmount`,`uct_waste_storage_sort`.`disposal_way` as `disposal_way`,`uct_waste_storage_sort`.`value_type` as `value_type`
	, '' AS `FbasePrice`, '' AS `FbaseAmount`, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`
	, '' AS `FPriceRef`
	, date_format(from_unixtime(if(`uct_waste_storage_sort`.`sort_time` > `uct_waste_storage_sort`.`createtime`, `uct_waste_storage_sort`.`sort_time`, `uct_waste_storage_sort`.`createtime`)), '%Y-%m-%d %H:%i:%S') AS `FDCTime`
	, `uct_waste_storage_sort`.`purchase_id` AS `FSourceInterID`, 'PUR' AS `FSourceTranType`,NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_storage_sort` where `uct_waste_storage_sort`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_pc
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_pc`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_pc`(IN `id` int)
begin

delete from Trans_fee_table where FTranType = 'PUR' and  Ffeesence = 'PC' and FInterID = id;
insert into Trans_fee_table SELECT `uct_waste_purchase_expense`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, 'PC' AS `Ffeesence`, `uct_waste_purchase_expense`.`id` AS `FEntryID`, `uct_waste_purchase_expense`.`usage` AS `FFeeID`
	, `uct_waste_purchase_expense`.`type` AS `FFeeType`, `uct_waste_purchase_expense`.`receiver` AS `FFeePerson`, `uct_waste_purchase_expense`.`remark` AS `FFeeExplain`, `uct_waste_purchase_expense`.`price` AS `FFeeAmount`, '' AS `FFeebaseAmount`
	, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`, '' AS `FPriceRef`
	, date_format(from_unixtime(`uct_waste_purchase_expense`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FFeetime`, NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_purchase_expense` where `uct_waste_purchase_expense`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_pur
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_pur`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_pur`(in `id` int)
begin

SELECT `uct_waste_purchase_cargo`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, `uct_waste_purchase_cargo`.`id` AS `FEntryID`, `uct_waste_purchase_cargo`.`cate_id` AS `FItemID`, '1' AS `FUnitID`
	, `uct_waste_purchase_cargo`.`net_weight` AS `FQty`, `uct_waste_purchase_cargo`.`unit_price` AS `FPrice`, round(`uct_waste_purchase_cargo`.`total_price`, 2) AS `FAmount`
	, '' AS `FbasePrice`, '' AS `FbaseAmount`, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`
	, '' AS `FPriceRef`, date_format(from_unixtime(`uct_waste_purchase_cargo`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FDCTime`
	, '' AS `FSourceInterID`, '' AS `FSourceTranType`
FROM `uct_waste_purchase_cargo` where `uct_waste_purchase_cargo`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_rf
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_rf`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_rf`(in `id` int)
begin

delete from Trans_fee_table where FTranType = 'PUR' and  Ffeesence = 'RF' and FInterID = id;
insert into Trans_fee_table SELECT `uct_waste_storage_return_fee`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, 'RF' AS `Ffeesence`, `uct_waste_storage_return_fee`.`id` AS `FEntryID`, `uct_waste_storage_return_fee`.`usage` AS `FFeeID`
	, 'out' AS `FFeeType`, `uct_waste_storage_return_fee`.`receiver` AS `FFeePerson`, `uct_waste_storage_return_fee`.`remark` AS `FFeeExplain`, `uct_waste_storage_return_fee`.`price` AS `FFeeAmount`, '' AS `FFeebaseAmount`
	, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`, '' AS `FPriceRef`
	, date_format(from_unixtime(`uct_waste_storage_return_fee`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FFeetime`, NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_storage_return_fee` where `uct_waste_storage_return_fee`.`purchase_id` = id;
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_sel
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_sel`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_sel`(in `id` int)
begin

SELECT `uct_waste_sell_cargo`.`sell_id` AS `FInterID`, 'SEL' AS `FTranType`, `uct_waste_sell_cargo`.`id` AS `FEntryID`, `uct_waste_sell_cargo`.`cate_id` AS `FItemID`, '1' AS `FUnitID`
	, if(`uct_waste_sell`.`purchase_id` > 0, `uct_waste_sell_cargo`.`plan_sell_weight`, `uct_waste_sell_cargo`.`net_weight`) AS `FQty`
	, `uct_waste_sell_cargo`.`unit_price` AS `FPrice`
	, round(`uct_waste_sell_cargo`.`unit_price` * if(`uct_waste_sell`.`purchase_id` > 0, `uct_waste_sell_cargo`.`plan_sell_weight`, `uct_waste_sell_cargo`.`net_weight`), 2) AS `FAmount`
	, '' AS `FbasePrice`, '' AS `FbaseAmount`, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`
	, '' AS `FPriceRef`, date_format(from_unixtime(`uct_waste_sell_cargo`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FDCTime`
	, if(`uct_waste_sell`.`purchase_id` > 0, `uct_waste_sell`.`purchase_id`, '') AS `FSourceInterID`
	, if(`uct_waste_sell`.`purchase_id` > 0, 'PUR', '') AS `FSourceTranType`
FROM `uct_waste_sell_cargo`
	JOIN `uct_waste_sell`
WHERE `uct_waste_sell_cargo`.`sell_id` = `uct_waste_sell`.`id` and `uct_waste_sell`.`id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_sl
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_sl`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_sl`(in `id` int)
begin

delete from Trans_fee_table where FTranType = 'SEL' and  Ffeesence = 'SL' and FInterID = id;
insert into Trans_fee_table SELECT `uct_waste_sell_other_price`.`sell_id` AS `FInterID`, 'SEL' AS `FTranType`, 'SL' AS `Ffeesence`, `uct_waste_sell_other_price`.`id` AS `FEntryID`, `uct_waste_sell_other_price`.`usage` AS `FFeeID`
	, `uct_waste_sell_other_price`.`type` AS `FFeeType`, `uct_waste_sell_other_price`.`receiver` AS `FFeePerson`, `uct_waste_sell_other_price`.`remark` AS `FFeeExplain`, `uct_waste_sell_other_price`.`price` AS `FFeeAmount`, '' AS `FFeebaseAmount`
	, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`, '' AS `FPriceRef`
	, date_format(from_unixtime(`uct_waste_sell_other_price`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FFeetime`, NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_sell_other_price` where `uct_waste_sell_other_price`.`sell_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_so
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_so`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_so`(in `id` int)
begin

delete from Trans_fee_table where FTranType = 'SOR' and  Ffeesence = 'SO' and FInterID = id;
insert into Trans_fee_table SELECT `uct_waste_storage_expense`.`purchase_id` AS `FInterID`, 'SOR' AS `FTranType`, 'SO' AS `Ffeesence`, `uct_waste_storage_expense`.`id` AS `FEntryID`, `uct_waste_storage_expense`.`usage` AS `FFeeID`
	, 'out' AS `FFeeType`, `uct_waste_storage_expense`.`receiver` AS `FFeePerson`, `uct_waste_storage_expense`.`remark` AS `FFeeExplain`, `uct_waste_storage_expense`.`price` AS `FFeeAmount`, '' AS `FFeebaseAmount`
	, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`, '' AS `FPriceRef`
	, date_format(from_unixtime(`uct_waste_storage_expense`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FFeetime`, NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_storage_expense` where `uct_waste_storage_expense`.`purchase_id` = id;
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_sor
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_sor`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_sor`(in `id` int)
begin

SELECT `uct_waste_storage_sort`.`purchase_id` AS `FInterID`, 'SOR' AS `FTranType`, `uct_waste_storage_sort`.`id` AS `FEntryID`, `uct_waste_storage_sort`.`cargo_sort` AS `FItemID`, '1' AS `FUnitID`
	, `uct_waste_storage_sort`.`net_weight` AS `FQty`, `uct_waste_storage_sort`.`presell_price` AS `FPrice`
	, round(`uct_waste_storage_sort`.`presell_price` * `uct_waste_storage_sort`.`net_weight`, 2) AS `FAmount`
	, '' AS `FbasePrice`, '' AS `FbaseAmount`, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`
	, '' AS `FPriceRef`
	, date_format(from_unixtime(if(`uct_waste_storage_sort`.`sort_time` > `uct_waste_storage_sort`.`createtime`, `uct_waste_storage_sort`.`sort_time`, `uct_waste_storage_sort`.`createtime`)), '%Y-%m-%d %H:%i:%S') AS `FDCTime`
	, `uct_waste_storage_sort`.`purchase_id` AS `FSourceInterID`, 'PUR' AS `FSourceTranType`
FROM `uct_waste_storage_sort` where `uct_waste_storage_sort`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_fee_ss
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_fee_ss`;
delimiter ;;
CREATE PROCEDURE `Trans_fee_ss`(in `id` int)
begin

delete from Trans_fee_table where FTranType = 'SOR' and  Ffeesence = 'SS' and FInterID = id;
insert into Trans_fee_table SELECT `uct_waste_storage_sort_expense`.`purchase_id` AS `FInterID`, 'SOR' AS `FTranType`, 'SS' AS `Ffeesence`, `uct_waste_storage_sort_expense`.`id` AS `FEntryID`, `uct_waste_storage_sort_expense`.`usage` AS `FFeeID`
	, 'out' AS `FFeeType`, `uct_waste_storage_sort_expense`.`receiver` AS `FFeePerson`, `uct_waste_storage_sort_expense`.`remark` AS `FFeeExplain`, `uct_waste_storage_sort_expense`.`price` AS `FFeeAmount`, '' AS `FFeebaseAmount`
	, '' AS `Ftaxrate`, '' AS `Fbasetax`, '' AS `Fbasetaxamount`, '' AS `FPriceRef`
	, date_format(from_unixtime(`uct_waste_storage_sort_expense`.`createtime`), '%Y-%m-%d %H:%i:%S') AS `FFeetime`, NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
FROM `uct_waste_storage_sort_expense` where `uct_waste_storage_sort_expense`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_log_pur
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_log_pur`;
delimiter ;;
CREATE PROCEDURE `Trans_log_pur`(in `id` int)
begin

delete from Trans_log_table where FTranType = 'PUR' and FInterID =id;
insert into Trans_log_table SELECT `log`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, MAX(CASE `log`.`state_value`
		WHEN 'draft' THEN `log`.`createtime`
	END) AS `TCreate`
	, MAX(CASE `log`.`state_value`
		WHEN 'draft' THEN `log`.`admin_id`
	END) AS `TCreatePerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_allot' THEN '1'
		ELSE '0'
	END) AS `TallotOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_allot' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TallotPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_allot' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tallot`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_receive_order' THEN '1'
		ELSE '0'
	END) AS `TgetorderOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_receive_order' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TgetorderPerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_receive_order' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tgetorder`, MAX(CASE `log`.`state_value`
		WHEN 'wait_signin_materiel' THEN '1'
		ELSE '0'
	END) AS `TmaterialOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_signin_materiel' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TmaterialPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_signin_materiel' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tmaterial`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pick_cargo' THEN '1'
		ELSE '0'
	END) AS `TpurchaseOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_pick_cargo' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TpurchasePerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pick_cargo' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tpurchase`, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN '1'
		ELSE '0'
	END) AS `TpayOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TpayPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tpay`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect' THEN '1'
		ELSE '0'
	END) AS `TchangeOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TchangePerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tchange`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect_confirm' THEN '1'
		ELSE '0'
	END) AS `TexpenseOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect_confirm' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TexpensePerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect_confirm' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Texpense`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_sort' THEN '1'
		ELSE '0'
	END) AS `TsortOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_sort' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TsortPerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_sort' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tsort`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_confirm' THEN '1'
		ELSE '0'
	END) AS `TallowOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_confirm' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TallowPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_confirm' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tallow`
	, MAX(CASE `log`.`state_value`
		WHEN 'finish' THEN '1'
		ELSE '0'
	END) AS `TcheckOver`, MAX(CASE `log`.`state_value`
		WHEN 'finish' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TcheckPerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'finish' THEN `log`.`createtime`
		ELSE '0'
	END) AS `Tcheck`, `uct_waste_purchase`.`state` AS `State`
FROM `uct_waste_purchase`
	JOIN `uct_waste_purchase_log` `log`
WHERE ((`uct_waste_purchase`.`id` = `log`.`purchase_id`)
	AND (`uct_waste_purchase`.`hand_mouth_data` = '0')
	AND (`uct_waste_purchase`.`give_frame` = '0')
    AND (`uct_waste_purchase`.`id` = id))
GROUP BY `uct_waste_purchase`.`id`;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_log_pur_give
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_log_pur_give`;
delimiter ;;
CREATE PROCEDURE `Trans_log_pur_give`(in `id` int)
begin

delete from Trans_log_table where FTranType = 'PUR' and FInterID =id;
insert into Trans_log_table SELECT `log`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, MAX(CASE `log`.`state_value`
		WHEN 'draft' THEN `log`.`createtime`
	END) AS `TCreate`
	, MAX(CASE `log`.`state_value`
		WHEN 'draft' THEN `log`.`admin_id`
	END) AS `TCreatePerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_allot' THEN '1'
		ELSE '0'
	END) AS `TallotOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_allot' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TallotPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_allot' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tallot`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_receive_order' THEN '1'
		ELSE '0'
	END) AS `TgetorderOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_receive_order' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TgetorderPerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_receive_order' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tgetorder`, MAX(CASE `log`.`state_value`
		WHEN 'wait_signin_materiel' THEN '1'
		ELSE '0'
	END) AS `TmaterialOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_signin_materiel' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TmaterialPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_signin_materiel' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tmaterial`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pick_cargo' THEN '1'
		ELSE '0'
	END) AS `TpurchaseOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_pick_cargo' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TpurchasePerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pick_cargo' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tpurchase`, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN '1'
		ELSE '0'
	END) AS `TpayOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TpayPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tpay`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect' THEN '1'
		ELSE '0'
	END) AS `TchangeOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TchangePerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tchange`, NULL AS `TexpenseOver`, NULL AS `TexpensePerson`
	, NULL AS `Texpense`, NULL AS `TsortOver`, NULL AS `TsortPerson`, NULL AS `Tsort`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect_confirm' THEN '1'
		ELSE '0'
	END) AS `TallowOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect_confirm' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TallowPerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_storage_connect_confirm' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tallow`, MAX(CASE `log`.`state_value`
		WHEN 'finish' THEN '1'
		ELSE '0'
	END) AS `TcheckOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'finish' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TcheckPerson`, MAX(CASE `log`.`state_value`
		WHEN 'finish' THEN `log`.`createtime`
		ELSE '0'
	END) AS `Tcheck`
	, `uct_waste_purchase`.`state` AS `State`
FROM `uct_waste_purchase`
	JOIN `uct_waste_purchase_log` `log`
WHERE ((`uct_waste_purchase`.`id` = `log`.`purchase_id`)
	AND (`uct_waste_purchase`.`hand_mouth_data` = '0')
	AND (`uct_waste_purchase`.`give_frame` = '1')
	AND (`uct_waste_purchase`.`id` = id))
GROUP BY `uct_waste_purchase`.`id`;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_log_pur_hand
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_log_pur_hand`;
delimiter ;;
CREATE PROCEDURE `Trans_log_pur_hand`(in `id` int)
begin

delete from Trans_log_table where FTranType = 'PUR' and FInterID =id;
insert into Trans_log_table SELECT `Plog`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, MAX(CASE `Plog`.`state_value`
		WHEN 'draft' THEN `Plog`.`createtime`
	END) AS `TCreate`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'draft' THEN `Plog`.`admin_id`
	END) AS `TCreatePerson`, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_allot' THEN '1'
		ELSE '0'
	END) AS `TallotOver`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_allot' THEN `Plog`.`admin_id`
	END) AS `TallotPerson`, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_allot' THEN `Plog`.`createtime`
	END) AS `Tallot`
	, MAX(CASE `Slog`.`state_value`
		WHEN 'wait_commit_order' THEN '1'
		ELSE '0'
	END) AS `TgetorderOver`, MAX(CASE `Slog`.`state_value`
		WHEN 'wait_commit_order' THEN `Slog`.`admin_id`
	END) AS `TgetorderPerson`
	, MAX(CASE `Slog`.`state_value`
		WHEN 'wait_commit_order' THEN `Slog`.`createtime`
	END) AS `Tgetorder`, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_receive_order' THEN '1'
		ELSE '0'
	END) AS `TmaterialOver`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_receive_order' THEN `Plog`.`admin_id`
	END) AS `TmaterialPerson`, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_receive_order' THEN `Plog`.`createtime`
	END) AS `Tmaterial`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_pick_cargo' THEN '1'
		ELSE '0'
	END) AS `TpurchaseOver`, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_pick_cargo' THEN `Plog`.`admin_id`
		ELSE NULL
	END) AS `TpurchasePerson`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_pick_cargo' THEN `Plog`.`createtime`
		ELSE NULL
	END) AS `Tpurchase`, MAX(CASE `Slog`.`state_value`
		WHEN 'wait_pay' THEN '1'
		ELSE '0'
	END) AS `TpayOver`
	, MAX(CASE `Slog`.`state_value`
		WHEN 'wait_pay' THEN `Slog`.`admin_id`
		ELSE NULL
	END) AS `TpayPerson`, MAX(CASE `Slog`.`state_value`
		WHEN 'wait_pay' THEN `Slog`.`createtime`
		ELSE NULL
	END) AS `Tpay`
	, MAX(CASE `Slog`.`state_value`
		WHEN 'finish' THEN '1'
		ELSE '0'
	END) AS `TchangeOver`, MAX(CASE `Slog`.`state_value`
		WHEN 'finish' THEN `Slog`.`admin_id`
	END) AS `TchangePerson`
	, MAX(CASE `Slog`.`state_value`
		WHEN 'finish' THEN `Slog`.`createtime`
	END) AS `Tchange`, NULL AS `TexpenseOver`, NULL AS `TexpensePerson`
	, NULL AS `Texpense`, NULL AS `TsortOver`, NULL AS `TsortPerson`, NULL AS `Tsort`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_return_fee' THEN '1'
		ELSE '0'
	END) AS `TallowOver`, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_return_fee' THEN `Plog`.`admin_id`
	END) AS `TallowPerson`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'wait_return_fee' THEN `Plog`.`createtime`
	END) AS `Tallow`, MAX(CASE `Plog`.`state_value`
		WHEN 'finish' THEN '1'
		ELSE '0'
	END) AS `TcheckOver`
	, MAX(CASE `Plog`.`state_value`
		WHEN 'finish' THEN `Plog`.`admin_id`
		ELSE NULL
	END) AS `TcheckPerson`, MAX(CASE `Plog`.`state_value`
		WHEN 'finish' THEN `Plog`.`createtime`
		ELSE '0'
	END) AS `Tcheck`
	, `P`.`state` AS `State`
FROM `uct_waste_sell` `S`
	JOIN `uct_waste_sell_log` `Slog`
	JOIN `uct_waste_purchase` `P`
	JOIN `uct_waste_purchase_log` `Plog`
WHERE ((`S`.`id` = `Slog`.`sell_id`)
	AND (`S`.`order_id` = `P`.`order_id`)
	AND (`P`.`id` = `Plog`.`purchase_id`)
	AND (`Slog`.`is_timeline_data` = '1')
    AND (`P`.`id` = id))
GROUP BY `P`.`order_id`;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_log_sel
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_log_sel`;
delimiter ;;
CREATE PROCEDURE `Trans_log_sel`(in `id` int)
begin

delete from Trans_log_table where FTranType = 'SEL' and FInterID =id;
insert into Trans_log_table SELECT `log`.`sell_id` AS `FInterID`, 'SEL' AS `FTranType`, MAX(CASE `log`.`state_value`
		WHEN 'draft' THEN `log`.`createtime`
	END) AS `TCreate`
	, MAX(CASE `log`.`state_value`
		WHEN 'draft' THEN `log`.`admin_id`
	END) AS `TCreatePerson`, NULL AS `TallotOver`, NULL AS `TallotPerson`
	, NULL AS `Tallot`, NULL AS `TgetorderOver`, NULL AS `TgetorderPerson`, NULL AS `Tgetorder`, NULL AS `TmaterialOver`
	, NULL AS `TmaterialPerson`, NULL AS `Tmaterial`, MAX(CASE `log`.`state_value`
		WHEN 'wait_weigh' THEN '1'
		ELSE '0'
	END) AS `TpurchaseOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_weigh' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TpurchasePerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_weigh' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tpurchase`
	, NULL AS `TpayOver`, NULL AS `TpayPerson`, NULL AS `Tpay`, NULL AS `TchangeOver`, NULL AS `TchangePerson`
	, NULL AS `Tchange`, NULL AS `TexpenseOver`, NULL AS `TexpensePerson`, NULL AS `Texpense`, NULL AS `TsortOver`
	, NULL AS `TsortPerson`, NULL AS `Tsort`, MAX(CASE `log`.`state_value`
		WHEN 'wait_confirm_order' THEN '1'
		ELSE '0'
	END) AS `TallowOver`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_confirm_order' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TallowPerson`, MAX(CASE `log`.`state_value`
		WHEN 'wait_confirm_order' THEN `log`.`createtime`
		ELSE NULL
	END) AS `Tallow`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN '1'
		ELSE '0'
	END) AS `TcheckOver`, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN `log`.`admin_id`
		ELSE NULL
	END) AS `TcheckPerson`
	, MAX(CASE `log`.`state_value`
		WHEN 'wait_pay' THEN `log`.`createtime`
		ELSE '0'
	END) AS `Tcheck`, `uct_waste_sell`.`state` AS `State`
FROM `uct_waste_sell`
	JOIN `uct_waste_sell_log` `log`
WHERE `uct_waste_sell`.`id` = `log`.`sell_id`
	AND isnull(`uct_waste_sell`.`purchase_id`)
	AND `uct_waste_sell`.`id` = id
GROUP BY `uct_waste_sell`.`id`;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_main_0
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_main_0`;
delimiter ;;
CREATE PROCEDURE `Trans_main_0`(in `id` int)
begin

SELECT `uctoo_lvhuan`.`uct_waste_purchase`.`branch_id` AS `FRelateBrID`, `uctoo_lvhuan`.`uct_waste_purchase`.`id` AS `FInterID`, 'PUR' AS `FTranType`
	, CASE `uctoo_lvhuan`.`Trans_log_table`.`TpurchaseOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d %H:%i:%S')
		ELSE date_format(from_unixtime(`uctoo_lvhuan`.`Trans_log_table`.`Tpurchase`), '%Y-%m-%d %H:%i:%S')
	END AS `FDate`, `uctoo_lvhuan`.`uct_waste_purchase`.`train_number` AS `FTrainNum`, `uctoo_lvhuan`.`uct_waste_purchase`.`order_id` AS `FBillNo`, `uctoo_lvhuan`.`uct_waste_purchase`.`customer_id` AS `FSupplyID`, `uctoo_lvhuan`.`uct_waste_purchase`.`manager_id` AS `Fbusiness`
	, concat('AD', `uctoo_lvhuan`.`uct_waste_purchase`.`purchase_incharge`) AS `FDCStockID`
	, concat('CU', `uctoo_lvhuan`.`uct_waste_purchase`.`customer_id`) AS `FSCStockID`
	, CASE `uctoo_lvhuan`.`uct_waste_purchase`.`state`
		WHEN 'cancel' THEN '0'
		ELSE '1'
	END AS `FCancellation`, '0' AS `FROB`, `uctoo_lvhuan`.`Trans_log_table`.`TallowOver` AS `FCorrent`, `uctoo_lvhuan`.`Trans_log_table`.`TcheckOver` AS `FStatus`, '' AS `FUpStockWhenSave`
	, '' AS `FExplanation`, `uctoo_lvhuan`.`uct_waste_customer`.`service_department` AS `FDeptID`, `uctoo_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FEmpID`, `uctoo_lvhuan`.`Trans_log_table`.`TcheckPerson` AS `FCheckerID`
	, CASE `uctoo_lvhuan`.`Trans_log_table`.`TcheckOver`
		WHEN '0' THEN 'null'
		ELSE date_format(from_unixtime(`uctoo_lvhuan`.`Trans_log_table`.`Tcheck`), '%Y-%m-%d %H:%i:%S')
	END AS `FCheckDate`, `uctoo_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FFManagerID`, `uctoo_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FSManagerID`, `uctoo_lvhuan`.`uct_waste_purchase`.`purchase_incharge` AS `FBillerID`, '1' AS `FCurrencyID`
	, `uctoo_lvhuan`.`Trans_log_table`.`state` AS `FNowState`, CASE `uctoo_lvhuan`.`uct_waste_purchase`.`hand_mouth_data`
		WHEN '1' THEN '1'
		ELSE '0'
	END + CASE `uctoo_lvhuan`.`uct_waste_purchase`.`give_frame`
		WHEN '1' THEN '3'
		ELSE 0
	END AS `FSaleStyle`, `uctoo_lvhuan`.`uct_waste_customer`.`settle_way` AS `FPOStyle`, `uctoo_lvhuan`.`uct_waste_customer`.`back_percent` AS `FPOPrecent`
	, round(`uctoo_lvhuan`.`uct_waste_purchase`.`cargo_weight`, 1) AS `TalFQty`
	, round(`uctoo_lvhuan`.`uct_waste_purchase`.`cargo_price`, 2) AS `TalFAmount`, `uctoo_lvhuan`.`uct_waste_purchase`.`purchase_expense` AS `TalFeeFrist`
	, `Trans_total_fee_rf`.`car_fee` AS `TalFeeSecond`, `Trans_total_fee_rf`.`man_fee` AS `TalFeeThird`, `Trans_total_fee_rf`.`other_return_fee` AS `TalFeeForth`
FROM `uctoo_lvhuan`.`uct_waste_purchase`
	JOIN `uctoo_lvhuan`.`uct_waste_customer`
	JOIN `uctoo_lvhuan`.`Trans_log_table`
	LEFT JOIN `uctoo_lvhuan`.`Trans_total_fee_rf` ON `Trans_total_fee_rf`.`purchase_id` = `uctoo_lvhuan`.`uct_waste_purchase`.`id`
WHERE ((`uctoo_lvhuan`.`uct_waste_purchase`.`customer_id` = `uctoo_lvhuan`.`uct_waste_customer`.`id`)
	AND (`uctoo_lvhuan`.`uct_waste_purchase`.`id` = `uctoo_lvhuan`.`Trans_log_table`.`FInterID`)
	AND (`uctoo_lvhuan`.`Trans_log_table`.`FTranType` = 'PUR')
	AND (`uctoo_lvhuan`.`uct_waste_purchase`.`order_id` > 201806300000000000)
        AND (`uctoo_lvhuan`.`uct_waste_purchase`.`id` = id));

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_main_pur
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_main_pur`;
delimiter ;;
CREATE PROCEDURE `Trans_main_pur`(in `id` int)
begin

delete from Trans_main_table where FTranType = 'PUR' and FInterID = id;
insert into Trans_main_table SELECT `uct_waste_purchase`.`branch_id` AS `FRelateBrID`, `uct_waste_purchase`.`id` AS `FInterID`, 'PUR' AS `FTranType`
	, CASE `Trans_log_table`.`TpurchaseOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d %H:%i:%S')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tpurchase`), '%Y-%m-%d %H:%i:%S')
	END AS `FDate`
	, DATE_FORMAT(FROM_UNIXTIME(`uct_waste_purchase`.createtime), '%Y-%m-%d %H:%i:%s') as createtime
	, CASE `Trans_log_table`.`TpurchaseOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tpurchase`), '%Y-%m-%d')
	END AS `Date`
	, `uct_waste_purchase`.`train_number` AS `FTrainNum`, `uct_waste_purchase`.`order_id` AS `FBillNo`, `uct_waste_purchase`.`customer_id` AS `FSupplyID`, `uct_waste_purchase`.`manager_id` AS `Fbusiness`
	, concat('AD', `uct_waste_purchase`.`purchase_incharge`) AS `FDCStockID`
	, concat('CU', `uct_waste_purchase`.`customer_id`) AS `FSCStockID`
	, CASE `uct_waste_purchase`.`state`
		WHEN 'cancel' THEN '0'
		ELSE '1'
	END AS `FCancellation`, '0' AS `FROB`, if(`Trans_log_table`.`TpurchaseOver` = 1 and `Trans_log_table`.`FTranType` = 'PUR',1,0) AS `FCorrent`, `Trans_log_table`.`TcheckOver` AS `FStatus`, '' AS `FUpStockWhenSave`
	, '' AS `FExplanation`, `uct_waste_customer`.`service_department` AS `FDeptID`, `uct_waste_purchase`.`purchase_incharge` AS `FEmpID`, `Trans_log_table`.`TcheckPerson` AS `FCheckerID`
	, CASE `Trans_log_table`.`TcheckOver`
		WHEN '0' THEN 'null'
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tcheck`), '%Y-%m-%d %H:%i:%S')
	END AS `FCheckDate`, `uct_waste_purchase`.`purchase_incharge` AS `FFManagerID`, `uct_waste_purchase`.`purchase_incharge` AS `FSManagerID`, `uct_waste_purchase`.`purchase_incharge` AS `FBillerID`, '1' AS `FCurrencyID`
	, `Trans_log_table`.`state` AS `FNowState`, CASE `uct_waste_purchase`.`hand_mouth_data`
		WHEN '1' THEN '1'
		ELSE '0'
	END + CASE `uct_waste_purchase`.`give_frame`
		WHEN '1' THEN '3'
		ELSE 0
	END AS `FSaleStyle`, `uct_waste_customer`.`settle_way` AS `FPOStyle`, `uct_waste_customer`.`back_percent` AS `FPOPrecent`
	, round(`uct_waste_purchase`.`cargo_weight`, 1) AS `TalFQty`
	, round(`uct_waste_purchase`.`cargo_price`, 2) AS `TalFAmount`, `uct_waste_purchase`.`purchase_expense` AS `TalFeeFrist`
	, `Trans_total_fee_rf`.`car_fee` AS `TalFeeSecond`, `Trans_total_fee_rf`.`man_fee` AS `TalFeeThird`, `Trans_total_fee_rf`.`other_return_fee` AS `TalFeeForth`,0 AS `TalFeeFifth` ,0,0,0,0,null
FROM `uct_waste_purchase`
	JOIN `uct_waste_customer`
	JOIN `Trans_log_table`
	LEFT JOIN `Trans_total_fee_rf` ON `Trans_total_fee_rf`.`purchase_id` = `uct_waste_purchase`.`id`
WHERE ((`uct_waste_purchase`.`customer_id` = `uct_waste_customer`.`id`)
	AND (`uct_waste_purchase`.`id` = `Trans_log_table`.`FInterID`)
	AND (`Trans_log_table`.`FTranType` = 'PUR')
	AND (`uct_waste_purchase`.`order_id` > 201806300000000000)
    AND (`uct_waste_purchase`.`id` = id));
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_main_sel
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_main_sel`;
delimiter ;;
CREATE PROCEDURE `Trans_main_sel`(in `id` int)
begin

delete from Trans_main_table where FTranType = 'SEL' and FInterID = id;
insert into Trans_main_table SELECT `uct_waste_sell`.`branch_id` AS `FRelateBrID`, `uct_waste_sell`.`id` AS `FInterID`, 'SEL' AS `FTranType`
	, CASE `Trans_log_table`.`TallowOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d %H:%i:%S')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tallow`), '%Y-%m-%d %H:%i:%S')
	END AS `FDate`
	, DATE_FORMAT(FROM_UNIXTIME(`uct_waste_sell`.createtime), '%Y-%m-%d %H:%i:%s') as createtime
	, CASE `Trans_log_table`.`TallowOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tallow`), '%Y-%m-%d')
	END AS `Date`
	, '1' AS `FTrainNum`, `uct_waste_sell`.`order_id` AS `FBillNo`, `uct_waste_sell`.`customer_id` AS `FSupplyID`, '' AS `Fbusiness`
	, concat('DC', `uct_waste_sell`.`customer_id`) AS `FDCStockID`
	, if(`uct_waste_sell`.`purchase_id` IS NOT NULL = 0, concat('LH', `uct_waste_sell`.`warehouse_id`), '') AS `FSCStockID`
	, CASE `uct_waste_sell`.`state`
		WHEN 'cancel' THEN '0'
		ELSE '1'
	END AS `FCancellation`, '0' AS `FROB`, `Trans_log_table`.`TallowOver` AS `FCorrent`, `Trans_log_table`.`TcheckOver` AS `FStatus`, `Trans_log_table`.`TallowOver` AS `FUpStockWhenSave`
	, '' AS `FExplanation`, '4' AS `FDeptID`, `uct_waste_sell`.`seller_id` AS `FEmpID`, `Trans_log_table`.`TcheckPerson` AS `FCheckerID`
	, CASE `Trans_log_table`.`TcheckOver`
		WHEN '0' THEN 'null'
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tcheck`), '%Y-%m-%d %H:%i:%S')
	END AS `FCheckDate`, `uct_waste_sell`.`customer_linkman_id` AS `FFManagerID`, `uct_waste_sell`.`customer_linkman_id` AS `FSManagerID`, `uct_waste_sell`.`seller_id` AS `FBillerID`, '1' AS `FCurrencyID`
	, `Trans_log_table`.`state` AS `FNowState`
	, if(`uct_waste_sell`.`purchase_id` IS NOT NULL = 1, '1', '2') AS `FSaleStyle`
	, '' AS `FPOStyle`, '' AS `FPOPrecent`, round(`uct_waste_sell`.`cargo_weight`, 1) AS `TalFQty`
	, round(`uct_waste_sell`.`cargo_price`, 2) AS `TalFAmount`, `uct_waste_sell`.`materiel_price` AS `TalFeeFrist`
	, `uct_waste_sell`.`other_price` AS `TalFeeSecond`, 0 AS `TalFeeThird`, 0 AS `TalFeeForth`,0 AS `TalFeeFifth`,0,0,0,0,null
FROM `uct_waste_sell`
	JOIN `uct_waste_customer`
	JOIN `Trans_log_table`
WHERE ((`uct_waste_sell`.`customer_id` = `uct_waste_customer`.`id`)
	AND (`uct_waste_sell`.`id` = `Trans_log_table`.`FInterID`)
	AND (`Trans_log_table`.`FTranType` = 'SEL')
	AND (`uct_waste_sell`.`purchase_id` IS NOT NULL = 0)
	AND (`uct_waste_sell`.`order_id` > 201806300000000000)
	AND (`uct_waste_sell`.`id` = id));

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_main_sel_hand
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_main_sel_hand`;
delimiter ;;
CREATE PROCEDURE `Trans_main_sel_hand`(in `id` int)
begin

delete from Trans_main_table where FTranType = 'SEL' and FInterID = id;
insert into Trans_main_table SELECT `uct_waste_sell`.`branch_id` AS `FRelateBrID`, `uct_waste_sell`.`id` AS `FInterID`, 'SEL' AS `FTranType`
	, CASE `Trans_log_table`.`TallowOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d %H:%i:%S')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tallow`), '%Y-%m-%d %H:%i:%S')
	END AS `FDate`
	, DATE_FORMAT(FROM_UNIXTIME(`uct_waste_sell`.createtime), '%Y-%m-%d %H:%i:%s') as createtime
	, CASE `Trans_log_table`.`TallowOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tallow`), '%Y-%m-%d')
	END AS `Date`
	, `uct_waste_purchase`.`train_number` AS `FTrainNum`, `uct_waste_sell`.`order_id` AS `FBillNo`, `uct_waste_sell`.`customer_id` AS `FSupplyID`, '' AS `Fbusiness`
	, concat('DC', `uct_waste_sell`.`customer_id`) AS `FDCStockID`
	, if(`uct_waste_sell`.`purchase_id` IS NOT NULL = 0, concat('LH', `uct_waste_sell`.`warehouse_id`), concat('AD', `uct_waste_purchase`.`purchase_incharge`)) AS `FSCStockID`
	, CASE `uct_waste_sell`.`state`
		WHEN 'cancel' THEN '0'
		ELSE '1'
	END AS `FCancellation`, '0' AS `FROB`, `Trans_log_table`.`TallowOver` AS `FCorrent`, `Trans_log_table`.`TcheckOver` AS `FStatus`, '0' AS `FUpStockWhenSave`
	, '' AS `FExplanation`, '4' AS `FDeptID`, `uct_waste_sell`.`seller_id` AS `FEmpID`, `Trans_log_table`.`TcheckPerson` AS `FCheckerID`
	, CASE `Trans_log_table`.`TcheckOver`
		WHEN '0' THEN 'null'
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tcheck`), '%Y-%m-%d %H:%i:%S')
	END AS `FCheckDate`, `uct_waste_sell`.`customer_linkman_id` AS `FFManagerID`, `uct_waste_sell`.`customer_linkman_id` AS `FSManagerID`, `uct_waste_sell`.`seller_id` AS `FBillerID`, '1' AS `FCurrencyID`
	, `Trans_log_table`.`state` AS `FNowState`
	, if(`uct_waste_sell`.`purchase_id` IS NOT NULL = 1, '1', '2') AS `FSaleStyle`
	, '' AS `FPOStyle`, '' AS `FPOPrecent`, round(`uct_waste_sell`.`cargo_weight`, 1) AS `TalFQty`
	, round(`uct_waste_sell`.`cargo_price`, 2) AS `TalFAmount`, `uct_waste_sell`.`materiel_price` AS `TalFeeFrist`
	, `uct_waste_sell`.`other_price` AS `TalFeeSecond`, 0 AS `TalFeeThird`, 0 AS `TalFeeForth`,0 AS `TalFeeFifth`,0,0,0,0,null
FROM `uct_waste_sell`
	JOIN `uct_waste_customer`
	JOIN `Trans_log_table`
	JOIN `uct_waste_purchase`
WHERE ((`uct_waste_sell`.`customer_id` = `uct_waste_customer`.`id`)
	AND (`uct_waste_sell`.`purchase_id` = `Trans_log_table`.`FInterID`)
	AND (`Trans_log_table`.`FTranType` = 'PUR')
	AND (`uct_waste_sell`.`purchase_id` = `uct_waste_purchase`.`id`)
	AND (`uct_waste_sell`.`order_id` > 201806300000000000)
	AND (`uct_waste_sell`.`id` = id));
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_main_sor
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_main_sor`;
delimiter ;;
CREATE PROCEDURE `Trans_main_sor`(in `id` int)
begin

delete from Trans_main_table where FTranType = 'SOR' and FInterID = id;
insert into Trans_main_table SELECT `uct_waste_purchase`.`branch_id` AS `FRelateBrID`, `uct_waste_purchase`.`id` AS `FInterID`, 'SOR' AS `FTranType`
	, CASE `Trans_log_table`.`TallowOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d %H:%i:%S')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tallow`), '%Y-%m-%d %H:%i:%S')
	END AS `FDate`
	, DATE_FORMAT(FROM_UNIXTIME(`uct_waste_purchase`.createtime), '%Y-%m-%d %H:%i:%s') as createtime
	, CASE `Trans_log_table`.`TallowOver`
		WHEN '0' THEN date_format(from_unixtime(0), '%Y-%m-%d')
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tallow`), '%Y-%m-%d')
	END AS `Date`
	, `uct_waste_purchase`.`train_number` AS `FTrainNum`, `uct_waste_purchase`.`order_id` AS `FBillNo`, `uct_waste_purchase`.`customer_id` AS `FSupplyID`, `uct_waste_purchase`.`manager_id` AS `Fbusiness`
	, concat('LH', `uct_waste_warehouse`.`parent_id`) AS `FDCStockID`
	, concat('AD', `uct_waste_purchase`.`purchase_incharge`) AS `FSCStockID`
	, CASE `uct_waste_purchase`.`state`
		WHEN 'cancel' THEN '0'
		ELSE '1'
	END AS `FCancellation`, '0' AS `FROB`, `Trans_log_table`.`TallowOver` AS `FCorrent`, `Trans_log_table`.`TcheckOver` AS `FStatus`, `Trans_log_table`.`TsortOver` AS `FUpStockWhenSave`
	, '' AS `FExplanation`, `uct_waste_customer`.`service_department` AS `FDeptID`, `uct_waste_warehouse`.`admin_id` AS `FEmpID`, `Trans_log_table`.`TcheckPerson` AS `FCheckerID`
	, CASE `Trans_log_table`.`TcheckOver`
		WHEN '0' THEN 'null'
		ELSE date_format(from_unixtime(`Trans_log_table`.`Tcheck`), '%Y-%m-%d %H:%i:%S')
	END AS `FCheckDate`, `uct_waste_purchase`.`purchase_incharge` AS `FFManagerID`, `uct_waste_warehouse`.`admin_id` AS `FSManagerID`, `uct_waste_warehouse`.`admin_id` AS `FBillerID`, '1' AS `FCurrencyID`
	, `Trans_log_table`.`state` AS `FNowState`, '0' + CASE `uct_waste_purchase`.`give_frame`
		WHEN '1' THEN '3'
		ELSE 0
	END AS `FSaleStyle`, `uct_waste_customer`.`settle_way` AS `FPOStyle`, `uct_waste_customer`.`back_percent` AS `FPOPrecent`
	, round(`uct_waste_purchase`.`storage_weight`, 1) AS `TalFQty`
	, round(`uct_waste_purchase`.`storage_cargo_price`, 2) AS `TalFAmount`, `Trans_total_fee_sg`.`sort_fee` AS `TalFeeFrist`
	, `Trans_total_fee_sg`.`materiel_fee` AS `TalFeeSecond`, `Trans_total_fee_sg`.`other_sort_fee` AS `TalFeeThird`,`uct_waste_purchase`.`total_cargo_price` AS `TalFeeForth`,`uct_waste_purchase`.`total_labor_price` AS `TalFeeFifth`,0,0,0,0,null
FROM `uct_waste_purchase`
	JOIN `uct_waste_customer`
	JOIN `Trans_log_table`
	JOIN `uct_waste_warehouse`
	LEFT JOIN `Trans_total_fee_sg` ON `Trans_total_fee_sg`.`purchase_id` = `uct_waste_purchase`.`id`
WHERE ((`uct_waste_purchase`.`customer_id` = `uct_waste_customer`.`id`)
	AND (`uct_waste_purchase`.`id` = `Trans_log_table`.`FInterID`)
	AND (`Trans_log_table`.`FTranType` = 'PUR')
	AND (`uct_waste_warehouse`.`id` = `uct_waste_purchase`.`sort_point`)
	AND (`uct_waste_purchase`.`order_id` > 201806300000000000)
	AND (`uct_waste_purchase`.`id` = id));

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_materiel_pur
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_materiel_pur`;
delimiter ;;
CREATE PROCEDURE `Trans_materiel_pur`(in `id` int)
begin
    
    delete from Trans_materiel_table where FTranType = 'PUR' and FInterID = id;
	insert into Trans_materiel_table SELECT `uct_waste_purchase_materiel`.`purchase_id` AS `FInterID`, 'PUR' AS `FTranType`, `uct_waste_purchase_materiel`.`id` AS `FEntryID`, `uct_waste_purchase_materiel`.`materiel_id` AS `FMaterielID`
		, CAST(`uct_waste_purchase_materiel`.`storage_amount` AS signed) AS `FUseCount`, round(`uct_waste_purchase_materiel`.`inside_price`,2) AS `FPrice`
        , round((CAST(`uct_waste_purchase_materiel`.`storage_amount` AS signed)) * round(`uct_waste_purchase_materiel`.`inside_price`,2), 2) AS `FMeterielAmount`
        , `uct_waste_purchase_materiel`.`updatetime` AS `FMeterieltime`,NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
	FROM `uct_waste_purchase_materiel`
	WHERE `uct_waste_purchase_materiel`.`use_type` = 0 and `uct_waste_purchase_materiel`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_materiel_sel
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_materiel_sel`;
delimiter ;;
CREATE PROCEDURE `Trans_materiel_sel`(in `id` int)
begin

    delete from Trans_materiel_table where FTranType = 'SEL' and FInterID = id;
	insert into Trans_materiel_table SELECT `uct_waste_sell_materiel`.`sell_id` AS `FInterID`, 'SEL' AS `FTranType`, `uct_waste_sell_materiel`.`id` AS `FEntryID`, `uct_waste_sell_materiel`.`materiel_id` AS `FMaterielID`, `uct_waste_sell_materiel`.`pick_amount` AS `FUseCount`
		, `uct_waste_sell_materiel`.`unit_price` AS `FPrice`
		, round(`uct_waste_sell_materiel`.`pick_amount` * `uct_waste_sell_materiel`.`unit_price`,2)  AS `FMeterielAmount`
		,`uct_waste_sell_materiel`.`updatetime` AS `FMeterieltime`,NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
	FROM `uct_waste_sell_materiel`
	where `uct_waste_sell_materiel`.`sell_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for Trans_materiel_sor
-- ----------------------------
DROP PROCEDURE IF EXISTS `Trans_materiel_sor`;
delimiter ;;
CREATE PROCEDURE `Trans_materiel_sor`(in `id` int)
begin

    delete from Trans_materiel_table where FTranType = 'SOR' and FInterID = id;
	insert into Trans_materiel_table SELECT `uct_waste_purchase_materiel`.`purchase_id` AS `FInterID`, 'SOR' AS `FTranType`, `uct_waste_purchase_materiel`.`id` AS `FEntryID`, `uct_waste_purchase_materiel`.`materiel_id` AS `FMaterielID`
		, CAST(`uct_waste_purchase_materiel`.`pick_amount` AS signed) - CAST(`uct_waste_purchase_materiel`.`storage_amount` AS signed) AS `FUseCount`, `uct_waste_purchase_materiel`.`inside_price` AS `FPrice`
        , round((CAST(`uct_waste_purchase_materiel`.`pick_amount` AS signed) - CAST(`uct_waste_purchase_materiel`.`storage_amount` AS signed)) * round(`uct_waste_purchase_materiel`.`inside_price`,2), 2) AS `FMeterielAmount`
		, `uct_waste_purchase_materiel`.`updatetime` AS `FMeterieltime`,NULL AS `red_ink_time`, 0 as `is_hedge`,0,0
	FROM `uct_waste_purchase_materiel`
	WHERE `uct_waste_purchase_materiel`.`use_type` = 1 and `uct_waste_purchase_materiel`.`purchase_id` = id;

end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for trigger_error_210104
-- ----------------------------
DROP PROCEDURE IF EXISTS `trigger_error_210104`;
delimiter ;;
CREATE PROCEDURE `trigger_error_210104`()
begin

	-- uct_order_cancel表字段
	declare id_field int;
	declare order_id_field int;
	declare order_num_field varchar(50);
	declare type_field varchar(5);
	declare hand_mouth_data_field int;
	declare corrent_field int;
	declare handle_field int;

	-- 订单类型
	declare order_type varchar(10);

	-- 遍历数据结束标志
    DECLARE done INT DEFAULT FALSE;

	declare order_cancel_cur CURSOR for select id,order_id,order_num,type,hand_mouth_data,corrent,handle from uct_order_cancel group by order_id,type,hand_mouth_data;
	-- 将结束标志绑定到游标
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    START TRANSACTION; 
	open order_cancel_cur;
	out_loop:loop
		fetch next from order_cancel_cur into id_field,order_id_field,order_num_field,type_field,hand_mouth_data_field,corrent_field,handle_field; 	
		if done then
			leave out_loop;
		end if;

		set order_type = 'PUR,SOR';
		if type_field = 'SEL' then
			set order_type = 'SEL';
		end if;

		
	    /*处理fee表*/
	    set id_field = 0;
	    select FInterID into id_field from Trans_fee_table where  find_in_set(FTranType,order_type) and FInterID = order_id_field limit 1;
        if id_field > 0 then
	        delete from Trans_fee_table where find_in_set(FTranType,order_type) and FInterID = order_id_field;
	        insert into Trans_fee_table select *,NULL,0,0 from Trans_fee where find_in_set(FTranType,order_type) and FInterID = order_id_field;
	    end if;


        /*处理assist表*/
       	set id_field = 0;
       	-- select order_type,order_id_field;
	    select FInterID into id_field from Trans_assist_table where find_in_set(FTranType,order_type) and FInterID = order_id_field limit 1;
        if id_field > 0 then
	        delete from Trans_assist_table where find_in_set(FTranType,order_type) and FInterID = order_id_field;
	        insert into Trans_assist_table select *,NULL,0,0 from Trans_assist where find_in_set(FTranType,order_type) and FInterID = order_id_field;
        end if;

        select order_id_field;
		
        /*辅材表*/
        set id_field = 0;
	    select FInterID into id_field from Trans_materiel_table where find_in_set(FTranType,order_type) and FInterID = order_id_field limit 1;
        if id_field > 0 then
	        delete from Trans_materiel_table where find_in_set(FTranType,order_type) and FInterID = order_id_field;
	        insert into Trans_materiel_table select *,NULL,0,0 from Trans_materiel where find_in_set(FTranType,order_type) and FInterID = order_id_field;
        end if;
        	
        /*处理log表 判断的为purchase_id 或者 sell_id*/
        set id_field = 0;
	    select FInterID into id_field from Trans_log_table where find_in_set(FTranType,order_type) and FInterID = order_id_field limit 1;
        if id_field > 0 then
	        delete from Trans_log_table where find_in_set(FTranType,order_type) and FInterID = order_id_field;
	        insert into Trans_log_table select * from Trans_log where find_in_set(FTranType,order_type) and FInterID = order_id_field;
        end if;	

        /*处理main表*/
        set id_field = 0;
	    select FInterID into id_field from Trans_log_table where find_in_set(FTranType,order_type) and FInterID = order_id_field limit 1;
        if id_field > 0 then
	        delete from Trans_main_table where find_in_set(FTranType,order_type) and FInterID = order_id_field;
	        insert into Trans_main_table select *,0,0,0,0,null from Trans_main where find_in_set(FTranType,order_type) and FInterID = order_id_field;
        end if;	
        
        SET done = 0; 	

	end loop out_loop;	
	commit;
end
;;
delimiter ;

-- ----------------------------
-- Procedure structure for uct_main_effective_table_insert
-- ----------------------------
DROP PROCEDURE IF EXISTS `uct_main_effective_table_insert`;
delimiter ;;
CREATE PROCEDURE `uct_main_effective_table_insert`()
BEGIN
	replace into uct_main_effective_table(FBillNo,FCorrent,FDate)
	      SELECT FBillNo,SUM(FCorrent) as FCorrent,MAX(FDate) AS FDate
					FROM Trans_main_table
	       WHERE FSaleStyle <> 2 
			GROUP BY FBillNo
	      HAVING SUM(FCorrent) = 2 AND MAX(FDate) BETWEEN '2020-01-01 00:00:00' AND now(); 

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for updateStockHistory
-- ----------------------------
DROP PROCEDURE IF EXISTS `updateStockHistory`;
delimiter ;;
CREATE PROCEDURE `updateStockHistory`(in branch_id int,in centre_branch_id int,in warehouse_id varchar(10),in cate_id int,in sort_time varchar(30))
BEGIN


delete from Accoding_stock_history where FRelateBrID = centre_branch_id and FStockID = warehouse_id and FItemID = cate_id and FDCTime = date_format(sort_time, '%Y-%m-%d 23:59:59') and FdifQty = 0; 

insert into Accoding_stock_history SELECT `base`.`FRelateBrID` AS `FRelateBrID`, `base`.`FStockID` AS `FStockID`, `base`.`FItemID` AS `FItemID`
	, round(SUM(ifnull(`base`.`FDCQty`, 0)), 1) AS `FDCQty`
	, round(SUM(ifnull(`base`.`FSCQty`, 0)), 1) AS `FSCQty`
	, '0' AS `FdifQty`
	, date_format(concat(`base`.`FDCTime`, ' 23:59:59'), '%Y-%m-%d %H:%i:%s') AS `FDCTime`
FROM (
	SELECT centre_branch_id AS `FRelateBrID`
		, CASE `Trans_main_table`.`FTranType`
			WHEN 'SOR' THEN `Trans_main_table`.`FDCStockID`
			WHEN 'SEL' THEN `Trans_main_table`.`FSCStockID`
			ELSE NULL
		END AS `FStockID`, `Trans_assist_table`.`FItemID` AS `FItemID`
		, CASE `Trans_main_table`.`FTranType`
			WHEN 'SOR' THEN `Trans_assist_table`.`FQty`
			ELSE 0
		END AS `FDCQty`
		, CASE `Trans_main_table`.`FTranType`
			WHEN 'SEL' THEN `Trans_assist_table`.`FQty`
			ELSE 0
		END AS `FSCQty`, date_format(`Trans_assist_table`.`FDCTime`, '%Y-%m-%d') AS `FDCTime`
	FROM `Trans_assist_table`
		JOIN `Trans_main_table`
	WHERE ((`Trans_assist_table`.`FinterID` = `Trans_main_table`.`FInterID`)
		AND (`Trans_assist_table`.`FTranType` = `Trans_main_table`.`FTranType`)
		AND (`Trans_main_table`.`FSaleStyle` <> 1)
		AND (`Trans_main_table`.`FCancellation` = 1)
        AND (`Trans_main_table`.`FRelateBrID` = branch_id)
        AND (`Trans_main_table`.`FDCStockID` = warehouse_id or `Trans_main_table`.`FSCStockID` = warehouse_id)
        AND (`Trans_assist_table`.`FItemID` = cate_id))
        AND date_format(`Trans_assist_table`.`FDCTime`, '%Y-%m-%d') = date_format(sort_time, '%Y-%m-%d')
) `base`
GROUP BY `base`.`FStockID`, `base`.`FItemID`, `base`.`FDCTime`
HAVING `base`.`FStockID` IS NOT NULL;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for update_previous_common_cate
-- ----------------------------
DROP PROCEDURE IF EXISTS `update_previous_common_cate`;
delimiter ;;
CREATE PROCEDURE `update_previous_common_cate`()
BEGIN

DELETE FROM uct_common_cate WHERE date_unix > UNIX_TIMESTAMP()-86400;

INSERT INTO uct_common_cate (
	branch_id,
	cate_id,
	cate_name,
	src_type,
	weight,
	frequency,
	date_unix
) SELECT
	b.branch_id AS branch_id,
	b.id AS cate_id,
	b.`name` AS cate_name,
	IF(a.FTranType='PUR',0,IF(a.FTranType='SOR',1,2)) AS src_type,
	ROUND(SUM(IFNULL(a.FQty, 0))) AS weight,
	COUNT(b.id) AS frequency,
	UNIX_TIMESTAMP(
		DATE_FORMAT(a.FDCTime, '%Y-%m-%d')
	) AS date_unix
FROM
	Trans_assist_table AS a
JOIN uct_waste_cate AS b ON a.FItemID = b.id
WHERE
	a.FDCTime > DATE_FORMAT(FROM_UNIXTIME(UNIX_TIMESTAMP()-86400),'%Y-%m-%d 00:00:00')
GROUP BY
	date_unix,
	src_type,
	cate_id
ORDER BY
	date_unix;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for update_station_task
-- ----------------------------
DROP PROCEDURE IF EXISTS `update_station_task`;
delimiter ;;
CREATE PROCEDURE `update_station_task`(in p_line_id varchar(20),
 in p_station_id    varchar(20),
 in p_device_id     varchar(20),
 in p_device_label  varchar(20),
 in p_cate_id       integer,
 in p_cate_name     varchar(20),
 in p_package_no    varchar(20),
 in p_leader        integer,
 out o_rv           integer,
 out o_err          varchar(200))
BEGIN
    declare v_cate_id integer;
    declare v_task_id integer;
    declare v_package_no varchar(20);
    declare is_exists_package_no integer;
    declare is_close_package integer;
    declare is_active_package_no integer;

    main_proc:begin
        select id, cate_id, package_no
          into v_task_id, v_cate_id, v_package_no
          from uct_sorting_tasks
         where active = 1
           and line_id    = p_line_id
           and station_id = p_station_id
           and device_id  = p_device_id
         limit 1;

         
        select count(1) into is_exists_package_no
          from uct_sorting_tasks
         where package_no = p_package_no;

        
        select count(1) into is_close_package
          from uct_sorting_packings
         where package_no = p_package_no
           and status = 'close';

        
        if v_task_id is null and is_exists_package_no = 0 and is_close_package = 0 then

            insert into uct_sorting_tasks
                        (  line_id,   station_id,   device_id,   device_label,   cate_id,   cate_name, active,   leader,   package_no)
                  value (p_line_id, p_station_id, p_device_id, p_device_label, p_cate_id, p_cate_name,      1, p_leader, p_package_no);
            insert into uct_sorting_packings
                        ( package_no,    station_id,   device_id,   cate_id, begin_time, status)
                  value (p_package_no, p_station_id, p_device_id, p_cate_id,      now(), 'open');

            commit;

            set o_rv = 200;
            set o_err = "已建立新的任务.";
            leave main_proc;
        end if;


        
        if v_task_id is not null and  v_cate_id = p_cate_id and v_package_no = p_package_no then
            set o_rv = 201;
            set o_err = "提交的数据无变化,未更新.";
            leave main_proc;
        end if;

        
        if is_close_package > 0 then
            set o_rv = 502;
            set o_err = '这个包装编号已封包了,无法使用了.';
            leave main_proc;
        end if;

        
        select count(1) into is_active_package_no
          from uct_sorting_tasks
         where active = 1
           and package_no = p_package_no;

         
        if is_exists_package_no > 0  and is_active_package_no > 0 then
            set o_rv = 501;
            set o_err = '这个包装编号正在被使用.';
            leave main_proc;
        end if;
        
        if is_exists_package_no > 0  and is_active_package_no = 0 then
            insert into uct_sorting_tasks
                        (  line_id,   station_id,   device_id,   device_label,   cate_id,   cate_name, active,   leader,   package_no)
                  value (p_line_id, p_station_id, p_device_id, p_device_label, p_cate_id, p_cate_name,      2, p_leader, p_package_no);

            update uct_sorting_tasks
               set active = active - 1
             where line_id = p_line_id
               and station_id = p_station_id
               and device_id  = p_device_id
               and active > 0;

            commit;

            set o_rv = 200;
            set o_err = "已建立新的任务.";
            leave main_proc;

        end if;



      insert into uct_sorting_tasks
                (  line_id,   station_id,   device_id,   device_label,   cate_id,   cate_name, active,   leader,   package_no)
          value (p_line_id, p_station_id, p_device_id, p_device_label, p_cate_id, p_cate_name,      2, p_leader, p_package_no);

    update uct_sorting_tasks
       set active = active - 1
     where line_id = p_line_id
       and station_id = p_station_id
       and device_id  = p_device_id
       and active > 0;

    insert into uct_sorting_packings
                (  package_no,   station_id,   device_id,   cate_id, begin_time, status)
          value (p_package_no, p_station_id, p_device_id, p_cate_id,      now(), 'open');
    commit;

        set o_rv = 200;
        set o_err = "任务已更新.";

  end main_proc;

END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for wall_report
-- ----------------------------
DROP PROCEDURE IF EXISTS `wall_report`;
delimiter ;;
CREATE PROCEDURE `wall_report`(IN `region_type` varchar(20))
BEGIN

DECLARE nowdate date DEFAULT NOW();
DECLARE adcode_where varchar(100);
DECLARE customer_where varchar(100);
DECLARE customer_group_field varchar(100);
DECLARE factory_group_field varchar(100);
DECLARE factory_where varchar(100);
set nowdate = DATE_FORMAT(date_sub(curdate(),interval 1 day),'%Y-%m-%d');

/*判断区域类型*/
if(region_type = 'area') then       /*区县*/
    set adcode_where = "right(ad.adcode,4) != '0000' and right(ad.adcode,2) != '00'";
    set customer_where = "up.company_region";
    set customer_group_field = "company_province,company_city,company_region";
    set factory_group_field = "cf.province,cf.city,cf.area";
    set factory_where = "cf.area";
elseif(region_type = 'city') then   /*城市*/
    set adcode_where = "right(ad.adcode,4) != '0000' and right(ad.adcode,2) = '00'";
    set customer_where = "up.company_city";
    set customer_group_field = "company_province,company_city";
    set factory_group_field = "cf.province,cf.city";
    set factory_where = "cf.city";
else                                /*省*/
    set adcode_where = "right(ad.adcode,4) = '0000'";
    set customer_where = "up.company_province";
    set customer_group_field = "company_province";
    set factory_group_field = "cf.province";
    set factory_where = "cf.province";
end if;


/*存入今日数据*/

set @sql = concat("insert into uct_day_wall_report(adcode,weight,availability,rubbish,rdf,carbon,box,customer_num,report_date) select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num,'",nowdate,"' as report_date from uct_adcode ad left join 
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-09-30' and date_format(mt2.FDate,'%Y-%m-%d') = DATE_FORMAT('",nowdate,"','%Y-%m-%d') join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where,"    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where," join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-09-30' and date_format(mt.FDate,'%Y-%m-%d') = DATE_FORMAT('",nowdate,"','%Y-%m-%d')  and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by ",factory_group_field," order by cf.area ) box  on box.adcode = ad.adcode   

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",factory_group_field,") data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on ",customer_where," = ad.name and first_business_time = DATE_FORMAT('",nowdate,"','%Y-%m-%d') group by ",customer_group_field,") customer on customer.adcode = ad.adcode

where ",adcode_where); 


prepare stmt1 from @sql;
execute stmt1;
DEALLOCATE PREPARE stmt1;  

/*存入历史数据*/

set @sql = concat("update uct_accumulate_wall_report report join  (select ad.adcode,ifnull(weight,0) as weight ,ifnull(availability,0) as availability ,ifnull(rubbish,0) as rubbish ,ifnull(rdf,0) as rdf,ifnull(carbon,0) as carbon,ifnull(box,0) as box,ifnull(customer.customer_num,0) as customer_num from uct_adcode ad left join 
(select ad.adcode,round(sum(FQty),2) as weight , round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty),2) as availability,round(sum(if(c.name = '低值废弃物',FQty,0)),2) as rubbish ,round(sum(if(c.name = '低值废弃物',FQty,0))/sum(FQty)*4.2,2) as rdf , round(sum(FQty*c2.carbon_parm),2) as carbon ,box.box from Trans_main_table mt  join Trans_main_table mt2 on mt.FInterId = mt2.FInterId and mt2.FTranType = 'PUR' and  date_format(mt2.FDate,'%Y-%m-%d') > '2018-09-30'  join  uct_waste_purchase p on mt.FBillNo = p.order_id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where,"    join Trans_assist_table at on mt.FInterID = at.FinterID  and  mt.FTranType = at.FTranType   join uct_waste_cate c on  c.id = at.FItemID  join  uct_waste_cate c2 on c.parent_id = c2.id  

left join (select ad.adcode,sum(FUseCount) as box from Trans_main_table mt  join  uct_waste_purchase p on mt.FInterID = p.id  join  uct_waste_customer_factory cf  on cf.id = p.factory_id   join uct_adcode ad on ad.name =  ",factory_where," join Trans_materiel_table materiel on materiel.FInterID = mt.FInterID  join uct_materiel materiel2 on materiel.FMaterielID = materiel2.id and materiel.FTranType in ('PUR','SOR') and materiel2.name = '分类箱'  where date_format(mt.FDate,'%Y-%m-%d') > '2018-09-30' and mt.FTranType = 'PUR' and  mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7  group by ",factory_group_field," order by cf.area ) box  on box.adcode = ad.adcode   

where mt.FTranType in ('SOR','SEL') and mt.FSaleStyle in ('0','1')  and  mt.FCorrent = '1' and mt.FCancellation = '1'  and mt.FRelateBrID != 7   group by ",factory_group_field," order by cf.area) data on ad.adcode = data.adcode

left join (select ad.adcode , count(*) as customer_num from uct_up up join uct_adcode ad on ",customer_where," = ad.name  group by ",customer_group_field,") customer on customer.adcode = ad.adcode

where ",adcode_where,") data on report.adcode = data.adcode  
set  report.weight = data.weight , report.availability = data.availability , report.rubbish = data.rubbish ,report.rdf = data.rdf , report.carbon = data.carbon , report.box = data.box , report.customer_num = data.customer_num"); 

prepare stmt2 from @sql;
execute stmt2;
DEALLOCATE PREPARE stmt2;  


END
;;
delimiter ;

-- ----------------------------
-- Procedure structure for warehouse-daily-report
-- ----------------------------
DROP PROCEDURE IF EXISTS `warehouse-daily-report`;
delimiter ;;
CREATE PROCEDURE `warehouse-daily-report`()
begin

declare _test_date DATE default '2020-01-01';

start transaction;

while _test_date < curdate() do

/*入库量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims, b.setting_key as data_val, 'warehouse-daily-report' as stat_code, 'stock-in' as group1,  round(sum(ifnull(at.FQty,0)),2) as val1, round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(at.FQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_assist_table at join Trans_main_table mt on mt.FInterID = at.FinterID and mt.FTranType = at.FTranType and mt.FCancellation = 1 and mt.FSaleStyle = 0 and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)
right join lh_dw.data_statistics_results as r on  r.data_val = mt.FRelateBrID  right join uct_branch b on cast(b.setting_key as char) = r.data_val and   r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'warehouse-daily-report' and r.group1 = 'stock-in' group by b.setting_key;

/*出库量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims, b.setting_key as data_val, 'warehouse-daily-report' as stat_code , 'stock-out' as group1 ,  round(sum(ifnull(mt.TalFQty,0)),2) as val1, round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0) as val2, ifnull(round((round(sum(ifnull(mt.TalFQty,0)),2) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = 1 and mt.FCorrent = 1 and mt.FSaleStyle = 2 and mt.FTranType = 'SEL'  and mt.Date = DATE_SUB(_test_date,INTERVAL 1 DAY)  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'warehouse-daily-report' and r.group1 = 'stock-out'   group by  b.setting_key;

/*订单状态 待分拣入库*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims, b.setting_key as data_val, 'warehouse-daily-report' as stat_code , 'order-status-count' as group1 , 'wait_storage_sort' as group2 ,sum(if(mt.FNowState = 'wait_storage_sort',1,0)) as val1, sum(if(mt.FNowState = 'wait_storage_sort',1,0)) - ifnull(r.val1,0) as val2, ifnull(round((sum(if(mt.FNowState = 'wait_storage_sort',1,0)) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = 1  and mt.FSaleStyle in(0,3) and mt.FTranType = 'PUR'  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'warehouse-daily-report' and r.group1 = 'order-status-count' and r.group2 = 'wait_storage_sort'  group by  b.setting_key;

/*订单状态 待提货*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims, b.setting_key as data_val, 'warehouse-daily-report' as stat_code , 'order-status-count' as group1 , 'wait_pick_cargo' as group2 ,sum(if(mt.FNowState = 'wait_pick_cargo',1,0)) as val1, sum(if(mt.FNowState = 'wait_pick_cargo',1,0)) - ifnull(r.val1,0) as val2, ifnull(round((sum(if(mt.FNowState = 'wait_pick_cargo',1,0)) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = 1  and mt.FSaleStyle in(0,3) and mt.FTranType = 'PUR'  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'warehouse-daily-report' and r.group1 = 'order-status-count' and r.group2 = 'wait_pick_cargo'  group by  b.setting_key;

/*订单状态 待入库确认*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims, b.setting_key as data_val, 'warehouse-daily-report' as stat_code , 'order-status-count' as group1  , 'wait_storage_connect_confirm' as group2 ,sum(if(mt.FNowState = 'wait_storage_connect_confirm',1,0)) as val1, sum(if(mt.FNowState = 'wait_storage_connect_confirm',1,0)) - ifnull(r.val1,0) as val2, ifnull(round((sum(if(mt.FNowState = 'wait_storage_connect_confirm',1,0)) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = 1  and mt.FSaleStyle in(0,3) and mt.FTranType = 'PUR'  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'warehouse-daily-report' and r.group1 = 'order-status-count' and r.group2 = 'wait_storage_connect_confirm'  group by  b.setting_key;


/*订单状态 待入库交接*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,data_val,stat_code,group1,group2,val1,val2,val3) select 'D' as time_dims, DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val, CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time, CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time, '分部' as data_dims, b.setting_key as data_val, 'warehouse-daily-report' as stat_code , 'order-status-count' as group1 , 'wait_storage_connect' as group2 ,sum(if(mt.FNowState = 'wait_storage_connect',1,0)) as val1, sum(if(mt.FNowState = 'wait_storage_connect',1,0)) - ifnull(r.val1,0) as val2, ifnull(round((sum(if(mt.FNowState = 'wait_storage_connect',1,0)) - ifnull(r.val1,0))/ifnull(r.val1,0),2),0)*100 as val3 from Trans_main_table mt
right join lh_dw.data_statistics_results as r on r.data_val = mt.FRelateBrID and mt.FCancellation = 1  and mt.FSaleStyle in(0,3) and mt.FTranType = 'PUR'  right join uct_branch as b on cast(b.setting_key as char) = r.data_val and r.time_dims = 'D' and r.time_val = from_unixtime(UNIX_TIMESTAMP(_test_date)-60*60*48,'%Y-%m-%d') and r.data_dims = '分部' and r.stat_code = 'warehouse-daily-report' and r.group1 = 'order-status-count' and r.group2 = 'wait_storage_connect'  group by  b.setting_key;

/*入库量 出库量*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,txt1,val1,val2,val3,data_val) select * from (select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.txt1,rows.val1,rows.val2 ,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val , CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims , c.branch_id as data_val , 'warehouse-daily-report' as stat_code , 'stock-in-out-by-waste-cate-top10' as group1 , c.id as group2 , c.name as txt1 , sum(if(at.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY) ,at.FQty,0)) as val1 , sum(if(at.FTranType = 'SEL' and mt.FCorrent = 1 and date_format(mt.FDate, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY),at.FQty,0)) as val2  from Trans_assist_table at join Trans_main_table mt on at.FinterID = mt.FInterID and at.FTranType = mt.FTranType and at.FTranType in ('SOR','SEL') and mt.FCancellation = 1 right join uct_waste_cate c on c.id = at.FItemID   group by c.id  order by c.branch_id, sum(if(at.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY) ,at.FQty,0)) desc) as rows , (select @rank := 0,@classname := NULL) as rank) as res  where res.rank < 11;


/*库存排名*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,txt1,val1,val2,data_val) select * from (select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.txt1,rows.val1 ,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val , CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims , c.branch_id as data_val , 'warehouse-daily-report' as stat_code , 'stock-qty-by-waste-cate-top20' as group1 , c.id as group2 , c.name as txt1 , ifnull(s.FQty,0) as val1  from Accoding_stock s 
 join uct_waste_cate c on s.FItemID = c.id   order by c.branch_id , ifnull(s.FQty,0) desc) as rows , (select @rank := 0,@classname := NULL) as rank) as res  where res.rank < 21;

/*分拣人员绩效   提成/吨位*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,val3,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,rows.val2 ,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val , CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims  , a.branch_id as data_val , 'warehouse-daily-report' as stat_code , 'performance-commission-weight' as group1 , a.nickname as group2, round(sum(ifnull(mt.TalForth,0)),2) as val1, round(sum(ifnull(mt.TalFQty,0)),2) as val2  from  Trans_main_table mt  right join uct_admin a on cast(a.id as char) = mt.FEmpID and  mt.FCancellation = 1 and mt.FSaleStyle = 0 and mt.FTranType = 'SOR' and mt.FDate = DATE_SUB(_test_date,INTERVAL 1 DAY)  join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id  order by a.branch_id , round(sum(ifnull(mt.TalFQty,0)),2)  desc) as rows , (select @rank := 0,@classname := NULL) as rank;

/*分拣人员绩效   有价/低值*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,val3,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,rows.val2 ,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val , CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims  , a.branch_id as data_val , 'warehouse-daily-report' as stat_code , 'performance-valuable-unvaluable' as group1 , a.nickname as group2 , sum(if(at.value_type = 'valuable',ifnull(at.FQty,0),0)) as val1, sum(if(at.value_type = 'unvaluable',ifnull(at.FQty,0),0)) as val2  from  Trans_main_table mt  join Trans_assist_table at on mt.FInterID = at.FinterID and at.FTranType = mt.FTranType and  at.FTranType = 'SOR'  right join uct_admin a on cast(a.id as char) = mt.FEmpID and  mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)  join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id  order by a.branch_id , round(sum(ifnull(mt.TalFQty,0)),2)  desc) as rows , (select @rank := 0,@classname := NULL) as rank;
/*分拣人员绩效   过磅/分拣*/
insert into lh_dw.data_statistics_results(time_dims,time_val,begin_time,end_time,data_dims,stat_code,group1,group2,val1,val2,val3,data_val) select rows.time_dims,rows.time_val,rows.begin_time,rows.end_time,rows.data_dims,rows.stat_code,rows.group1,rows.group2,rows.val1,rows.val2 ,if(@classname = rows.data_val,@rank := @rank + 1,@rank :=1) as rank ,(@classname := rows.data_val) as data_val  from (select 'D' as time_dims , DATE_SUB(_test_date,INTERVAL 1 DAY) as time_val , CAST((CAST(_test_date AS DATE) - INTERVAL 1 DAY)AS DATETIME) as begin_time , CAST(CAST(_test_date AS DATE)AS DATETIME) as end_time , '分部' as data_dims  , a.branch_id as data_val , 'warehouse-daily-report' as stat_code , 'performance-sorting-weighing' as group1 , a.nickname as group2 , sum(if(at.disposal_way = 'sorting',ifnull(at.FQty,0),0)) as val1, sum(if(at.disposal_way = 'weighing',ifnull(at.FQty,0),0)) as val2  from  Trans_main_table mt  join Trans_assist_table at on mt.FInterID = at.FinterID and at.FTranType = mt.FTranType and  at.FTranType = 'SOR'  right join uct_admin a on cast(a.id as char) = mt.FEmpID and  mt.FCancellation = '1' and mt.FSaleStyle = '0' and mt.FTranType = 'SOR' and date_format(at.FDCTime, '%Y-%m-%d') = DATE_SUB(_test_date,INTERVAL 1 DAY)  join uct_auth_group_access ga on ga.uid = a.id and ga.group_id = 42  group by a.id  order by a.branch_id , round(sum(ifnull(mt.TalFQty,0)),2)  desc) as rows , (select @rank := 0,@classname := NULL) as rank;



set _test_date = date_add(_test_date,interval 1 day);
end while;

commit;

end
;;
delimiter ;

-- ----------------------------
-- Event structure for event_uct_main_effective_table_insert
-- ----------------------------
DROP EVENT IF EXISTS `event_uct_main_effective_table_insert`;
delimiter ;;
CREATE EVENT `event_uct_main_effective_table_insert`
ON SCHEDULE
EVERY '10' MINUTE STARTS '2022-10-18 15:00:00'
DO CALL uct_main_effective_table_insert()
;;
delimiter ;

-- ----------------------------
-- Event structure for lh_dw_table_check_to_execute
-- ----------------------------
DROP EVENT IF EXISTS `lh_dw_table_check_to_execute`;
delimiter ;;
CREATE EVENT `lh_dw_table_check_to_execute`
ON SCHEDULE
EVERY '1' HOUR STARTS '2020-07-02 17:21:00'
DO CALL lh_dw_table_check_to_execute()
;;
delimiter ;

-- ----------------------------
-- Event structure for one_level_wall_report_event
-- ----------------------------
DROP EVENT IF EXISTS `one_level_wall_report_event`;
delimiter ;;
CREATE EVENT `one_level_wall_report_event`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-07-05 08:01:00'
ON COMPLETION PRESERVE
DO begin
    call one_level_wall_report('area');
    call one_level_wall_report('city');
    call one_level_wall_report('province');
end
;;
delimiter ;

-- ----------------------------
-- Event structure for order_cancel_event
-- ----------------------------
DROP EVENT IF EXISTS `order_cancel_event`;
delimiter ;;
CREATE EVENT `order_cancel_event`
ON SCHEDULE
EVERY '5' MINUTE STARTS '2022-06-18 10:27:00'
ON COMPLETION PRESERVE
DO begin
    call order_cancel();
end
;;
delimiter ;

-- ----------------------------
-- Event structure for stock_history_event
-- ----------------------------
DROP EVENT IF EXISTS `stock_history_event`;
delimiter ;;
CREATE EVENT `stock_history_event`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-08-16 08:01:00'
ON COMPLETION PRESERVE
DO begin
    call insertStockHistory();
end
;;
delimiter ;

-- ----------------------------
-- Event structure for update_common_cate
-- ----------------------------
DROP EVENT IF EXISTS `update_common_cate`;
delimiter ;;
CREATE EVENT `update_common_cate`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-11-19 08:00:00'
DO CALL update_previous_common_cate()
;;
delimiter ;

-- ----------------------------
-- Event structure for wall_report_event
-- ----------------------------
DROP EVENT IF EXISTS `wall_report_event`;
delimiter ;;
CREATE EVENT `wall_report_event`
ON SCHEDULE
EVERY '1' DAY STARTS '2019-07-18 08:01:00'
ON COMPLETION PRESERVE
DO begin
    call wall_report('area');
    call wall_report('city');
    call wall_report('province');
end
;;
delimiter ;

-- ----------------------------
-- Triggers structure for table uct_waste_purchase
-- ----------------------------
DROP TRIGGER IF EXISTS `purchase_trigger`;
delimiter ;;
CREATE TRIGGER `purchase_trigger` AFTER UPDATE ON `uct_waste_purchase` FOR EACH ROW BEGIN

if new.state = 'cancel' then

	set @id = new.id;
	set @order_num = new.order_id; 
	set @type = 'PUR';
	set @hand_mouth_data = new.hand_mouth_data; 
	set @corrent = 0;

	select FCorrent into @corrent from Trans_main_table where FInterID = @id and FTranType = 'PUR';

	insert into uct_order_cancel(order_id,order_num,type,hand_mouth_data,corrent) values (@id,@order_num,@type,@hand_mouth_data,@corrent);

end if;

END
;;
delimiter ;

-- ----------------------------
-- Triggers structure for table uct_waste_sell
-- ----------------------------
DROP TRIGGER IF EXISTS `sell_trigger`;
delimiter ;;
CREATE TRIGGER `sell_trigger` AFTER UPDATE ON `uct_waste_sell` FOR EACH ROW BEGIN

if new.state = 'cancel' then

	set @id = new.id; 
	set @order_num = new.order_id;
	set @type = 'SEL';
	set @hand_mouth_data = new.purchase_id;
	set @corrent = 0;

	select FCorrent into @corrent  from Trans_main_table where FInterID = @id and FTranType = 'SEL';

	-- 判断是否为现买现卖订单
	if @hand_mouth_data > 0 THEN
		set @hand_mouth_data = 1;
	else
		set @hand_mouth_data = 0;	
	end if;

	insert into uct_order_cancel(order_id,order_num,type,hand_mouth_data,corrent) values (@id,@order_num,@type,@hand_mouth_data,@corrent);

end if;

END
;;
delimiter ;

SET FOREIGN_KEY_CHECKS = 1;
